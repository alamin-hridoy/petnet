// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/teller/all.proto

package teller

import (
	reflect "reflect"
	sync "sync"

	profile "brank.as/petnet/gunk/drp/v1/profile"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterTellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string               `protobuf:"bytes,1,opt,name=Username,json=username,proto3" json:"username,omitempty"`
	Password   string               `protobuf:"bytes,2,opt,name=Password,json=password,proto3" json:"password,omitempty"`
	FirstName  string               `protobuf:"bytes,3,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	MiddleName string               `protobuf:"bytes,4,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	LastName   string               `protobuf:"bytes,5,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	Email      string               `protobuf:"bytes,6,opt,name=Email,json=email,proto3" json:"email,omitempty"`
	Phone      *profile.PhoneNumber `protobuf:"bytes,7,opt,name=Phone,json=phone,proto3" json:"phone,omitempty"`
	Birthdate  *profile.Date        `protobuf:"bytes,8,opt,name=Birthdate,json=birthdate,proto3" json:"birthdate,omitempty"`
	OperatorID string               `protobuf:"bytes,9,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
}

func (x *RegisterTellerRequest) Reset() {
	*x = RegisterTellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTellerRequest) ProtoMessage() {}

func (x *RegisterTellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTellerRequest.ProtoReflect.Descriptor instead.
func (*RegisterTellerRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterTellerRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterTellerRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterTellerRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterTellerRequest) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *RegisterTellerRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterTellerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterTellerRequest) GetPhone() *profile.PhoneNumber {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *RegisterTellerRequest) GetBirthdate() *profile.Date {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *RegisterTellerRequest) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

type RegisterTellerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *RegisterTellerResponse) Reset() {
	*x = RegisterTellerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTellerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTellerResponse) ProtoMessage() {}

func (x *RegisterTellerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTellerResponse.ProtoReflect.Descriptor instead.
func (*RegisterTellerResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterTellerResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type Teller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string               `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Status           string               `protobuf:"bytes,2,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	FirstName        string               `protobuf:"bytes,3,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	LastName         string               `protobuf:"bytes,4,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	Email            string               `protobuf:"bytes,5,opt,name=Email,json=email,proto3" json:"email,omitempty"`
	Phone            *profile.PhoneNumber `protobuf:"bytes,6,opt,name=Phone,json=phone,proto3" json:"phone,omitempty"`
	Birthdate        *profile.Date        `protobuf:"bytes,7,opt,name=Birthdate,json=birthdate,proto3" json:"birthdate,omitempty"`
	BirthCountry     string               `protobuf:"bytes,8,opt,name=BirthCountry,json=birth_country,proto3" json:"birth_country,omitempty"`
	Gender           string               `protobuf:"bytes,9,opt,name=Gender,json=gender,proto3" json:"gender,omitempty"`
	Nationality      string               `protobuf:"bytes,10,opt,name=Nationality,json=nationality,proto3" json:"nationality,omitempty"`
	CurrentAddress   *profile.Address     `protobuf:"bytes,11,opt,name=CurrentAddress,json=current_address,proto3" json:"current_address,omitempty"`
	PermanentAddress *profile.Address     `protobuf:"bytes,12,opt,name=PermanentAddress,json=permanent_address,proto3" json:"permanent_address,omitempty"`
	Employment       string               `protobuf:"bytes,13,opt,name=Employment,json=employment,proto3" json:"employment,omitempty"`
	KYCStatus        string               `protobuf:"bytes,14,opt,name=KYCStatus,json=kyc_status,proto3" json:"kyc_status,omitempty"`
	EnabledPartners  map[string]string    `protobuf:"bytes,15,rep,name=EnabledPartners,json=enabled_partners,proto3" json:"enabled_partners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Teller) Reset() {
	*x = Teller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Teller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Teller) ProtoMessage() {}

func (x *Teller) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Teller.ProtoReflect.Descriptor instead.
func (*Teller) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP(), []int{2}
}

func (x *Teller) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Teller) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Teller) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Teller) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Teller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Teller) GetPhone() *profile.PhoneNumber {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *Teller) GetBirthdate() *profile.Date {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *Teller) GetBirthCountry() string {
	if x != nil {
		return x.BirthCountry
	}
	return ""
}

func (x *Teller) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Teller) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *Teller) GetCurrentAddress() *profile.Address {
	if x != nil {
		return x.CurrentAddress
	}
	return nil
}

func (x *Teller) GetPermanentAddress() *profile.Address {
	if x != nil {
		return x.PermanentAddress
	}
	return nil
}

func (x *Teller) GetEmployment() string {
	if x != nil {
		return x.Employment
	}
	return ""
}

func (x *Teller) GetKYCStatus() string {
	if x != nil {
		return x.KYCStatus
	}
	return ""
}

func (x *Teller) GetEnabledPartners() map[string]string {
	if x != nil {
		return x.EnabledPartners
	}
	return nil
}

type UpdateTellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string                      `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Username         string                      `protobuf:"bytes,2,opt,name=Username,json=username,proto3" json:"username,omitempty"`
	Status           string                      `protobuf:"bytes,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Email            string                      `protobuf:"bytes,4,opt,name=Email,json=email,proto3" json:"email,omitempty"`
	Phone            *profile.PhoneNumber        `protobuf:"bytes,5,opt,name=Phone,json=phone,proto3" json:"phone,omitempty"`
	Birthdate        *profile.Date               `protobuf:"bytes,6,opt,name=Birthdate,json=birthdate,proto3" json:"birthdate,omitempty"`
	Nationality      string                      `protobuf:"bytes,7,opt,name=Nationality,json=nationality,proto3" json:"nationality,omitempty"`
	CurrentAddress   *profile.Address            `protobuf:"bytes,8,opt,name=CurrentAddress,json=current_address,proto3" json:"current_address,omitempty"`
	PermanentAddress *profile.Address            `protobuf:"bytes,9,opt,name=PermanentAddress,json=permanent_address,proto3" json:"permanent_address,omitempty"`
	Occupation       string                      `protobuf:"bytes,10,opt,name=Occupation,json=occupation,proto3" json:"occupation,omitempty"`
	EmployerName     string                      `protobuf:"bytes,11,opt,name=EmployerName,json=employer_name,proto3" json:"employer_name,omitempty"`
	TaxID            string                      `protobuf:"bytes,12,opt,name=TaxID,json=tax_id,proto3" json:"tax_id,omitempty"`
	SocSecurity      string                      `protobuf:"bytes,13,opt,name=SocSecurity,json=soc_security,proto3" json:"soc_security,omitempty"`
	ProfilePhoto     []byte                      `protobuf:"bytes,14,opt,name=ProfilePhoto,json=profile_photo,proto3" json:"profile_photo,omitempty"`
	SecurityQuestion []*profile.SecurityQuestion `protobuf:"bytes,15,rep,name=SecurityQuestion,json=security_question,proto3" json:"security_question,omitempty"`
}

func (x *UpdateTellerRequest) Reset() {
	*x = UpdateTellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTellerRequest) ProtoMessage() {}

func (x *UpdateTellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTellerRequest.ProtoReflect.Descriptor instead.
func (*UpdateTellerRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateTellerRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateTellerRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateTellerRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateTellerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateTellerRequest) GetPhone() *profile.PhoneNumber {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *UpdateTellerRequest) GetBirthdate() *profile.Date {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *UpdateTellerRequest) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *UpdateTellerRequest) GetCurrentAddress() *profile.Address {
	if x != nil {
		return x.CurrentAddress
	}
	return nil
}

func (x *UpdateTellerRequest) GetPermanentAddress() *profile.Address {
	if x != nil {
		return x.PermanentAddress
	}
	return nil
}

func (x *UpdateTellerRequest) GetOccupation() string {
	if x != nil {
		return x.Occupation
	}
	return ""
}

func (x *UpdateTellerRequest) GetEmployerName() string {
	if x != nil {
		return x.EmployerName
	}
	return ""
}

func (x *UpdateTellerRequest) GetTaxID() string {
	if x != nil {
		return x.TaxID
	}
	return ""
}

func (x *UpdateTellerRequest) GetSocSecurity() string {
	if x != nil {
		return x.SocSecurity
	}
	return ""
}

func (x *UpdateTellerRequest) GetProfilePhoto() []byte {
	if x != nil {
		return x.ProfilePhoto
	}
	return nil
}

func (x *UpdateTellerRequest) GetSecurityQuestion() []*profile.SecurityQuestion {
	if x != nil {
		return x.SecurityQuestion
	}
	return nil
}

type UpdateTellerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teller *Teller `protobuf:"bytes,1,opt,name=Teller,json=teller,proto3" json:"teller,omitempty"`
}

func (x *UpdateTellerResponse) Reset() {
	*x = UpdateTellerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTellerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTellerResponse) ProtoMessage() {}

func (x *UpdateTellerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTellerResponse.ProtoReflect.Descriptor instead.
func (*UpdateTellerResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTellerResponse) GetTeller() *Teller {
	if x != nil {
		return x.Teller
	}
	return nil
}

type UpdateIdentificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidID *profile.Identification `protobuf:"bytes,1,opt,name=ValidID,json=valid_id,proto3" json:"valid_id,omitempty"`
	IDPhoto []byte                  `protobuf:"bytes,2,opt,name=IDPhoto,json=id_photo,proto3" json:"id_photo,omitempty"`
}

func (x *UpdateIdentificationRequest) Reset() {
	*x = UpdateIdentificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdentificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdentificationRequest) ProtoMessage() {}

func (x *UpdateIdentificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdentificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateIdentificationRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateIdentificationRequest) GetValidID() *profile.Identification {
	if x != nil {
		return x.ValidID
	}
	return nil
}

func (x *UpdateIdentificationRequest) GetIDPhoto() []byte {
	if x != nil {
		return x.IDPhoto
	}
	return nil
}

type UpdateIdentificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teller *Teller `protobuf:"bytes,1,opt,name=Teller,json=teller,proto3" json:"teller,omitempty"`
}

func (x *UpdateIdentificationResponse) Reset() {
	*x = UpdateIdentificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdentificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdentificationResponse) ProtoMessage() {}

func (x *UpdateIdentificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdentificationResponse.ProtoReflect.Descriptor instead.
func (*UpdateIdentificationResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateIdentificationResponse) GetTeller() *Teller {
	if x != nil {
		return x.Teller
	}
	return nil
}

var File_brank_as_petnet_gunk_drp_v1_teller_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a,
	0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x36, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x3a, 0x5d, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x54, 0x0a, 0x52, 0xd2, 0x01,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0xd2, 0x01, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x3c, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb7,
	0x06, 0x0a, 0x06, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x36, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x0c, 0x42, 0x69, 0x72, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x22, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x50, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x6b, 0x79, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x0f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x36, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8c, 0x06, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x4e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x49, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x53,
	0x6f, 0x63, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x6f,
	0x63, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x52, 0x0a, 0x10, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x52, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x74, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8c, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x49,
	0x44, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5a, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x54, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xcc, 0x03, 0x0a, 0x0d, 0x54, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb5, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x02, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0xc0, 0x02, 0x0a, 0x06, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x1a, 0x3f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x61, 0x68,
	0x75, 0x62, 0x20, 0x63, 0x6f, 0x6e, 0x65, 0x78, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x57, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x50, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2e, 0x0a,
	0x2c, 0x1a, 0x2a, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61,
	0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a,
	0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x28, 0x00, 0x30, 0x00,
	0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x44, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x29, 0x62, 0x72, 0x61,
	0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e,
	0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x3b,
	0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8,
	0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_goTypes  = []interface{}{
		(*RegisterTellerRequest)(nil),        // 0: teller.RegisterTellerRequest
		(*RegisterTellerResponse)(nil),       // 1: teller.RegisterTellerResponse
		(*Teller)(nil),                       // 2: teller.Teller
		(*UpdateTellerRequest)(nil),          // 3: teller.UpdateTellerRequest
		(*UpdateTellerResponse)(nil),         // 4: teller.UpdateTellerResponse
		(*UpdateIdentificationRequest)(nil),  // 5: teller.UpdateIdentificationRequest
		(*UpdateIdentificationResponse)(nil), // 6: teller.UpdateIdentificationResponse
		nil,                                  // 7: teller.Teller.EnabledPartnersEntry
		(*profile.PhoneNumber)(nil),          // 8: profile.PhoneNumber
		(*profile.Date)(nil),                 // 9: profile.Date
		(*profile.Address)(nil),              // 10: profile.Address
		(*profile.SecurityQuestion)(nil),     // 11: profile.SecurityQuestion
		(*profile.Identification)(nil),       // 12: profile.Identification
	}
)

var file_brank_as_petnet_gunk_drp_v1_teller_all_proto_depIdxs = []int32{
	8,  // 0: teller.RegisterTellerRequest.Phone:type_name -> profile.PhoneNumber
	9,  // 1: teller.RegisterTellerRequest.Birthdate:type_name -> profile.Date
	8,  // 2: teller.Teller.Phone:type_name -> profile.PhoneNumber
	9,  // 3: teller.Teller.Birthdate:type_name -> profile.Date
	10, // 4: teller.Teller.CurrentAddress:type_name -> profile.Address
	10, // 5: teller.Teller.PermanentAddress:type_name -> profile.Address
	7,  // 6: teller.Teller.EnabledPartners:type_name -> teller.Teller.EnabledPartnersEntry
	8,  // 7: teller.UpdateTellerRequest.Phone:type_name -> profile.PhoneNumber
	9,  // 8: teller.UpdateTellerRequest.Birthdate:type_name -> profile.Date
	10, // 9: teller.UpdateTellerRequest.CurrentAddress:type_name -> profile.Address
	10, // 10: teller.UpdateTellerRequest.PermanentAddress:type_name -> profile.Address
	11, // 11: teller.UpdateTellerRequest.SecurityQuestion:type_name -> profile.SecurityQuestion
	2,  // 12: teller.UpdateTellerResponse.Teller:type_name -> teller.Teller
	12, // 13: teller.UpdateIdentificationRequest.ValidID:type_name -> profile.Identification
	2,  // 14: teller.UpdateIdentificationResponse.Teller:type_name -> teller.Teller
	0,  // 15: teller.TellerService.RegisterTeller:input_type -> teller.RegisterTellerRequest
	1,  // 16: teller.TellerService.RegisterTeller:output_type -> teller.RegisterTellerResponse
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_teller_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_teller_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_teller_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTellerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Teller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTellerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdentificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdentificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_teller_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_teller_all_proto_depIdxs,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_teller_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_teller_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_teller_all_proto_depIdxs = nil
}
