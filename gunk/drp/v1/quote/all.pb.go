// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/quote/all.proto

package quote

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuoteInquiryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemitPartner string       `protobuf:"bytes,1,opt,name=RemitPartner,json=remit_partner,proto3" json:"remit_partner,omitempty"`
	Amount       *QuoteAmount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *QuoteInquiryRequest) Reset() {
	*x = QuoteInquiryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteInquiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteInquiryRequest) ProtoMessage() {}

func (x *QuoteInquiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteInquiryRequest.ProtoReflect.Descriptor instead.
func (*QuoteInquiryRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{0}
}

func (x *QuoteInquiryRequest) GetRemitPartner() string {
	if x != nil {
		return x.RemitPartner
	}
	return ""
}

func (x *QuoteInquiryRequest) GetAmount() *QuoteAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type QuoteInquiryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount         *QuoteAmount      `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	FeeBreakdown   map[string]string `protobuf:"bytes,2,rep,name=FeeBreakdown,json=fee_breakdown,proto3" json:"fee_breakdown,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalFee       string            `protobuf:"bytes,3,opt,name=TotalFee,json=total_fee,proto3" json:"total_fee,omitempty"`
	TransferAmount string            `protobuf:"bytes,4,opt,name=TransferAmount,json=transfer_amount,proto3" json:"transfer_amount,omitempty"`
}

func (x *QuoteInquiryResponse) Reset() {
	*x = QuoteInquiryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteInquiryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteInquiryResponse) ProtoMessage() {}

func (x *QuoteInquiryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteInquiryResponse.ProtoReflect.Descriptor instead.
func (*QuoteInquiryResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{1}
}

func (x *QuoteInquiryResponse) GetAmount() *QuoteAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *QuoteInquiryResponse) GetFeeBreakdown() map[string]string {
	if x != nil {
		return x.FeeBreakdown
	}
	return nil
}

func (x *QuoteInquiryResponse) GetTotalFee() string {
	if x != nil {
		return x.TotalFee
	}
	return ""
}

func (x *QuoteInquiryResponse) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

type QuoteRequirementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemitPartner string       `protobuf:"bytes,1,opt,name=RemitPartner,json=remit_partner,proto3" json:"remit_partner,omitempty"`
	Amount       *QuoteAmount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *QuoteRequirementsRequest) Reset() {
	*x = QuoteRequirementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteRequirementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequirementsRequest) ProtoMessage() {}

func (x *QuoteRequirementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequirementsRequest.ProtoReflect.Descriptor instead.
func (*QuoteRequirementsRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{2}
}

func (x *QuoteRequirementsRequest) GetRemitPartner() string {
	if x != nil {
		return x.RemitPartner
	}
	return ""
}

func (x *QuoteRequirementsRequest) GetAmount() *QuoteAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type QuoteRequirementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requirements []*Requirement `protobuf:"bytes,1,rep,name=Requirements,json=requirements,proto3" json:"requirements,omitempty"`
	Quote        *Quote         `protobuf:"bytes,2,opt,name=Quote,json=quote,proto3" json:"quote,omitempty"`
}

func (x *QuoteRequirementsResponse) Reset() {
	*x = QuoteRequirementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteRequirementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequirementsResponse) ProtoMessage() {}

func (x *QuoteRequirementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequirementsResponse.ProtoReflect.Descriptor instead.
func (*QuoteRequirementsResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{3}
}

func (x *QuoteRequirementsResponse) GetRequirements() []*Requirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *QuoteRequirementsResponse) GetQuote() *Quote {
	if x != nil {
		return x.Quote
	}
	return nil
}

type CreateQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemitPartner string       `protobuf:"bytes,1,opt,name=RemitPartner,json=remit_partner,proto3" json:"remit_partner,omitempty"`
	Email        string       `protobuf:"bytes,2,opt,name=Email,json=email,proto3" json:"email,omitempty"`
	Amount       *QuoteAmount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *CreateQuoteRequest) Reset() {
	*x = CreateQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuoteRequest) ProtoMessage() {}

func (x *CreateQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuoteRequest.ProtoReflect.Descriptor instead.
func (*CreateQuoteRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{4}
}

func (x *CreateQuoteRequest) GetRemitPartner() string {
	if x != nil {
		return x.RemitPartner
	}
	return ""
}

func (x *CreateQuoteRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateQuoteRequest) GetAmount() *QuoteAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type CreateQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requirements []*Requirement `protobuf:"bytes,1,rep,name=Requirements,json=requirements,proto3" json:"requirements,omitempty"`
	QuoteSummary *QuoteSummary  `protobuf:"bytes,2,opt,name=QuoteSummary,json=quote_summary,proto3" json:"quote_summary,omitempty"`
}

func (x *CreateQuoteResponse) Reset() {
	*x = CreateQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuoteResponse) ProtoMessage() {}

func (x *CreateQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuoteResponse.ProtoReflect.Descriptor instead.
func (*CreateQuoteResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{5}
}

func (x *CreateQuoteResponse) GetRequirements() []*Requirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *CreateQuoteResponse) GetQuoteSummary() *QuoteSummary {
	if x != nil {
		return x.QuoteSummary
	}
	return nil
}

type QuoteSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCurrency      string            `protobuf:"bytes,1,opt,name=SourceCurrency,json=source_currency,proto3" json:"source_currency,omitempty"`
	DestinationCurrency string            `protobuf:"bytes,2,opt,name=DestinationCurrency,json=destination_currency,proto3" json:"destination_currency,omitempty"`
	SourceAmount        string            `protobuf:"bytes,3,opt,name=SourceAmount,json=source_amount,proto3" json:"source_amount,omitempty"`
	DestinationAmount   string            `protobuf:"bytes,4,opt,name=DestinationAmount,json=destination_amount,proto3" json:"destination_amount,omitempty"`
	FeeBreakdown        map[string]string `protobuf:"bytes,5,rep,name=FeeBreakdown,json=fee_breakdown,proto3" json:"fee_breakdown,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalFee            string            `protobuf:"bytes,6,opt,name=TotalFee,json=total_fee,proto3" json:"total_fee,omitempty"`
	TransferAmount      string            `protobuf:"bytes,7,opt,name=TransferAmount,json=transfer_amount,proto3" json:"transfer_amount,omitempty"`
	Payout              string            `protobuf:"bytes,8,opt,name=Payout,json=payout,proto3" json:"payout,omitempty"`
	Rate                string            `protobuf:"bytes,9,opt,name=Rate,json=rate,proto3" json:"rate,omitempty"`
}

func (x *QuoteSummary) Reset() {
	*x = QuoteSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteSummary) ProtoMessage() {}

func (x *QuoteSummary) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteSummary.ProtoReflect.Descriptor instead.
func (*QuoteSummary) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{6}
}

func (x *QuoteSummary) GetSourceCurrency() string {
	if x != nil {
		return x.SourceCurrency
	}
	return ""
}

func (x *QuoteSummary) GetDestinationCurrency() string {
	if x != nil {
		return x.DestinationCurrency
	}
	return ""
}

func (x *QuoteSummary) GetSourceAmount() string {
	if x != nil {
		return x.SourceAmount
	}
	return ""
}

func (x *QuoteSummary) GetDestinationAmount() string {
	if x != nil {
		return x.DestinationAmount
	}
	return ""
}

func (x *QuoteSummary) GetFeeBreakdown() map[string]string {
	if x != nil {
		return x.FeeBreakdown
	}
	return nil
}

func (x *QuoteSummary) GetTotalFee() string {
	if x != nil {
		return x.TotalFee
	}
	return ""
}

func (x *QuoteSummary) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

func (x *QuoteSummary) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

func (x *QuoteSummary) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCurrency      string `protobuf:"bytes,1,opt,name=SourceCurrency,json=source_currency,proto3" json:"source_currency,omitempty"`
	DestinationCurrency string `protobuf:"bytes,2,opt,name=DestinationCurrency,json=destination_currency,proto3" json:"destination_currency,omitempty"`
	SourceAmount        string `protobuf:"bytes,3,opt,name=SourceAmount,json=source_amount,proto3" json:"source_amount,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{7}
}

func (x *Quote) GetSourceCurrency() string {
	if x != nil {
		return x.SourceCurrency
	}
	return ""
}

func (x *Quote) GetDestinationCurrency() string {
	if x != nil {
		return x.DestinationCurrency
	}
	return ""
}

func (x *Quote) GetSourceAmount() string {
	if x != nil {
		return x.SourceAmount
	}
	return ""
}

type Requirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string   `protobuf:"bytes,1,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=Title,json=title,proto3" json:"title,omitempty"`
	UsageInfo string   `protobuf:"bytes,3,opt,name=UsageInfo,json=usage_info,proto3" json:"usage_info,omitempty"`
	Fields    []*Field `protobuf:"bytes,4,rep,name=Fields,json=fields,proto3" json:"fields,omitempty"`
}

func (x *Requirement) Reset() {
	*x = Requirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Requirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requirement) ProtoMessage() {}

func (x *Requirement) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requirement.ProtoReflect.Descriptor instead.
func (*Requirement) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{8}
}

func (x *Requirement) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Requirement) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Requirement) GetUsageInfo() string {
	if x != nil {
		return x.UsageInfo
	}
	return ""
}

func (x *Requirement) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Groups []*Group `protobuf:"bytes,2,rep,name=Groups,json=group,proto3" json:"group,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{9}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                         string           `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"key,omitempty"`
	Name                        string           `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Type                        string           `protobuf:"bytes,3,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	RefreshRequirementsOnChange bool             `protobuf:"varint,4,opt,name=RefreshRequirementsOnChange,json=refresh_requirements_on_change,proto3" json:"refresh_requirements_on_change,omitempty"`
	Required                    bool             `protobuf:"varint,5,opt,name=Required,json=required,proto3" json:"required,omitempty"`
	Example                     string           `protobuf:"bytes,6,opt,name=Example,json=example,proto3" json:"example,omitempty"`
	DisplayFormat               string           `protobuf:"bytes,7,opt,name=DisplayFormat,json=display_format,proto3" json:"display_format,omitempty"`
	MinLength                   string           `protobuf:"bytes,8,opt,name=MinLength,json=min_length,proto3" json:"min_length,omitempty"`
	MaxLength                   string           `protobuf:"bytes,9,opt,name=MaxLength,json=max_length,proto3" json:"max_length,omitempty"`
	ValidationRegexp            string           `protobuf:"bytes,10,opt,name=ValidationRegexp,json=validation_regexp,proto3" json:"validation_regexp,omitempty"`
	ValidationAsync             *ValidationAsync `protobuf:"bytes,11,opt,name=ValidationAsync,json=validation_async,proto3" json:"validation_async,omitempty"`
	ValuesAllowed               []*ValueAllowed  `protobuf:"bytes,12,rep,name=ValuesAllowed,json=values_allowed,proto3" json:"values_allowed,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{10}
}

func (x *Group) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Group) GetRefreshRequirementsOnChange() bool {
	if x != nil {
		return x.RefreshRequirementsOnChange
	}
	return false
}

func (x *Group) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Group) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *Group) GetDisplayFormat() string {
	if x != nil {
		return x.DisplayFormat
	}
	return ""
}

func (x *Group) GetMinLength() string {
	if x != nil {
		return x.MinLength
	}
	return ""
}

func (x *Group) GetMaxLength() string {
	if x != nil {
		return x.MaxLength
	}
	return ""
}

func (x *Group) GetValidationRegexp() string {
	if x != nil {
		return x.ValidationRegexp
	}
	return ""
}

func (x *Group) GetValidationAsync() *ValidationAsync {
	if x != nil {
		return x.ValidationAsync
	}
	return nil
}

func (x *Group) GetValuesAllowed() []*ValueAllowed {
	if x != nil {
		return x.ValuesAllowed
	}
	return nil
}

type ValueAllowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"key,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
}

func (x *ValueAllowed) Reset() {
	*x = ValueAllowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueAllowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueAllowed) ProtoMessage() {}

func (x *ValueAllowed) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueAllowed.ProtoReflect.Descriptor instead.
func (*ValueAllowed) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{11}
}

func (x *ValueAllowed) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ValueAllowed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ValidationAsync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL    string   `protobuf:"bytes,1,opt,name=URL,json=url,proto3" json:"url,omitempty"`
	Params []*Param `protobuf:"bytes,2,rep,name=Params,json=params,proto3" json:"params,omitempty"`
}

func (x *ValidationAsync) Reset() {
	*x = ValidationAsync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationAsync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationAsync) ProtoMessage() {}

func (x *ValidationAsync) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationAsync.ProtoReflect.Descriptor instead.
func (*ValidationAsync) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{12}
}

func (x *ValidationAsync) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ValidationAsync) GetParams() []*Param {
	if x != nil {
		return x.Params
	}
	return nil
}

type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"key,omitempty"`
	ParamaterName string `protobuf:"bytes,2,opt,name=ParamaterName,json=parameter_name,proto3" json:"parameter_name,omitempty"`
	Required      bool   `protobuf:"varint,3,opt,name=Required,json=required,proto3" json:"required,omitempty"`
}

func (x *Param) Reset() {
	*x = Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{13}
}

func (x *Param) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Param) GetParamaterName() string {
	if x != nil {
		return x.ParamaterName
	}
	return ""
}

func (x *Param) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type QuoteAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monetary amount in the smallest currency denomination.  Example: USD $10.25 => "1025".
	SourceAmount string `protobuf:"bytes,1,opt,name=SourceAmount,json=source_amount,proto3" json:"source_amount,omitempty"`
	// Source currency code using ISO-4217 3-letter codes.
	SourceCurrency string `protobuf:"bytes,2,opt,name=SourceCurrency,json=source_currency,proto3" json:"source_currency,omitempty"`
	// Destination currency code using ISO-4217 3-letter codes.
	DestinationCurrency string `protobuf:"bytes,3,opt,name=DestinationCurrency,json=destination_currency,proto3" json:"destination_currency,omitempty"`
}

func (x *QuoteAmount) Reset() {
	*x = QuoteAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteAmount) ProtoMessage() {}

func (x *QuoteAmount) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteAmount.ProtoReflect.Descriptor instead.
func (*QuoteAmount) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP(), []int{14}
}

func (x *QuoteAmount) GetSourceAmount() string {
	if x != nil {
		return x.SourceAmount
	}
	return ""
}

func (x *QuoteAmount) GetSourceCurrency() string {
	if x != nil {
		return x.SourceCurrency
	}
	return ""
}

func (x *QuoteAmount) GetDestinationCurrency() string {
	if x != nil {
		return x.DestinationCurrency
	}
	return ""
}

var File_brank_as_petnet_gunk_drp_v1_quote_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x24, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x1b, 0x0a, 0x19,
	0xd2, 0x01, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x14, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x0c, 0x46, 0x65,
	0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x65,
	0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x66, 0x65, 0x65,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x66, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x33, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa9, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x24, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0xd2, 0x01, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xcd, 0x01, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x2c, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x23, 0x0a, 0x21, 0xd2, 0x01, 0x0d, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa5, 0x04, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x13, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x11, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x65, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0d, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x27,
	0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x1e, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x1a, 0x33, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb4, 0x01,
	0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x13,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x60, 0x0a, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe5, 0x04,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x37, 0x0a,
	0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x4d, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x46, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x54, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x69, 0x0a, 0x0f, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x1c,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1c, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xf8, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x44, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x3b, 0x0a, 0x39, 0xd2, 0x01, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0xd2, 0x01, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0xd9, 0x0a, 0x0a,
	0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbf, 0x03,
	0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x1a,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xbc, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x20, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x20, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79,
	0x2e, 0x1a, 0x3b, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x69, 0x74,
	0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x54, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2f, 0x7b, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x7d, 0x2f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xd3, 0x03, 0x0a, 0x11, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0xbc, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x20, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x1a, 0x31, 0x47, 0x65, 0x74, 0x20, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x69,
	0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x59, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x2f, 0x7b, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x7d, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xab, 0x03, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe0, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xac, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x20, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x2e, 0x1a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x53, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4c, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x2a, 0x0a, 0x28, 0x1a, 0x26, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a,
	0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2f, 0x7b, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x28,
	0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x42, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x27,
	0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f,
	0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x3b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00,
	0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_goTypes  = []interface{}{
		(*QuoteInquiryRequest)(nil),       // 0: quote.QuoteInquiryRequest
		(*QuoteInquiryResponse)(nil),      // 1: quote.QuoteInquiryResponse
		(*QuoteRequirementsRequest)(nil),  // 2: quote.QuoteRequirementsRequest
		(*QuoteRequirementsResponse)(nil), // 3: quote.QuoteRequirementsResponse
		(*CreateQuoteRequest)(nil),        // 4: quote.CreateQuoteRequest
		(*CreateQuoteResponse)(nil),       // 5: quote.CreateQuoteResponse
		(*QuoteSummary)(nil),              // 6: quote.QuoteSummary
		(*Quote)(nil),                     // 7: quote.Quote
		(*Requirement)(nil),               // 8: quote.Requirement
		(*Field)(nil),                     // 9: quote.Field
		(*Group)(nil),                     // 10: quote.Group
		(*ValueAllowed)(nil),              // 11: quote.ValueAllowed
		(*ValidationAsync)(nil),           // 12: quote.ValidationAsync
		(*Param)(nil),                     // 13: quote.Param
		(*QuoteAmount)(nil),               // 14: quote.QuoteAmount
		nil,                               // 15: quote.QuoteInquiryResponse.FeeBreakdownEntry
		nil,                               // 16: quote.QuoteSummary.FeeBreakdownEntry
	}
)

var file_brank_as_petnet_gunk_drp_v1_quote_all_proto_depIdxs = []int32{
	14, // 0: quote.QuoteInquiryRequest.Amount:type_name -> quote.QuoteAmount
	14, // 1: quote.QuoteInquiryResponse.Amount:type_name -> quote.QuoteAmount
	15, // 2: quote.QuoteInquiryResponse.FeeBreakdown:type_name -> quote.QuoteInquiryResponse.FeeBreakdownEntry
	14, // 3: quote.QuoteRequirementsRequest.Amount:type_name -> quote.QuoteAmount
	8,  // 4: quote.QuoteRequirementsResponse.Requirements:type_name -> quote.Requirement
	7,  // 5: quote.QuoteRequirementsResponse.Quote:type_name -> quote.Quote
	14, // 6: quote.CreateQuoteRequest.Amount:type_name -> quote.QuoteAmount
	8,  // 7: quote.CreateQuoteResponse.Requirements:type_name -> quote.Requirement
	6,  // 8: quote.CreateQuoteResponse.QuoteSummary:type_name -> quote.QuoteSummary
	16, // 9: quote.QuoteSummary.FeeBreakdown:type_name -> quote.QuoteSummary.FeeBreakdownEntry
	9,  // 10: quote.Requirement.Fields:type_name -> quote.Field
	10, // 11: quote.Field.Groups:type_name -> quote.Group
	12, // 12: quote.Group.ValidationAsync:type_name -> quote.ValidationAsync
	11, // 13: quote.Group.ValuesAllowed:type_name -> quote.ValueAllowed
	13, // 14: quote.ValidationAsync.Params:type_name -> quote.Param
	0,  // 15: quote.QuoteService.QuoteInquiry:input_type -> quote.QuoteInquiryRequest
	2,  // 16: quote.QuoteService.QuoteRequirements:input_type -> quote.QuoteRequirementsRequest
	4,  // 17: quote.QuoteService.CreateQuote:input_type -> quote.CreateQuoteRequest
	1,  // 18: quote.QuoteService.QuoteInquiry:output_type -> quote.QuoteInquiryResponse
	3,  // 19: quote.QuoteService.QuoteRequirements:output_type -> quote.QuoteRequirementsResponse
	5,  // 20: quote.QuoteService.CreateQuote:output_type -> quote.CreateQuoteResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_quote_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_quote_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_quote_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteInquiryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteInquiryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteRequirementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteRequirementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Requirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueAllowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationAsync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_quote_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_quote_all_proto_depIdxs,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_quote_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_quote_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_quote_all_proto_depIdxs = nil
}
