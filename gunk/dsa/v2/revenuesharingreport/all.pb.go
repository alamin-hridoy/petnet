// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v2/revenuesharingreport/all.proto

package revenuesharingreport

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortOrder int32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	SortOrder_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{0}
}

type SortByColumn int32

const (
	SortByColumn_OmitSortByColumn SortByColumn = 0
	SortByColumn_OrgID            SortByColumn = 1
)

// Enum value maps for SortByColumn.
var (
	SortByColumn_name = map[int32]string{
		0: "OmitSortByColumn",
		1: "OrgID",
	}
	SortByColumn_value = map[string]int32{
		"OmitSortByColumn": 0,
		"OrgID":            1,
	}
)

func (x SortByColumn) Enum() *SortByColumn {
	p := new(SortByColumn)
	*p = x
	return p
}

func (x SortByColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_enumTypes[1].Descriptor()
}

func (SortByColumn) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_enumTypes[1]
}

func (x SortByColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByColumn.Descriptor instead.
func (SortByColumn) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{1}
}

type RevenueSharingReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID             string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Status            int32                  `protobuf:"varint,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count             int32                  `protobuf:"varint,6,opt,name=Count,json=count,proto3" json:"count,omitempty"`
	RemittanceCount   int32                  `protobuf:"varint,7,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CicoCount         int32                  `protobuf:"varint,8,opt,name=CicoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount int32                  `protobuf:"varint,9,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    int32                  `protobuf:"varint,10,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	DsaCommission     string                 `protobuf:"bytes,11,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	CommissionType    string                 `protobuf:"bytes,12,opt,name=CommissionType,json=dsa_commission_type,proto3" json:"dsa_commission_type,omitempty"`
	DsaCode           string                 `protobuf:"bytes,13,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string                 `protobuf:"bytes,14,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *RevenueSharingReport) Reset() {
	*x = RevenueSharingReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevenueSharingReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueSharingReport) ProtoMessage() {}

func (x *RevenueSharingReport) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueSharingReport.ProtoReflect.Descriptor instead.
func (*RevenueSharingReport) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{0}
}

func (x *RevenueSharingReport) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RevenueSharingReport) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RevenueSharingReport) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RevenueSharingReport) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RevenueSharingReport) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *RevenueSharingReport) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RevenueSharingReport) GetRemittanceCount() int32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *RevenueSharingReport) GetCicoCount() int32 {
	if x != nil {
		return x.CicoCount
	}
	return 0
}

func (x *RevenueSharingReport) GetBillsPaymentCount() int32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *RevenueSharingReport) GetInsuranceCount() int32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *RevenueSharingReport) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *RevenueSharingReport) GetCommissionType() string {
	if x != nil {
		return x.CommissionType
	}
	return ""
}

func (x *RevenueSharingReport) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *RevenueSharingReport) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

type CreateRevenueSharingReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID             string                 `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Status            int32                  `protobuf:"varint,2,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	RemittanceCount   int32                  `protobuf:"varint,4,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CicoCount         int32                  `protobuf:"varint,5,opt,name=CicoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount int32                  `protobuf:"varint,6,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    int32                  `protobuf:"varint,7,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	DsaCommission     string                 `protobuf:"bytes,8,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	CommissionType    string                 `protobuf:"bytes,9,opt,name=CommissionType,json=dsa_commission_type,proto3" json:"dsa_commission_type,omitempty"`
	DsaCode           string                 `protobuf:"bytes,10,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string                 `protobuf:"bytes,11,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *CreateRevenueSharingReportRequest) Reset() {
	*x = CreateRevenueSharingReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueSharingReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueSharingReportRequest) ProtoMessage() {}

func (x *CreateRevenueSharingReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueSharingReportRequest.ProtoReflect.Descriptor instead.
func (*CreateRevenueSharingReportRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRevenueSharingReportRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *CreateRevenueSharingReportRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateRevenueSharingReportRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CreateRevenueSharingReportRequest) GetRemittanceCount() int32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *CreateRevenueSharingReportRequest) GetCicoCount() int32 {
	if x != nil {
		return x.CicoCount
	}
	return 0
}

func (x *CreateRevenueSharingReportRequest) GetBillsPaymentCount() int32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *CreateRevenueSharingReportRequest) GetInsuranceCount() int32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *CreateRevenueSharingReportRequest) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *CreateRevenueSharingReportRequest) GetCommissionType() string {
	if x != nil {
		return x.CommissionType
	}
	return ""
}

func (x *CreateRevenueSharingReportRequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *CreateRevenueSharingReportRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

type CreateRevenueSharingReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID             string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Status            int32                  `protobuf:"varint,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	RemittanceCount   int32                  `protobuf:"varint,6,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CicoCount         int32                  `protobuf:"varint,7,opt,name=CicoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount int32                  `protobuf:"varint,8,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    int32                  `protobuf:"varint,9,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	DsaCommission     string                 `protobuf:"bytes,10,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	CommissionType    string                 `protobuf:"bytes,11,opt,name=CommissionType,json=dsa_commission_type,proto3" json:"dsa_commission_type,omitempty"`
	DsaCode           string                 `protobuf:"bytes,12,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string                 `protobuf:"bytes,13,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *CreateRevenueSharingReportResponse) Reset() {
	*x = CreateRevenueSharingReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueSharingReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueSharingReportResponse) ProtoMessage() {}

func (x *CreateRevenueSharingReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueSharingReportResponse.ProtoReflect.Descriptor instead.
func (*CreateRevenueSharingReportResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRevenueSharingReportResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CreateRevenueSharingReportResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *CreateRevenueSharingReportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateRevenueSharingReportResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CreateRevenueSharingReportResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *CreateRevenueSharingReportResponse) GetRemittanceCount() int32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *CreateRevenueSharingReportResponse) GetCicoCount() int32 {
	if x != nil {
		return x.CicoCount
	}
	return 0
}

func (x *CreateRevenueSharingReportResponse) GetBillsPaymentCount() int32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *CreateRevenueSharingReportResponse) GetInsuranceCount() int32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *CreateRevenueSharingReportResponse) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *CreateRevenueSharingReportResponse) GetCommissionType() string {
	if x != nil {
		return x.CommissionType
	}
	return ""
}

func (x *CreateRevenueSharingReportResponse) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *CreateRevenueSharingReportResponse) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

type GetRevenueSharingReportListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID             string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Status            int32                  `protobuf:"varint,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count             int32                  `protobuf:"varint,6,opt,name=Count,json=count,proto3" json:"count,omitempty"`
	Limit             int32                  `protobuf:"varint,7,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
	Offset            int32                  `protobuf:"varint,8,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
	SortOrder         SortOrder              `protobuf:"varint,9,opt,name=SortOrder,json=sort_order,proto3,enum=petnet.v2.revenuesharingreport.SortOrder" json:"sort_order,omitempty"`
	SortByColumn      SortByColumn           `protobuf:"varint,10,opt,name=SortByColumn,json=sort_by_column,proto3,enum=petnet.v2.revenuesharingreport.SortByColumn" json:"sort_by_column,omitempty"`
	RemittanceCount   int32                  `protobuf:"varint,11,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CicoCount         int32                  `protobuf:"varint,12,opt,name=CicoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount int32                  `protobuf:"varint,13,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    int32                  `protobuf:"varint,14,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	DsaCommission     string                 `protobuf:"bytes,15,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	CommissionType    string                 `protobuf:"bytes,16,opt,name=CommissionType,json=dsa_commission_type,proto3" json:"dsa_commission_type,omitempty"`
	DsaCode           string                 `protobuf:"bytes,17,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string                 `protobuf:"bytes,18,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *GetRevenueSharingReportListRequest) Reset() {
	*x = GetRevenueSharingReportListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueSharingReportListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueSharingReportListRequest) ProtoMessage() {}

func (x *GetRevenueSharingReportListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueSharingReportListRequest.ProtoReflect.Descriptor instead.
func (*GetRevenueSharingReportListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{3}
}

func (x *GetRevenueSharingReportListRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetRevenueSharingReportListRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *GetRevenueSharingReportListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetRevenueSharingReportListRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *GetRevenueSharingReportListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_DESC
}

func (x *GetRevenueSharingReportListRequest) GetSortByColumn() SortByColumn {
	if x != nil {
		return x.SortByColumn
	}
	return SortByColumn_OmitSortByColumn
}

func (x *GetRevenueSharingReportListRequest) GetRemittanceCount() int32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetCicoCount() int32 {
	if x != nil {
		return x.CicoCount
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetBillsPaymentCount() int32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetInsuranceCount() int32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *GetRevenueSharingReportListRequest) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *GetRevenueSharingReportListRequest) GetCommissionType() string {
	if x != nil {
		return x.CommissionType
	}
	return ""
}

func (x *GetRevenueSharingReportListRequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *GetRevenueSharingReportListRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

type GetRevenueSharingReportListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RevenueSharingReport `protobuf:"bytes,1,rep,name=Results,json=results,proto3" json:"results,omitempty"`
}

func (x *GetRevenueSharingReportListResponse) Reset() {
	*x = GetRevenueSharingReportListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueSharingReportListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueSharingReportListResponse) ProtoMessage() {}

func (x *GetRevenueSharingReportListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueSharingReportListResponse.ProtoReflect.Descriptor instead.
func (*GetRevenueSharingReportListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{4}
}

func (x *GetRevenueSharingReportListResponse) GetResults() []*RevenueSharingReport {
	if x != nil {
		return x.Results
	}
	return nil
}

type UpdateRevenueSharingReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID             string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Status            int32                  `protobuf:"varint,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	RemittanceCount   int32                  `protobuf:"varint,5,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CicoCount         int32                  `protobuf:"varint,6,opt,name=CicoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount int32                  `protobuf:"varint,7,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    int32                  `protobuf:"varint,8,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	DsaCommission     string                 `protobuf:"bytes,9,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	CommissionType    string                 `protobuf:"bytes,10,opt,name=CommissionType,json=dsa_commission_type,proto3" json:"dsa_commission_type,omitempty"`
	DsaCode           string                 `protobuf:"bytes,11,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string                 `protobuf:"bytes,12,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *UpdateRevenueSharingReportRequest) Reset() {
	*x = UpdateRevenueSharingReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueSharingReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueSharingReportRequest) ProtoMessage() {}

func (x *UpdateRevenueSharingReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueSharingReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateRevenueSharingReportRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRevenueSharingReportRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRevenueSharingReportRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpdateRevenueSharingReportRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateRevenueSharingReportRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UpdateRevenueSharingReportRequest) GetRemittanceCount() int32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportRequest) GetCicoCount() int32 {
	if x != nil {
		return x.CicoCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportRequest) GetBillsPaymentCount() int32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportRequest) GetInsuranceCount() int32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportRequest) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *UpdateRevenueSharingReportRequest) GetCommissionType() string {
	if x != nil {
		return x.CommissionType
	}
	return ""
}

func (x *UpdateRevenueSharingReportRequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *UpdateRevenueSharingReportRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

type UpdateRevenueSharingReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID             string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Status            int32                  `protobuf:"varint,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	RemittanceCount   int32                  `protobuf:"varint,6,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CicoCount         int32                  `protobuf:"varint,7,opt,name=CicoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount int32                  `protobuf:"varint,8,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    int32                  `protobuf:"varint,9,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	DsaCommission     string                 `protobuf:"bytes,10,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	CommissionType    string                 `protobuf:"bytes,11,opt,name=CommissionType,json=dsa_commission_type,proto3" json:"dsa_commission_type,omitempty"`
	DsaCode           string                 `protobuf:"bytes,12,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string                 `protobuf:"bytes,13,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *UpdateRevenueSharingReportResponse) Reset() {
	*x = UpdateRevenueSharingReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueSharingReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueSharingReportResponse) ProtoMessage() {}

func (x *UpdateRevenueSharingReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueSharingReportResponse.ProtoReflect.Descriptor instead.
func (*UpdateRevenueSharingReportResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRevenueSharingReportResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRevenueSharingReportResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpdateRevenueSharingReportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateRevenueSharingReportResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UpdateRevenueSharingReportResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *UpdateRevenueSharingReportResponse) GetRemittanceCount() int32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportResponse) GetCicoCount() int32 {
	if x != nil {
		return x.CicoCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportResponse) GetBillsPaymentCount() int32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportResponse) GetInsuranceCount() int32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *UpdateRevenueSharingReportResponse) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *UpdateRevenueSharingReportResponse) GetCommissionType() string {
	if x != nil {
		return x.CommissionType
	}
	return ""
}

func (x *UpdateRevenueSharingReportResponse) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *UpdateRevenueSharingReportResponse) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

var File_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x05, 0x0a, 0x14,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x69, 0x63, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x0d, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd3, 0x04, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x43, 0x69, 0x63, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x63,
	0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13,
	0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x73, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x73, 0x61,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x13, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59,
	0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x3a, 0x14, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0xa4, 0x05, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x69, 0x63, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x11,
	0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x0d, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xd0, 0x07, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x5e, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x69, 0x63, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x3a, 0x14, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xfc, 0x04, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x69, 0x63, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x0d, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x3a, 0x21,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x18, 0x0a, 0x16, 0xd2, 0x01, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x22, 0xa4, 0x05, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x69, 0x63, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x2a, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x2a, 0x3b, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x10, 0x4f, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d,
	0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18,
	0x00, 0x32, 0x95, 0x0d, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x9e, 0x04, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x41, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xc5, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x1a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4a, 0x78, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x71, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x4f,
	0x0a, 0x4d, 0x1a, 0x4b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20,
	0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a,
	0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xae, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x42, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x03, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd5, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x1a, 0x28,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4a, 0x79, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x72, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x50, 0x0a, 0x4e, 0x1a, 0x4c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x28,
	0x00, 0x30, 0x00, 0x12, 0x9e, 0x04, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x41, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x02, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0xc5, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x1a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4a, 0x78, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x71,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x4f, 0x0a, 0x4d, 0x1a, 0x4b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x60, 0x48, 0x01, 0x50, 0x00, 0x5a,
	0x45, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x3b, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8,
	0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 7)
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_goTypes   = []interface{}{
		(SortOrder)(0),                              // 0: petnet.v2.revenuesharingreport.SortOrder
		(SortByColumn)(0),                           // 1: petnet.v2.revenuesharingreport.SortByColumn
		(*RevenueSharingReport)(nil),                // 2: petnet.v2.revenuesharingreport.RevenueSharingReport
		(*CreateRevenueSharingReportRequest)(nil),   // 3: petnet.v2.revenuesharingreport.CreateRevenueSharingReportRequest
		(*CreateRevenueSharingReportResponse)(nil),  // 4: petnet.v2.revenuesharingreport.CreateRevenueSharingReportResponse
		(*GetRevenueSharingReportListRequest)(nil),  // 5: petnet.v2.revenuesharingreport.GetRevenueSharingReportListRequest
		(*GetRevenueSharingReportListResponse)(nil), // 6: petnet.v2.revenuesharingreport.GetRevenueSharingReportListResponse
		(*UpdateRevenueSharingReportRequest)(nil),   // 7: petnet.v2.revenuesharingreport.UpdateRevenueSharingReportRequest
		(*UpdateRevenueSharingReportResponse)(nil),  // 8: petnet.v2.revenuesharingreport.UpdateRevenueSharingReportResponse
		(*timestamppb.Timestamp)(nil),               // 9: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_depIdxs = []int32{
	9,  // 0: petnet.v2.revenuesharingreport.RevenueSharingReport.Created:type_name -> google.protobuf.Timestamp
	9,  // 1: petnet.v2.revenuesharingreport.RevenueSharingReport.Updated:type_name -> google.protobuf.Timestamp
	9,  // 2: petnet.v2.revenuesharingreport.CreateRevenueSharingReportRequest.Created:type_name -> google.protobuf.Timestamp
	9,  // 3: petnet.v2.revenuesharingreport.CreateRevenueSharingReportResponse.Created:type_name -> google.protobuf.Timestamp
	9,  // 4: petnet.v2.revenuesharingreport.CreateRevenueSharingReportResponse.Updated:type_name -> google.protobuf.Timestamp
	9,  // 5: petnet.v2.revenuesharingreport.GetRevenueSharingReportListRequest.Created:type_name -> google.protobuf.Timestamp
	9,  // 6: petnet.v2.revenuesharingreport.GetRevenueSharingReportListRequest.Updated:type_name -> google.protobuf.Timestamp
	0,  // 7: petnet.v2.revenuesharingreport.GetRevenueSharingReportListRequest.SortOrder:type_name -> petnet.v2.revenuesharingreport.SortOrder
	1,  // 8: petnet.v2.revenuesharingreport.GetRevenueSharingReportListRequest.SortByColumn:type_name -> petnet.v2.revenuesharingreport.SortByColumn
	2,  // 9: petnet.v2.revenuesharingreport.GetRevenueSharingReportListResponse.Results:type_name -> petnet.v2.revenuesharingreport.RevenueSharingReport
	9,  // 10: petnet.v2.revenuesharingreport.UpdateRevenueSharingReportRequest.Created:type_name -> google.protobuf.Timestamp
	9,  // 11: petnet.v2.revenuesharingreport.UpdateRevenueSharingReportResponse.Created:type_name -> google.protobuf.Timestamp
	9,  // 12: petnet.v2.revenuesharingreport.UpdateRevenueSharingReportResponse.Updated:type_name -> google.protobuf.Timestamp
	3,  // 13: petnet.v2.revenuesharingreport.RevenueSharingReportService.CreateRevenueSharingReport:input_type -> petnet.v2.revenuesharingreport.CreateRevenueSharingReportRequest
	5,  // 14: petnet.v2.revenuesharingreport.RevenueSharingReportService.GetRevenueSharingReportList:input_type -> petnet.v2.revenuesharingreport.GetRevenueSharingReportListRequest
	7,  // 15: petnet.v2.revenuesharingreport.RevenueSharingReportService.UpdateRevenueSharingReport:input_type -> petnet.v2.revenuesharingreport.UpdateRevenueSharingReportRequest
	4,  // 16: petnet.v2.revenuesharingreport.RevenueSharingReportService.CreateRevenueSharingReport:output_type -> petnet.v2.revenuesharingreport.CreateRevenueSharingReportResponse
	6,  // 17: petnet.v2.revenuesharingreport.RevenueSharingReportService.GetRevenueSharingReportList:output_type -> petnet.v2.revenuesharingreport.GetRevenueSharingReportListResponse
	8,  // 18: petnet.v2.revenuesharingreport.RevenueSharingReportService.UpdateRevenueSharingReport:output_type -> petnet.v2.revenuesharingreport.UpdateRevenueSharingReportResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevenueSharingReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueSharingReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueSharingReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueSharingReportListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueSharingReportListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueSharingReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueSharingReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v2_revenuesharingreport_all_proto_depIdxs = nil
}
