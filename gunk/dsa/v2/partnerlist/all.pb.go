// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v2/partnerlist/all.proto

package partnerlist

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartnerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Stype            string                 `protobuf:"bytes,2,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Created          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Status           string                 `protobuf:"bytes,6,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	ServiceName      string                 `protobuf:"bytes,7,opt,name=ServiceName,json=service_name,proto3" json:"service_name,omitempty"`
	UpdatedBy        string                 `protobuf:"bytes,8,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	DisableReason    string                 `protobuf:"bytes,9,opt,name=DisableReason,json=disable_reason,proto3" json:"disable_reason,omitempty"`
	Platform         string                 `protobuf:"bytes,10,opt,name=Platform,json=platform,proto3" json:"platform,omitempty"`
	IsProvider       bool                   `protobuf:"varint,11,opt,name=IsProvider,json=is_provider,proto3" json:"is_provider,omitempty"`
	PerahubPartnerID string                 `protobuf:"bytes,12,opt,name=PerahubPartnerID,json=perahub_partner_id,proto3" json:"perahub_partner_id,omitempty"`
	RemcoID          string                 `protobuf:"bytes,13,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
}

func (x *PartnerList) Reset() {
	*x = PartnerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerList) ProtoMessage() {}

func (x *PartnerList) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerList.ProtoReflect.Descriptor instead.
func (*PartnerList) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{0}
}

func (x *PartnerList) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PartnerList) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

func (x *PartnerList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartnerList) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PartnerList) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *PartnerList) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PartnerList) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PartnerList) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PartnerList) GetDisableReason() string {
	if x != nil {
		return x.DisableReason
	}
	return ""
}

func (x *PartnerList) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PartnerList) GetIsProvider() bool {
	if x != nil {
		return x.IsProvider
	}
	return false
}

func (x *PartnerList) GetPerahubPartnerID() string {
	if x != nil {
		return x.PerahubPartnerID
	}
	return ""
}

func (x *PartnerList) GetRemcoID() string {
	if x != nil {
		return x.RemcoID
	}
	return ""
}

type CreatePartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerList *PartnerList `protobuf:"bytes,1,opt,name=PartnerList,json=partnerlist,proto3" json:"partnerlist,omitempty"`
}

func (x *CreatePartnerListRequest) Reset() {
	*x = CreatePartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnerListRequest) ProtoMessage() {}

func (x *CreatePartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnerListRequest.ProtoReflect.Descriptor instead.
func (*CreatePartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePartnerListRequest) GetPartnerList() *PartnerList {
	if x != nil {
		return x.PartnerList
	}
	return nil
}

type CreatePartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerList *PartnerList `protobuf:"bytes,1,opt,name=PartnerList,json=partnerlist,proto3" json:"partnerlist,omitempty"`
}

func (x *CreatePartnerListResponse) Reset() {
	*x = CreatePartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnerListResponse) ProtoMessage() {}

func (x *CreatePartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnerListResponse.ProtoReflect.Descriptor instead.
func (*CreatePartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePartnerListResponse) GetPartnerList() *PartnerList {
	if x != nil {
		return x.PartnerList
	}
	return nil
}

type UpdatePartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerList *PartnerList `protobuf:"bytes,1,opt,name=PartnerList,json=partnerlist,proto3" json:"partnerlist,omitempty"`
}

func (x *UpdatePartnerListRequest) Reset() {
	*x = UpdatePartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerListRequest) ProtoMessage() {}

func (x *UpdatePartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerListRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatePartnerListRequest) GetPartnerList() *PartnerList {
	if x != nil {
		return x.PartnerList
	}
	return nil
}

type UpdatePartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerList *PartnerList `protobuf:"bytes,1,opt,name=PartnerList,json=partnerlist,proto3" json:"partnerlist,omitempty"`
}

func (x *UpdatePartnerListResponse) Reset() {
	*x = UpdatePartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerListResponse) ProtoMessage() {}

func (x *UpdatePartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerListResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePartnerListResponse) GetPartnerList() *PartnerList {
	if x != nil {
		return x.PartnerList
	}
	return nil
}

type GetPartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Stype       string `protobuf:"bytes,2,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	ServiceName string `protobuf:"bytes,5,opt,name=ServiceName,json=service_name,proto3" json:"service_name,omitempty"`
	Platform    string `protobuf:"bytes,6,opt,name=Platform,json=platform,proto3" json:"platform,omitempty"`
	IsProvider  bool   `protobuf:"varint,7,opt,name=IsProvider,json=is_provider,proto3" json:"is_provider,omitempty"`
}

func (x *GetPartnerListRequest) Reset() {
	*x = GetPartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerListRequest) ProtoMessage() {}

func (x *GetPartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerListRequest.ProtoReflect.Descriptor instead.
func (*GetPartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{5}
}

func (x *GetPartnerListRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetPartnerListRequest) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

func (x *GetPartnerListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPartnerListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPartnerListRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GetPartnerListRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetPartnerListRequest) GetIsProvider() bool {
	if x != nil {
		return x.IsProvider
	}
	return false
}

type GetPartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerList []*PartnerList `protobuf:"bytes,1,rep,name=PartnerList,json=partnerlist,proto3" json:"partnerlist,omitempty"`
}

func (x *GetPartnerListResponse) Reset() {
	*x = GetPartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerListResponse) ProtoMessage() {}

func (x *GetPartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerListResponse.ProtoReflect.Descriptor instead.
func (*GetPartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{6}
}

func (x *GetPartnerListResponse) GetPartnerList() []*PartnerList {
	if x != nil {
		return x.PartnerList
	}
	return nil
}

type DSAPartnerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner         string `protobuf:"bytes,1,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	TransactionType string `protobuf:"bytes,2,opt,name=TransactionType,json=transaction_type,proto3" json:"transaction_type,omitempty"`
}

func (x *DSAPartnerList) Reset() {
	*x = DSAPartnerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSAPartnerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSAPartnerList) ProtoMessage() {}

func (x *DSAPartnerList) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSAPartnerList.ProtoReflect.Descriptor instead.
func (*DSAPartnerList) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{7}
}

func (x *DSAPartnerList) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *DSAPartnerList) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

type DSAPartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionType string `protobuf:"bytes,1,opt,name=TransactionType,json=transaction_type,proto3" json:"transaction_type,omitempty"`
}

func (x *DSAPartnerListRequest) Reset() {
	*x = DSAPartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSAPartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSAPartnerListRequest) ProtoMessage() {}

func (x *DSAPartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSAPartnerListRequest.ProtoReflect.Descriptor instead.
func (*DSAPartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{8}
}

func (x *DSAPartnerListRequest) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

type GetDSAPartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DSAPartnerList []*DSAPartnerList `protobuf:"bytes,1,rep,name=DSAPartnerList,json=dsapartnerList,proto3" json:"dsapartnerList,omitempty"`
}

func (x *GetDSAPartnerListResponse) Reset() {
	*x = GetDSAPartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDSAPartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDSAPartnerListResponse) ProtoMessage() {}

func (x *GetDSAPartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDSAPartnerListResponse.ProtoReflect.Descriptor instead.
func (*GetDSAPartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{9}
}

func (x *GetDSAPartnerListResponse) GetDSAPartnerList() []*DSAPartnerList {
	if x != nil {
		return x.DSAPartnerList
	}
	return nil
}

type DeletePartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype string `protobuf:"bytes,1,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
}

func (x *DeletePartnerListRequest) Reset() {
	*x = DeletePartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartnerListRequest) ProtoMessage() {}

func (x *DeletePartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartnerListRequest.ProtoReflect.Descriptor instead.
func (*DeletePartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePartnerListRequest) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

type DeletePartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype string `protobuf:"bytes,1,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
}

func (x *DeletePartnerListResponse) Reset() {
	*x = DeletePartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartnerListResponse) ProtoMessage() {}

func (x *DeletePartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartnerListResponse.ProtoReflect.Descriptor instead.
func (*DeletePartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{11}
}

func (x *DeletePartnerListResponse) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

type EnablePartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype string `protobuf:"bytes,1,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
}

func (x *EnablePartnerListRequest) Reset() {
	*x = EnablePartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePartnerListRequest) ProtoMessage() {}

func (x *EnablePartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePartnerListRequest.ProtoReflect.Descriptor instead.
func (*EnablePartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{12}
}

func (x *EnablePartnerListRequest) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

type EnablePartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype string `protobuf:"bytes,1,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
}

func (x *EnablePartnerListResponse) Reset() {
	*x = EnablePartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePartnerListResponse) ProtoMessage() {}

func (x *EnablePartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePartnerListResponse.ProtoReflect.Descriptor instead.
func (*EnablePartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{13}
}

func (x *EnablePartnerListResponse) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

type DisablePartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype         string `protobuf:"bytes,1,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
	DisableReason string `protobuf:"bytes,2,opt,name=DisableReason,json=disable_reason,proto3" json:"disable_reason,omitempty"`
}

func (x *DisablePartnerListRequest) Reset() {
	*x = DisablePartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePartnerListRequest) ProtoMessage() {}

func (x *DisablePartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePartnerListRequest.ProtoReflect.Descriptor instead.
func (*DisablePartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{14}
}

func (x *DisablePartnerListRequest) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

func (x *DisablePartnerListRequest) GetDisableReason() string {
	if x != nil {
		return x.DisableReason
	}
	return ""
}

type DisablePartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype         string `protobuf:"bytes,1,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
	DisableReason string `protobuf:"bytes,2,opt,name=DisableReason,json=disable_reason,proto3" json:"disable_reason,omitempty"`
}

func (x *DisablePartnerListResponse) Reset() {
	*x = DisablePartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePartnerListResponse) ProtoMessage() {}

func (x *DisablePartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePartnerListResponse.ProtoReflect.Descriptor instead.
func (*DisablePartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{15}
}

func (x *DisablePartnerListResponse) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

func (x *DisablePartnerListResponse) GetDisableReason() string {
	if x != nil {
		return x.DisableReason
	}
	return ""
}

type EnableMultiplePartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stypes    []string `protobuf:"bytes,1,rep,name=Stypes,json=stypes,proto3" json:"stypes,omitempty"`
	UpdatedBy string   `protobuf:"bytes,2,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
}

func (x *EnableMultiplePartnerListRequest) Reset() {
	*x = EnableMultiplePartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMultiplePartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMultiplePartnerListRequest) ProtoMessage() {}

func (x *EnableMultiplePartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMultiplePartnerListRequest.ProtoReflect.Descriptor instead.
func (*EnableMultiplePartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{16}
}

func (x *EnableMultiplePartnerListRequest) GetStypes() []string {
	if x != nil {
		return x.Stypes
	}
	return nil
}

func (x *EnableMultiplePartnerListRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type EnableMultiplePartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stypes []string `protobuf:"bytes,1,rep,name=Stypes,json=stypes,proto3" json:"stypes,omitempty"`
}

func (x *EnableMultiplePartnerListResponse) Reset() {
	*x = EnableMultiplePartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMultiplePartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMultiplePartnerListResponse) ProtoMessage() {}

func (x *EnableMultiplePartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMultiplePartnerListResponse.ProtoReflect.Descriptor instead.
func (*EnableMultiplePartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{17}
}

func (x *EnableMultiplePartnerListResponse) GetStypes() []string {
	if x != nil {
		return x.Stypes
	}
	return nil
}

type DisableMultiplePartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stypes        []string `protobuf:"bytes,1,rep,name=Stypes,json=stypes,proto3" json:"stypes,omitempty"`
	DisableReason string   `protobuf:"bytes,2,opt,name=DisableReason,json=disable_reason,proto3" json:"disable_reason,omitempty"`
	UpdatedBy     string   `protobuf:"bytes,3,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
}

func (x *DisableMultiplePartnerListRequest) Reset() {
	*x = DisableMultiplePartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableMultiplePartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMultiplePartnerListRequest) ProtoMessage() {}

func (x *DisableMultiplePartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMultiplePartnerListRequest.ProtoReflect.Descriptor instead.
func (*DisableMultiplePartnerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{18}
}

func (x *DisableMultiplePartnerListRequest) GetStypes() []string {
	if x != nil {
		return x.Stypes
	}
	return nil
}

func (x *DisableMultiplePartnerListRequest) GetDisableReason() string {
	if x != nil {
		return x.DisableReason
	}
	return ""
}

func (x *DisableMultiplePartnerListRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type DisableMultiplePartnerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stypes        []string `protobuf:"bytes,1,rep,name=Stypes,json=stypes,proto3" json:"stypes,omitempty"`
	DisableReason string   `protobuf:"bytes,2,opt,name=DisableReason,json=disable_reason,proto3" json:"disable_reason,omitempty"`
}

func (x *DisableMultiplePartnerListResponse) Reset() {
	*x = DisableMultiplePartnerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableMultiplePartnerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMultiplePartnerListResponse) ProtoMessage() {}

func (x *DisableMultiplePartnerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMultiplePartnerListResponse.ProtoReflect.Descriptor instead.
func (*DisableMultiplePartnerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{19}
}

func (x *DisableMultiplePartnerListResponse) GetStypes() []string {
	if x != nil {
		return x.Stypes
	}
	return nil
}

func (x *DisableMultiplePartnerListResponse) GetDisableReason() string {
	if x != nil {
		return x.DisableReason
	}
	return ""
}

type GetPartnerByStypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype string `protobuf:"bytes,1,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
}

func (x *GetPartnerByStypeRequest) Reset() {
	*x = GetPartnerByStypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerByStypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerByStypeRequest) ProtoMessage() {}

func (x *GetPartnerByStypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerByStypeRequest.ProtoReflect.Descriptor instead.
func (*GetPartnerByStypeRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{20}
}

func (x *GetPartnerByStypeRequest) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

type GetPartnerByStypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerList *PartnerList `protobuf:"bytes,1,opt,name=PartnerList,json=partnerlist,proto3" json:"partnerlist,omitempty"`
}

func (x *GetPartnerByStypeResponse) Reset() {
	*x = GetPartnerByStypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerByStypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerByStypeResponse) ProtoMessage() {}

func (x *GetPartnerByStypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerByStypeResponse.ProtoReflect.Descriptor instead.
func (*GetPartnerByStypeResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP(), []int{21}
}

func (x *GetPartnerByStypeResponse) GetPartnerList() *PartnerList {
	if x != nil {
		return x.PartnerList
	}
	return nil
}

var File_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDesc = []byte{
	0x0a, 0x31, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x04, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x61, 0x68, 0x75, 0x62, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x70, 0x65, 0x72, 0x61, 0x68, 0x75, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x52,
	0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x63, 0x6f, 0x5f,
	0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x74, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x75, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x74, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x75, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xa5, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x0a, 0x49, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x72, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x75, 0x0a, 0x0e, 0x44, 0x53, 0x41, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x56, 0x0a, 0x15, 0x44, 0x53, 0x41, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x7e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x53, 0x41, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x44, 0x53, 0x41, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x53, 0x41,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x73, 0x61, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x44, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x53,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x45, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x44, 0x0a, 0x18,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x45, 0x0a, 0x19, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x78, 0x0a, 0x19, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x79, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x79,
	0x0a, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4f, 0x0a, 0x21, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x53, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xad, 0x01, 0x0a, 0x21, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x44, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x79,
	0x53, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05,
	0x53, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0x8a, 0x24,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xc3, 0x03, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa2, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x1a, 0x23, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x64, 0x73, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc9, 0x03, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xcc, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa2, 0x02,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x1a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x73, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69,
	0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb3, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0x9b, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x10, 0x47, 0x65, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x1a, 0x22, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x62, 0x79, 0x20, 0x6f,
	0x72, 0x67, 0x20, 0x49, 0x44, 0x2e, 0x4a, 0x5c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x55, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x33, 0x0a, 0x31, 0x1a, 0x2f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb4, 0x03, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x53, 0x41, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x53, 0x41, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x53, 0x41, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xba, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x93, 0x02, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x47, 0x65,
	0x74, 0x20, 0x64, 0x73, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x1a, 0x13, 0x47, 0x65, 0x74, 0x20, 0x64, 0x73, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x47,
	0x65, 0x74, 0x44, 0x53, 0x41, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65,
	0x74, 0x64, 0x73, 0x61, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xbc, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x98, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x1a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xb9, 0x03, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x92, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x1a, 0x13, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x4a,
	0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc0,
	0x03, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x02, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0x95, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x1a, 0x14, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x4a, 0x60, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xf5, 0x03, 0x0a, 0x19, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x37, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xe0, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xac, 0x02, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x1a, 0x1c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x4a, 0x67, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x60, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x1a, 0x3a, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xfc, 0x03, 0x0a, 0x1a, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xaf, 0x02, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x1a, 0x1d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x4a, 0x68, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x61, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x3f,
	0x0a, 0x3d, 0x1a, 0x3b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20,
	0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a,
	0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xba, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x42, 0x79, 0x53, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xbd, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x91, 0x02, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x0c, 0x47, 0x65, 0x74, 0x20, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x1a, 0x1d, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36, 0x0a,
	0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x53, 0x74, 0x79, 0x70, 0x65,
	0x7d, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x4e, 0x48, 0x01, 0x50, 0x00,
	0x5a, 0x33, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x3b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_goTypes  = []interface{}{
		(*PartnerList)(nil),                        // 0: petnet.v2.partnerlist.PartnerList
		(*CreatePartnerListRequest)(nil),           // 1: petnet.v2.partnerlist.CreatePartnerListRequest
		(*CreatePartnerListResponse)(nil),          // 2: petnet.v2.partnerlist.CreatePartnerListResponse
		(*UpdatePartnerListRequest)(nil),           // 3: petnet.v2.partnerlist.UpdatePartnerListRequest
		(*UpdatePartnerListResponse)(nil),          // 4: petnet.v2.partnerlist.UpdatePartnerListResponse
		(*GetPartnerListRequest)(nil),              // 5: petnet.v2.partnerlist.GetPartnerListRequest
		(*GetPartnerListResponse)(nil),             // 6: petnet.v2.partnerlist.GetPartnerListResponse
		(*DSAPartnerList)(nil),                     // 7: petnet.v2.partnerlist.DSAPartnerList
		(*DSAPartnerListRequest)(nil),              // 8: petnet.v2.partnerlist.DSAPartnerListRequest
		(*GetDSAPartnerListResponse)(nil),          // 9: petnet.v2.partnerlist.GetDSAPartnerListResponse
		(*DeletePartnerListRequest)(nil),           // 10: petnet.v2.partnerlist.DeletePartnerListRequest
		(*DeletePartnerListResponse)(nil),          // 11: petnet.v2.partnerlist.DeletePartnerListResponse
		(*EnablePartnerListRequest)(nil),           // 12: petnet.v2.partnerlist.EnablePartnerListRequest
		(*EnablePartnerListResponse)(nil),          // 13: petnet.v2.partnerlist.EnablePartnerListResponse
		(*DisablePartnerListRequest)(nil),          // 14: petnet.v2.partnerlist.DisablePartnerListRequest
		(*DisablePartnerListResponse)(nil),         // 15: petnet.v2.partnerlist.DisablePartnerListResponse
		(*EnableMultiplePartnerListRequest)(nil),   // 16: petnet.v2.partnerlist.EnableMultiplePartnerListRequest
		(*EnableMultiplePartnerListResponse)(nil),  // 17: petnet.v2.partnerlist.EnableMultiplePartnerListResponse
		(*DisableMultiplePartnerListRequest)(nil),  // 18: petnet.v2.partnerlist.DisableMultiplePartnerListRequest
		(*DisableMultiplePartnerListResponse)(nil), // 19: petnet.v2.partnerlist.DisableMultiplePartnerListResponse
		(*GetPartnerByStypeRequest)(nil),           // 20: petnet.v2.partnerlist.GetPartnerByStypeRequest
		(*GetPartnerByStypeResponse)(nil),          // 21: petnet.v2.partnerlist.GetPartnerByStypeResponse
		(*timestamppb.Timestamp)(nil),              // 22: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_depIdxs = []int32{
	22, // 0: petnet.v2.partnerlist.PartnerList.Created:type_name -> google.protobuf.Timestamp
	22, // 1: petnet.v2.partnerlist.PartnerList.Updated:type_name -> google.protobuf.Timestamp
	0,  // 2: petnet.v2.partnerlist.CreatePartnerListRequest.PartnerList:type_name -> petnet.v2.partnerlist.PartnerList
	0,  // 3: petnet.v2.partnerlist.CreatePartnerListResponse.PartnerList:type_name -> petnet.v2.partnerlist.PartnerList
	0,  // 4: petnet.v2.partnerlist.UpdatePartnerListRequest.PartnerList:type_name -> petnet.v2.partnerlist.PartnerList
	0,  // 5: petnet.v2.partnerlist.UpdatePartnerListResponse.PartnerList:type_name -> petnet.v2.partnerlist.PartnerList
	0,  // 6: petnet.v2.partnerlist.GetPartnerListResponse.PartnerList:type_name -> petnet.v2.partnerlist.PartnerList
	7,  // 7: petnet.v2.partnerlist.GetDSAPartnerListResponse.DSAPartnerList:type_name -> petnet.v2.partnerlist.DSAPartnerList
	0,  // 8: petnet.v2.partnerlist.GetPartnerByStypeResponse.PartnerList:type_name -> petnet.v2.partnerlist.PartnerList
	1,  // 9: petnet.v2.partnerlist.PartnerListService.CreatePartnerList:input_type -> petnet.v2.partnerlist.CreatePartnerListRequest
	3,  // 10: petnet.v2.partnerlist.PartnerListService.UpdatePartnerList:input_type -> petnet.v2.partnerlist.UpdatePartnerListRequest
	5,  // 11: petnet.v2.partnerlist.PartnerListService.GetPartnerList:input_type -> petnet.v2.partnerlist.GetPartnerListRequest
	8,  // 12: petnet.v2.partnerlist.PartnerListService.GetDSAPartnerList:input_type -> petnet.v2.partnerlist.DSAPartnerListRequest
	10, // 13: petnet.v2.partnerlist.PartnerListService.DeletePartnerList:input_type -> petnet.v2.partnerlist.DeletePartnerListRequest
	12, // 14: petnet.v2.partnerlist.PartnerListService.EnablePartnerList:input_type -> petnet.v2.partnerlist.EnablePartnerListRequest
	14, // 15: petnet.v2.partnerlist.PartnerListService.DisablePartnerList:input_type -> petnet.v2.partnerlist.DisablePartnerListRequest
	16, // 16: petnet.v2.partnerlist.PartnerListService.EnableMultiplePartnerList:input_type -> petnet.v2.partnerlist.EnableMultiplePartnerListRequest
	18, // 17: petnet.v2.partnerlist.PartnerListService.DisableMultiplePartnerList:input_type -> petnet.v2.partnerlist.DisableMultiplePartnerListRequest
	20, // 18: petnet.v2.partnerlist.PartnerListService.GetPartnerByStype:input_type -> petnet.v2.partnerlist.GetPartnerByStypeRequest
	2,  // 19: petnet.v2.partnerlist.PartnerListService.CreatePartnerList:output_type -> petnet.v2.partnerlist.CreatePartnerListResponse
	4,  // 20: petnet.v2.partnerlist.PartnerListService.UpdatePartnerList:output_type -> petnet.v2.partnerlist.UpdatePartnerListResponse
	6,  // 21: petnet.v2.partnerlist.PartnerListService.GetPartnerList:output_type -> petnet.v2.partnerlist.GetPartnerListResponse
	9,  // 22: petnet.v2.partnerlist.PartnerListService.GetDSAPartnerList:output_type -> petnet.v2.partnerlist.GetDSAPartnerListResponse
	11, // 23: petnet.v2.partnerlist.PartnerListService.DeletePartnerList:output_type -> petnet.v2.partnerlist.DeletePartnerListResponse
	13, // 24: petnet.v2.partnerlist.PartnerListService.EnablePartnerList:output_type -> petnet.v2.partnerlist.EnablePartnerListResponse
	15, // 25: petnet.v2.partnerlist.PartnerListService.DisablePartnerList:output_type -> petnet.v2.partnerlist.DisablePartnerListResponse
	17, // 26: petnet.v2.partnerlist.PartnerListService.EnableMultiplePartnerList:output_type -> petnet.v2.partnerlist.EnableMultiplePartnerListResponse
	19, // 27: petnet.v2.partnerlist.PartnerListService.DisableMultiplePartnerList:output_type -> petnet.v2.partnerlist.DisableMultiplePartnerListResponse
	21, // 28: petnet.v2.partnerlist.PartnerListService.GetPartnerByStype:output_type -> petnet.v2.partnerlist.GetPartnerByStypeResponse
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSAPartnerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSAPartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDSAPartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisablePartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisablePartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMultiplePartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMultiplePartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableMultiplePartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableMultiplePartnerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerByStypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerByStypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_depIdxs,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v2_partnerlist_all_proto_depIdxs = nil
}
