// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/revenue-commission/all.proto

package revenue_commission

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CommissionType is commission type, can be either absolute or range
type CommissionType int32

const (
	CommissionType_CommissionTypeAbsolute CommissionType = 0
	CommissionType_CommissionTypeRange    CommissionType = 1
	CommissionType_CommissionTypePercent  CommissionType = 2
)

// Enum value maps for CommissionType.
var (
	CommissionType_name = map[int32]string{
		0: "CommissionTypeAbsolute",
		1: "CommissionTypeRange",
		2: "CommissionTypePercent",
	}
	CommissionType_value = map[string]int32{
		"CommissionTypeAbsolute": 0,
		"CommissionTypeRange":    1,
		"CommissionTypePercent":  2,
	}
)

func (x CommissionType) Enum() *CommissionType {
	p := new(CommissionType)
	*p = x
	return p
}

func (x CommissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_enumTypes[0].Descriptor()
}

func (CommissionType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_enumTypes[0]
}

func (x CommissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommissionType.Descriptor instead.
func (CommissionType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{0}
}

// TrxType is transaction type, can be either inbound or outbound
type TrxType int32

const (
	TrxType_TrxTypeInbound  TrxType = 0
	TrxType_TrxTypeOutbound TrxType = 1
)

// Enum value maps for TrxType.
var (
	TrxType_name = map[int32]string{
		0: "TrxTypeInbound",
		1: "TrxTypeOutbound",
	}
	TrxType_value = map[string]int32{
		"TrxTypeInbound":  0,
		"TrxTypeOutbound": 1,
	}
)

func (x TrxType) Enum() *TrxType {
	p := new(TrxType)
	*p = x
	return p
}

func (x TrxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_enumTypes[1].Descriptor()
}

func (TrxType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_enumTypes[1]
}

func (x TrxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxType.Descriptor instead.
func (TrxType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{1}
}

// RemcoCommissionFee is commission fee details for remco
type RemcoCommissionFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeID               uint32                 `protobuf:"varint,1,opt,name=FeeID,json=id,proto3" json:"id,omitempty"`
	RemcoID             uint32                 `protobuf:"varint,2,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
	MinAmount           string                 `protobuf:"bytes,3,opt,name=MinAmount,json=min_amount,proto3" json:"min_amount,omitempty"`
	MaxAmount           string                 `protobuf:"bytes,4,opt,name=MaxAmount,json=max_amount,proto3" json:"max_amount,omitempty"`
	ServiceFee          string                 `protobuf:"bytes,5,opt,name=ServiceFee,json=service_fee,proto3" json:"service_fee,omitempty"`
	CommissionAmount    string                 `protobuf:"bytes,6,opt,name=CommissionAmount,json=commission_amount,proto3" json:"commission_amount,omitempty"`
	CommissionAmountOTC string                 `protobuf:"bytes,7,opt,name=CommissionAmountOTC,json=commission_amount_otc,proto3" json:"commission_amount_otc,omitempty"`
	CommissionType      CommissionType         `protobuf:"varint,8,opt,name=CommissionType,json=commission_type,proto3,enum=revenue_commission.CommissionType" json:"commission_type,omitempty"`
	TrxType             TrxType                `protobuf:"varint,9,opt,name=TrxType,json=trx_type,proto3,enum=revenue_commission.TrxType" json:"trx_type,omitempty"`
	UpdatedBy           string                 `protobuf:"bytes,10,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=UpdatedAt,json=updated_at,proto3" json:"updated_at,omitempty"`
}

func (x *RemcoCommissionFee) Reset() {
	*x = RemcoCommissionFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemcoCommissionFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemcoCommissionFee) ProtoMessage() {}

func (x *RemcoCommissionFee) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemcoCommissionFee.ProtoReflect.Descriptor instead.
func (*RemcoCommissionFee) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{0}
}

func (x *RemcoCommissionFee) GetFeeID() uint32 {
	if x != nil {
		return x.FeeID
	}
	return 0
}

func (x *RemcoCommissionFee) GetRemcoID() uint32 {
	if x != nil {
		return x.RemcoID
	}
	return 0
}

func (x *RemcoCommissionFee) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *RemcoCommissionFee) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

func (x *RemcoCommissionFee) GetServiceFee() string {
	if x != nil {
		return x.ServiceFee
	}
	return ""
}

func (x *RemcoCommissionFee) GetCommissionAmount() string {
	if x != nil {
		return x.CommissionAmount
	}
	return ""
}

func (x *RemcoCommissionFee) GetCommissionAmountOTC() string {
	if x != nil {
		return x.CommissionAmountOTC
	}
	return ""
}

func (x *RemcoCommissionFee) GetCommissionType() CommissionType {
	if x != nil {
		return x.CommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

func (x *RemcoCommissionFee) GetTrxType() TrxType {
	if x != nil {
		return x.TrxType
	}
	return TrxType_TrxTypeInbound
}

func (x *RemcoCommissionFee) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *RemcoCommissionFee) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RemcoCommissionFee) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// CreateRemcoCommissionFeeRequest is request for save new remco commission fee
type CreateRemcoCommissionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemcoID             uint32         `protobuf:"varint,1,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
	MinAmount           string         `protobuf:"bytes,2,opt,name=MinAmount,json=min_amount,proto3" json:"min_amount,omitempty"`
	MaxAmount           string         `protobuf:"bytes,3,opt,name=MaxAmount,json=max_amount,proto3" json:"max_amount,omitempty"`
	ServiceFee          string         `protobuf:"bytes,4,opt,name=ServiceFee,json=service_fee,proto3" json:"service_fee,omitempty"`
	CommissionType      CommissionType `protobuf:"varint,5,opt,name=CommissionType,json=commission_type,proto3,enum=revenue_commission.CommissionType" json:"commission_type,omitempty"`
	CommissionAmount    string         `protobuf:"bytes,6,opt,name=CommissionAmount,json=commission_amount,proto3" json:"commission_amount,omitempty"`
	CommissionAmountOTC string         `protobuf:"bytes,7,opt,name=CommissionAmountOTC,json=commission_amount_otc,proto3" json:"commission_amount_otc,omitempty"`
	TrxType             TrxType        `protobuf:"varint,8,opt,name=TrxType,json=trx_type,proto3,enum=revenue_commission.TrxType" json:"trx_type,omitempty"`
	UpdatedBy           string         `protobuf:"bytes,9,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
}

func (x *CreateRemcoCommissionFeeRequest) Reset() {
	*x = CreateRemcoCommissionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemcoCommissionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemcoCommissionFeeRequest) ProtoMessage() {}

func (x *CreateRemcoCommissionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemcoCommissionFeeRequest.ProtoReflect.Descriptor instead.
func (*CreateRemcoCommissionFeeRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRemcoCommissionFeeRequest) GetRemcoID() uint32 {
	if x != nil {
		return x.RemcoID
	}
	return 0
}

func (x *CreateRemcoCommissionFeeRequest) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *CreateRemcoCommissionFeeRequest) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

func (x *CreateRemcoCommissionFeeRequest) GetServiceFee() string {
	if x != nil {
		return x.ServiceFee
	}
	return ""
}

func (x *CreateRemcoCommissionFeeRequest) GetCommissionType() CommissionType {
	if x != nil {
		return x.CommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

func (x *CreateRemcoCommissionFeeRequest) GetCommissionAmount() string {
	if x != nil {
		return x.CommissionAmount
	}
	return ""
}

func (x *CreateRemcoCommissionFeeRequest) GetCommissionAmountOTC() string {
	if x != nil {
		return x.CommissionAmountOTC
	}
	return ""
}

func (x *CreateRemcoCommissionFeeRequest) GetTrxType() TrxType {
	if x != nil {
		return x.TrxType
	}
	return TrxType_TrxTypeInbound
}

func (x *CreateRemcoCommissionFeeRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

// UpdateRemcoCommissionFeeRequest is request for save new remco commission fee
type UpdateRemcoCommissionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeID               uint32         `protobuf:"varint,1,opt,name=FeeID,json=id,proto3" json:"id,omitempty"`
	RemcoID             uint32         `protobuf:"varint,2,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
	MinAmount           string         `protobuf:"bytes,3,opt,name=MinAmount,json=min_amount,proto3" json:"min_amount,omitempty"`
	MaxAmount           string         `protobuf:"bytes,4,opt,name=MaxAmount,json=max_amount,proto3" json:"max_amount,omitempty"`
	ServiceFee          string         `protobuf:"bytes,5,opt,name=ServiceFee,json=service_fee,proto3" json:"service_fee,omitempty"`
	CommissionType      CommissionType `protobuf:"varint,6,opt,name=CommissionType,json=commission_type,proto3,enum=revenue_commission.CommissionType" json:"commission_type,omitempty"`
	CommissionAmount    string         `protobuf:"bytes,7,opt,name=CommissionAmount,json=commission_amount,proto3" json:"commission_amount,omitempty"`
	CommissionAmountOTC string         `protobuf:"bytes,8,opt,name=CommissionAmountOTC,json=commission_amount_otc,proto3" json:"commission_amount_otc,omitempty"`
	TrxType             TrxType        `protobuf:"varint,9,opt,name=TrxType,json=trx_type,proto3,enum=revenue_commission.TrxType" json:"trx_type,omitempty"`
	UpdatedBy           string         `protobuf:"bytes,10,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
}

func (x *UpdateRemcoCommissionFeeRequest) Reset() {
	*x = UpdateRemcoCommissionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRemcoCommissionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemcoCommissionFeeRequest) ProtoMessage() {}

func (x *UpdateRemcoCommissionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemcoCommissionFeeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRemcoCommissionFeeRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRemcoCommissionFeeRequest) GetFeeID() uint32 {
	if x != nil {
		return x.FeeID
	}
	return 0
}

func (x *UpdateRemcoCommissionFeeRequest) GetRemcoID() uint32 {
	if x != nil {
		return x.RemcoID
	}
	return 0
}

func (x *UpdateRemcoCommissionFeeRequest) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *UpdateRemcoCommissionFeeRequest) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

func (x *UpdateRemcoCommissionFeeRequest) GetServiceFee() string {
	if x != nil {
		return x.ServiceFee
	}
	return ""
}

func (x *UpdateRemcoCommissionFeeRequest) GetCommissionType() CommissionType {
	if x != nil {
		return x.CommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

func (x *UpdateRemcoCommissionFeeRequest) GetCommissionAmount() string {
	if x != nil {
		return x.CommissionAmount
	}
	return ""
}

func (x *UpdateRemcoCommissionFeeRequest) GetCommissionAmountOTC() string {
	if x != nil {
		return x.CommissionAmountOTC
	}
	return ""
}

func (x *UpdateRemcoCommissionFeeRequest) GetTrxType() TrxType {
	if x != nil {
		return x.TrxType
	}
	return TrxType_TrxTypeInbound
}

func (x *UpdateRemcoCommissionFeeRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

// ListRemcoCommissionFeeResponse response for ListRemcoCommissionFee
type ListRemcoCommissionFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemcoCommissionFeeList []*RemcoCommissionFee `protobuf:"bytes,1,rep,name=RemcoCommissionFeeList,json=list,proto3" json:"list,omitempty"`
}

func (x *ListRemcoCommissionFeeResponse) Reset() {
	*x = ListRemcoCommissionFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemcoCommissionFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemcoCommissionFeeResponse) ProtoMessage() {}

func (x *ListRemcoCommissionFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemcoCommissionFeeResponse.ProtoReflect.Descriptor instead.
func (*ListRemcoCommissionFeeResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{3}
}

func (x *ListRemcoCommissionFeeResponse) GetRemcoCommissionFeeList() []*RemcoCommissionFee {
	if x != nil {
		return x.RemcoCommissionFeeList
	}
	return nil
}

// GetRemcoCommissionFeeByIDRequest ...
type GetRemcoCommissionFeeByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeID uint32 `protobuf:"varint,1,opt,name=FeeID,json=id,proto3" json:"id,omitempty"`
}

func (x *GetRemcoCommissionFeeByIDRequest) Reset() {
	*x = GetRemcoCommissionFeeByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemcoCommissionFeeByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemcoCommissionFeeByIDRequest) ProtoMessage() {}

func (x *GetRemcoCommissionFeeByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemcoCommissionFeeByIDRequest.ProtoReflect.Descriptor instead.
func (*GetRemcoCommissionFeeByIDRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{4}
}

func (x *GetRemcoCommissionFeeByIDRequest) GetFeeID() uint32 {
	if x != nil {
		return x.FeeID
	}
	return 0
}

// DeleteRemcoCommissionFeeRequest ...
type DeleteRemcoCommissionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeID uint32 `protobuf:"varint,1,opt,name=FeeID,json=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRemcoCommissionFeeRequest) Reset() {
	*x = DeleteRemcoCommissionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemcoCommissionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemcoCommissionFeeRequest) ProtoMessage() {}

func (x *DeleteRemcoCommissionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemcoCommissionFeeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRemcoCommissionFeeRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRemcoCommissionFeeRequest) GetFeeID() uint32 {
	if x != nil {
		return x.FeeID
	}
	return 0
}

// DSACommissionTier ...
type DSACommissionTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierID    uint32                 `protobuf:"varint,1,opt,name=TierID,json=id,proto3" json:"id,omitempty"`
	TierNo    string                 `protobuf:"bytes,2,opt,name=TierNo,json=tier_no,proto3" json:"tier_no,omitempty"`
	Minimum   string                 `protobuf:"bytes,3,opt,name=Minimum,json=minimum,proto3" json:"minimum,omitempty"`
	Maximum   string                 `protobuf:"bytes,4,opt,name=Maximum,json=maximum,proto3" json:"maximum,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,5,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=UpdatedAt,json=updated_at,proto3" json:"updated_at,omitempty"`
}

func (x *DSACommissionTier) Reset() {
	*x = DSACommissionTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSACommissionTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSACommissionTier) ProtoMessage() {}

func (x *DSACommissionTier) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSACommissionTier.ProtoReflect.Descriptor instead.
func (*DSACommissionTier) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{6}
}

func (x *DSACommissionTier) GetTierID() uint32 {
	if x != nil {
		return x.TierID
	}
	return 0
}

func (x *DSACommissionTier) GetTierNo() string {
	if x != nil {
		return x.TierNo
	}
	return ""
}

func (x *DSACommissionTier) GetMinimum() string {
	if x != nil {
		return x.Minimum
	}
	return ""
}

func (x *DSACommissionTier) GetMaximum() string {
	if x != nil {
		return x.Maximum
	}
	return ""
}

func (x *DSACommissionTier) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *DSACommissionTier) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DSACommissionTier) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// CreateDSACommissionTierRequest ...
type CreateDSACommissionTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierNo    string `protobuf:"bytes,1,opt,name=TierNo,json=tier_no,proto3" json:"tier_no,omitempty"`
	Minimum   string `protobuf:"bytes,2,opt,name=Minimum,json=minimum,proto3" json:"minimum,omitempty"`
	Maximum   string `protobuf:"bytes,3,opt,name=Maximum,json=maximum,proto3" json:"maximum,omitempty"`
	UpdatedBy string `protobuf:"bytes,4,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
}

func (x *CreateDSACommissionTierRequest) Reset() {
	*x = CreateDSACommissionTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDSACommissionTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDSACommissionTierRequest) ProtoMessage() {}

func (x *CreateDSACommissionTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDSACommissionTierRequest.ProtoReflect.Descriptor instead.
func (*CreateDSACommissionTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDSACommissionTierRequest) GetTierNo() string {
	if x != nil {
		return x.TierNo
	}
	return ""
}

func (x *CreateDSACommissionTierRequest) GetMinimum() string {
	if x != nil {
		return x.Minimum
	}
	return ""
}

func (x *CreateDSACommissionTierRequest) GetMaximum() string {
	if x != nil {
		return x.Maximum
	}
	return ""
}

func (x *CreateDSACommissionTierRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

// UpdateDSACommissionTierRequest ...
type UpdateDSACommissionTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierID    uint32 `protobuf:"varint,1,opt,name=TierID,json=id,proto3" json:"id,omitempty"`
	TierNo    string `protobuf:"bytes,2,opt,name=TierNo,json=tier_no,proto3" json:"tier_no,omitempty"`
	Minimum   string `protobuf:"bytes,3,opt,name=Minimum,json=minimum,proto3" json:"minimum,omitempty"`
	Maximum   string `protobuf:"bytes,4,opt,name=Maximum,json=maximum,proto3" json:"maximum,omitempty"`
	UpdatedBy string `protobuf:"bytes,5,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
}

func (x *UpdateDSACommissionTierRequest) Reset() {
	*x = UpdateDSACommissionTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDSACommissionTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDSACommissionTierRequest) ProtoMessage() {}

func (x *UpdateDSACommissionTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDSACommissionTierRequest.ProtoReflect.Descriptor instead.
func (*UpdateDSACommissionTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDSACommissionTierRequest) GetTierID() uint32 {
	if x != nil {
		return x.TierID
	}
	return 0
}

func (x *UpdateDSACommissionTierRequest) GetTierNo() string {
	if x != nil {
		return x.TierNo
	}
	return ""
}

func (x *UpdateDSACommissionTierRequest) GetMinimum() string {
	if x != nil {
		return x.Minimum
	}
	return ""
}

func (x *UpdateDSACommissionTierRequest) GetMaximum() string {
	if x != nil {
		return x.Maximum
	}
	return ""
}

func (x *UpdateDSACommissionTierRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

// ListDSACommissionTierResponse response for ListDSACommissionTier
type ListDSACommissionTierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommissionTierList []*DSACommissionTier `protobuf:"bytes,1,rep,name=CommissionTierList,json=list,proto3" json:"list,omitempty"`
}

func (x *ListDSACommissionTierResponse) Reset() {
	*x = ListDSACommissionTierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDSACommissionTierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDSACommissionTierResponse) ProtoMessage() {}

func (x *ListDSACommissionTierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDSACommissionTierResponse.ProtoReflect.Descriptor instead.
func (*ListDSACommissionTierResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{9}
}

func (x *ListDSACommissionTierResponse) GetCommissionTierList() []*DSACommissionTier {
	if x != nil {
		return x.CommissionTierList
	}
	return nil
}

// GetDSACommissionTierByIDRequest ...
type GetDSACommissionTierByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierID uint32 `protobuf:"varint,1,opt,name=TierID,json=id,proto3" json:"id,omitempty"`
}

func (x *GetDSACommissionTierByIDRequest) Reset() {
	*x = GetDSACommissionTierByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDSACommissionTierByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDSACommissionTierByIDRequest) ProtoMessage() {}

func (x *GetDSACommissionTierByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDSACommissionTierByIDRequest.ProtoReflect.Descriptor instead.
func (*GetDSACommissionTierByIDRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{10}
}

func (x *GetDSACommissionTierByIDRequest) GetTierID() uint32 {
	if x != nil {
		return x.TierID
	}
	return 0
}

// DeleteDSACommissionTierRequest ...
type DeleteDSACommissionTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierID uint32 `protobuf:"varint,1,opt,name=TierID,json=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDSACommissionTierRequest) Reset() {
	*x = DeleteDSACommissionTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDSACommissionTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDSACommissionTierRequest) ProtoMessage() {}

func (x *DeleteDSACommissionTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDSACommissionTierRequest.ProtoReflect.Descriptor instead.
func (*DeleteDSACommissionTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDSACommissionTierRequest) GetTierID() uint32 {
	if x != nil {
		return x.TierID
	}
	return 0
}

// DSACommission ...
type DSACommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommID             uint32                 `protobuf:"varint,1,opt,name=CommID,json=id,proto3" json:"id,omitempty"`
	DsaCode            string                 `protobuf:"bytes,2,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	CommissionType     CommissionType         `protobuf:"varint,3,opt,name=CommissionType,json=commission_type,proto3,enum=revenue_commission.CommissionType" json:"commission_type,omitempty"`
	TierID             uint32                 `protobuf:"varint,4,opt,name=TierID,json=tier,proto3" json:"tier,omitempty"`
	CommissionAmount   string                 `protobuf:"bytes,5,opt,name=CommissionAmount,json=commissiont_amount,proto3" json:"commissiont_amount,omitempty"`
	CommissionCurrency string                 `protobuf:"bytes,6,opt,name=CommissionCurrency,json=commission_currency,proto3" json:"commission_currency,omitempty"`
	UpdatedBy          string                 `protobuf:"bytes,7,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=UpdatedAt,json=updated_at,proto3" json:"updated_at,omitempty"`
	EffectiveDate      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=EffectiveDate,json=effective_date,proto3" json:"effective_date,omitempty"`
	TrxType            string                 `protobuf:"bytes,11,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	RemitType          string                 `protobuf:"bytes,12,opt,name=RemitType,json=remit_type,proto3" json:"remit_type,omitempty"`
}

func (x *DSACommission) Reset() {
	*x = DSACommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSACommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSACommission) ProtoMessage() {}

func (x *DSACommission) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSACommission.ProtoReflect.Descriptor instead.
func (*DSACommission) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{12}
}

func (x *DSACommission) GetCommID() uint32 {
	if x != nil {
		return x.CommID
	}
	return 0
}

func (x *DSACommission) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *DSACommission) GetCommissionType() CommissionType {
	if x != nil {
		return x.CommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

func (x *DSACommission) GetTierID() uint32 {
	if x != nil {
		return x.TierID
	}
	return 0
}

func (x *DSACommission) GetCommissionAmount() string {
	if x != nil {
		return x.CommissionAmount
	}
	return ""
}

func (x *DSACommission) GetCommissionCurrency() string {
	if x != nil {
		return x.CommissionCurrency
	}
	return ""
}

func (x *DSACommission) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *DSACommission) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DSACommission) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DSACommission) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *DSACommission) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *DSACommission) GetRemitType() string {
	if x != nil {
		return x.RemitType
	}
	return ""
}

// CreateDSACommissionRequest ...
type CreateDSACommissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DsaCode            string                 `protobuf:"bytes,1,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	CommissionType     CommissionType         `protobuf:"varint,2,opt,name=CommissionType,json=commission_type,proto3,enum=revenue_commission.CommissionType" json:"commission_type,omitempty"`
	TierID             uint32                 `protobuf:"varint,3,opt,name=TierID,json=tier,proto3" json:"tier,omitempty"`
	CommissionAmount   string                 `protobuf:"bytes,4,opt,name=CommissionAmount,json=commissiont_amount,proto3" json:"commissiont_amount,omitempty"`
	CommissionCurrency string                 `protobuf:"bytes,5,opt,name=CommissionCurrency,json=commission_currency,proto3" json:"commission_currency,omitempty"`
	UpdatedBy          string                 `protobuf:"bytes,6,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	EffectiveDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=EffectiveDate,json=effective_date,proto3" json:"effective_date,omitempty"`
	TrxType            string                 `protobuf:"bytes,8,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	RemitType          string                 `protobuf:"bytes,9,opt,name=RemitType,json=remit_type,proto3" json:"remit_type,omitempty"`
}

func (x *CreateDSACommissionRequest) Reset() {
	*x = CreateDSACommissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDSACommissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDSACommissionRequest) ProtoMessage() {}

func (x *CreateDSACommissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDSACommissionRequest.ProtoReflect.Descriptor instead.
func (*CreateDSACommissionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{13}
}

func (x *CreateDSACommissionRequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *CreateDSACommissionRequest) GetCommissionType() CommissionType {
	if x != nil {
		return x.CommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

func (x *CreateDSACommissionRequest) GetTierID() uint32 {
	if x != nil {
		return x.TierID
	}
	return 0
}

func (x *CreateDSACommissionRequest) GetCommissionAmount() string {
	if x != nil {
		return x.CommissionAmount
	}
	return ""
}

func (x *CreateDSACommissionRequest) GetCommissionCurrency() string {
	if x != nil {
		return x.CommissionCurrency
	}
	return ""
}

func (x *CreateDSACommissionRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateDSACommissionRequest) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *CreateDSACommissionRequest) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CreateDSACommissionRequest) GetRemitType() string {
	if x != nil {
		return x.RemitType
	}
	return ""
}

// UpdateDSACommissionRequest ...
type UpdateDSACommissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommID             uint32                 `protobuf:"varint,1,opt,name=CommID,json=id,proto3" json:"id,omitempty"`
	DsaCode            string                 `protobuf:"bytes,2,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	CommissionType     CommissionType         `protobuf:"varint,3,opt,name=CommissionType,json=commission_type,proto3,enum=revenue_commission.CommissionType" json:"commission_type,omitempty"`
	TierID             uint32                 `protobuf:"varint,4,opt,name=TierID,json=tier,proto3" json:"tier,omitempty"`
	CommissionAmount   string                 `protobuf:"bytes,5,opt,name=CommissionAmount,json=commission_amount,proto3" json:"commission_amount,omitempty"`
	CommissionCurrency string                 `protobuf:"bytes,6,opt,name=CommissionCurrency,json=commission_currency,proto3" json:"commission_currency,omitempty"`
	UpdatedBy          string                 `protobuf:"bytes,7,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	EffectiveDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EffectiveDate,json=effective_date,proto3" json:"effective_date,omitempty"`
	TrxType            string                 `protobuf:"bytes,9,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	RemitType          string                 `protobuf:"bytes,10,opt,name=RemitType,json=remit_type,proto3" json:"remit_type,omitempty"`
}

func (x *UpdateDSACommissionRequest) Reset() {
	*x = UpdateDSACommissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDSACommissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDSACommissionRequest) ProtoMessage() {}

func (x *UpdateDSACommissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDSACommissionRequest.ProtoReflect.Descriptor instead.
func (*UpdateDSACommissionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateDSACommissionRequest) GetCommID() uint32 {
	if x != nil {
		return x.CommID
	}
	return 0
}

func (x *UpdateDSACommissionRequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *UpdateDSACommissionRequest) GetCommissionType() CommissionType {
	if x != nil {
		return x.CommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

func (x *UpdateDSACommissionRequest) GetTierID() uint32 {
	if x != nil {
		return x.TierID
	}
	return 0
}

func (x *UpdateDSACommissionRequest) GetCommissionAmount() string {
	if x != nil {
		return x.CommissionAmount
	}
	return ""
}

func (x *UpdateDSACommissionRequest) GetCommissionCurrency() string {
	if x != nil {
		return x.CommissionCurrency
	}
	return ""
}

func (x *UpdateDSACommissionRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateDSACommissionRequest) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *UpdateDSACommissionRequest) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *UpdateDSACommissionRequest) GetRemitType() string {
	if x != nil {
		return x.RemitType
	}
	return ""
}

// GetDSACommissionByIDRequest gets DSA commission by commission ID
type GetDSACommissionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommID uint32 `protobuf:"varint,1,opt,name=CommID,json=id,proto3" json:"id,omitempty"`
}

func (x *GetDSACommissionByIDRequest) Reset() {
	*x = GetDSACommissionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDSACommissionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDSACommissionByIDRequest) ProtoMessage() {}

func (x *GetDSACommissionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDSACommissionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetDSACommissionByIDRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{15}
}

func (x *GetDSACommissionByIDRequest) GetCommID() uint32 {
	if x != nil {
		return x.CommID
	}
	return 0
}

// DeleteDSACommissionRequest deletes DSA commission by commission ID
type DeleteDSACommissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommID uint32 `protobuf:"varint,1,opt,name=CommID,json=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDSACommissionRequest) Reset() {
	*x = DeleteDSACommissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDSACommissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDSACommissionRequest) ProtoMessage() {}

func (x *DeleteDSACommissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDSACommissionRequest.ProtoReflect.Descriptor instead.
func (*DeleteDSACommissionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteDSACommissionRequest) GetCommID() uint32 {
	if x != nil {
		return x.CommID
	}
	return 0
}

// ListDSACommissionResponse response for ListDSACommission
type ListDSACommissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommissionList []*DSACommission `protobuf:"bytes,1,rep,name=CommissionList,json=list,proto3" json:"list,omitempty"`
}

func (x *ListDSACommissionResponse) Reset() {
	*x = ListDSACommissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDSACommissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDSACommissionResponse) ProtoMessage() {}

func (x *ListDSACommissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDSACommissionResponse.ProtoReflect.Descriptor instead.
func (*ListDSACommissionResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{17}
}

func (x *ListDSACommissionResponse) GetCommissionList() []*DSACommission {
	if x != nil {
		return x.CommissionList
	}
	return nil
}

// DSATransactionCount ...
type DSATransactionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	DsaCode           string                 `protobuf:"bytes,2,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string                 `protobuf:"bytes,3,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
	RemittanceCount   uint32                 `protobuf:"varint,4,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CiCoCount         uint32                 `protobuf:"varint,5,opt,name=CiCoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount uint32                 `protobuf:"varint,6,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    uint32                 `protobuf:"varint,7,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	UpdatedBy         string                 `protobuf:"bytes,8,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	DsaCommission     string                 `protobuf:"bytes,9,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	DsaCommissionType CommissionType         `protobuf:"varint,10,opt,name=DsaCommissionType,json=dsa_commission_type,proto3,enum=revenue_commission.CommissionType" json:"dsa_commission_type,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=UpdatedAt,json=updated_at,proto3" json:"updated_at,omitempty"`
}

func (x *DSATransactionCount) Reset() {
	*x = DSATransactionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSATransactionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSATransactionCount) ProtoMessage() {}

func (x *DSATransactionCount) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSATransactionCount.ProtoReflect.Descriptor instead.
func (*DSATransactionCount) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{18}
}

func (x *DSATransactionCount) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DSATransactionCount) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *DSATransactionCount) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *DSATransactionCount) GetRemittanceCount() uint32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *DSATransactionCount) GetCiCoCount() uint32 {
	if x != nil {
		return x.CiCoCount
	}
	return 0
}

func (x *DSATransactionCount) GetBillsPaymentCount() uint32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *DSATransactionCount) GetInsuranceCount() uint32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *DSATransactionCount) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *DSATransactionCount) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *DSATransactionCount) GetDsaCommissionType() CommissionType {
	if x != nil {
		return x.DsaCommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

func (x *DSATransactionCount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DSATransactionCount) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// CreateDSATransactionCountRequest ...
type CreateDSATransactionCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DsaCode           string         `protobuf:"bytes,1,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string         `protobuf:"bytes,2,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
	RemittanceCount   uint32         `protobuf:"varint,3,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CiCoCount         uint32         `protobuf:"varint,4,opt,name=CiCoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount uint32         `protobuf:"varint,5,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    uint32         `protobuf:"varint,6,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	UpdatedBy         string         `protobuf:"bytes,7,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	DsaCommission     string         `protobuf:"bytes,8,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	DsaCommissionType CommissionType `protobuf:"varint,9,opt,name=DsaCommissionType,json=dsa_commission_type,proto3,enum=revenue_commission.CommissionType" json:"dsa_commission_type,omitempty"`
}

func (x *CreateDSATransactionCountRequest) Reset() {
	*x = CreateDSATransactionCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDSATransactionCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDSATransactionCountRequest) ProtoMessage() {}

func (x *CreateDSATransactionCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDSATransactionCountRequest.ProtoReflect.Descriptor instead.
func (*CreateDSATransactionCountRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{19}
}

func (x *CreateDSATransactionCountRequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *CreateDSATransactionCountRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *CreateDSATransactionCountRequest) GetRemittanceCount() uint32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *CreateDSATransactionCountRequest) GetCiCoCount() uint32 {
	if x != nil {
		return x.CiCoCount
	}
	return 0
}

func (x *CreateDSATransactionCountRequest) GetBillsPaymentCount() uint32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *CreateDSATransactionCountRequest) GetInsuranceCount() uint32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *CreateDSATransactionCountRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateDSATransactionCountRequest) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *CreateDSATransactionCountRequest) GetDsaCommissionType() CommissionType {
	if x != nil {
		return x.DsaCommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

// UpdateDSATransactionCountRequest updates transaction count record by transaction count ID
type UpdateDSATransactionCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32         `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	DsaCode           string         `protobuf:"bytes,2,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	YearMonth         string         `protobuf:"bytes,3,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
	RemittanceCount   uint32         `protobuf:"varint,4,opt,name=RemittanceCount,json=remittance_count,proto3" json:"remittance_count,omitempty"`
	CiCoCount         uint32         `protobuf:"varint,5,opt,name=CiCoCount,json=cico_count,proto3" json:"cico_count,omitempty"`
	BillsPaymentCount uint32         `protobuf:"varint,6,opt,name=BillsPaymentCount,json=bills_payment_count,proto3" json:"bills_payment_count,omitempty"`
	InsuranceCount    uint32         `protobuf:"varint,7,opt,name=InsuranceCount,json=insurance_count,proto3" json:"insurance_count,omitempty"`
	UpdatedBy         string         `protobuf:"bytes,8,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	DsaCommission     string         `protobuf:"bytes,9,opt,name=DsaCommission,json=dsa_commission,proto3" json:"dsa_commission,omitempty"`
	DsaCommissionType CommissionType `protobuf:"varint,10,opt,name=DsaCommissionType,json=dsa_commission_type,proto3,enum=revenue_commission.CommissionType" json:"dsa_commission_type,omitempty"`
}

func (x *UpdateDSATransactionCountRequest) Reset() {
	*x = UpdateDSATransactionCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDSATransactionCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDSATransactionCountRequest) ProtoMessage() {}

func (x *UpdateDSATransactionCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDSATransactionCountRequest.ProtoReflect.Descriptor instead.
func (*UpdateDSATransactionCountRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateDSATransactionCountRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateDSATransactionCountRequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *UpdateDSATransactionCountRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *UpdateDSATransactionCountRequest) GetRemittanceCount() uint32 {
	if x != nil {
		return x.RemittanceCount
	}
	return 0
}

func (x *UpdateDSATransactionCountRequest) GetCiCoCount() uint32 {
	if x != nil {
		return x.CiCoCount
	}
	return 0
}

func (x *UpdateDSATransactionCountRequest) GetBillsPaymentCount() uint32 {
	if x != nil {
		return x.BillsPaymentCount
	}
	return 0
}

func (x *UpdateDSATransactionCountRequest) GetInsuranceCount() uint32 {
	if x != nil {
		return x.InsuranceCount
	}
	return 0
}

func (x *UpdateDSATransactionCountRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateDSATransactionCountRequest) GetDsaCommission() string {
	if x != nil {
		return x.DsaCommission
	}
	return ""
}

func (x *UpdateDSATransactionCountRequest) GetDsaCommissionType() CommissionType {
	if x != nil {
		return x.DsaCommissionType
	}
	return CommissionType_CommissionTypeAbsolute
}

// GetDSATransactionCountByIDRequest gets transaction count by transaction count ID
type GetDSATransactionCountByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *GetDSATransactionCountByIDRequest) Reset() {
	*x = GetDSATransactionCountByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDSATransactionCountByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDSATransactionCountByIDRequest) ProtoMessage() {}

func (x *GetDSATransactionCountByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDSATransactionCountByIDRequest.ProtoReflect.Descriptor instead.
func (*GetDSATransactionCountByIDRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{21}
}

func (x *GetDSATransactionCountByIDRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

// DeleteDSATransactionCountRequest deletes transaction count record by ID
type DeleteDSATransactionCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDSATransactionCountRequest) Reset() {
	*x = DeleteDSATransactionCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDSATransactionCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDSATransactionCountRequest) ProtoMessage() {}

func (x *DeleteDSATransactionCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDSATransactionCountRequest.ProtoReflect.Descriptor instead.
func (*DeleteDSATransactionCountRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteDSATransactionCountRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

// ListDSATransactionCountByYearMonthRequest gets transaction count by year and month.
type ListDSATransactionCountByYearMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YearMonth is year and month string in format YYYYMM. Ex 202207
	YearMonth string `protobuf:"bytes,1,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *ListDSATransactionCountByYearMonthRequest) Reset() {
	*x = ListDSATransactionCountByYearMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDSATransactionCountByYearMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDSATransactionCountByYearMonthRequest) ProtoMessage() {}

func (x *ListDSATransactionCountByYearMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDSATransactionCountByYearMonthRequest.ProtoReflect.Descriptor instead.
func (*ListDSATransactionCountByYearMonthRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{23}
}

func (x *ListDSATransactionCountByYearMonthRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

// ListDSATransactionCountResponse response for list of transaction counts
type ListDSATransactionCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxCountList []*DSATransactionCount `protobuf:"bytes,1,rep,name=TrxCountList,json=list,proto3" json:"list,omitempty"`
}

func (x *ListDSATransactionCountResponse) Reset() {
	*x = ListDSATransactionCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDSATransactionCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDSATransactionCountResponse) ProtoMessage() {}

func (x *ListDSATransactionCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDSATransactionCountResponse.ProtoReflect.Descriptor instead.
func (*ListDSATransactionCountResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{24}
}

func (x *ListDSATransactionCountResponse) GetTrxCountList() []*DSATransactionCount {
	if x != nil {
		return x.TrxCountList
	}
	return nil
}

type SendTransactionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YearMonth string `protobuf:"bytes,1,opt,name=YearMonth,json=year_month,proto3" json:"year_month,omitempty"`
}

func (x *SendTransactionReportRequest) Reset() {
	*x = SendTransactionReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionReportRequest) ProtoMessage() {}

func (x *SendTransactionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionReportRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionReportRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP(), []int{25}
}

func (x *SendTransactionReportRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

var File_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDesc = []byte{
	0x0a, 0x38, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x05, 0x0a, 0x12, 0x52,
	0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x12, 0x1d, 0x0a, 0x05, 0x46, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x54, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6f, 0x74, 0x63, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x07,
	0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x8a, 0x05, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x63,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09,
	0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x12,
	0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x54, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x74,
	0x63, 0x12, 0x42, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x3a, 0x7c, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x73, 0x0a, 0x71, 0xd2, 0x01, 0x08,
	0x72, 0x65, 0x6d, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0xd2, 0x01, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0xd2, 0x01, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0xd2, 0x01, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0xd2, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0xaf,
	0x05, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x46, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x54, 0x43, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x74, 0x63, 0x12, 0x42, 0x0a,
	0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x3a, 0x81, 0x01, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x78, 0x0a, 0x76, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2,
	0x01, 0x08, 0x72, 0x65, 0x6d, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0xd2, 0x01, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x22, 0x82, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x53, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x63,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x46, 0x65, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x05, 0x46, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x10, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0xe5,
	0x02, 0x0a, 0x11, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12,
	0x24, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x12, 0x45, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf4, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x69, 0x65,
	0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x12, 0x24,
	0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x3a, 0x36, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x2d,
	0x0a, 0x2b, 0xd2, 0x01, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0xd2, 0x01, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0xd2, 0x01, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0xd2, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x99, 0x02,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x74, 0x69,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x07, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x3a, 0x3b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x32, 0x0a, 0x30, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01,
	0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0xd2, 0x01, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0xd2, 0x01, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0xd2, 0x01, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x7c, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x53, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x53,
	0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x54, 0x69,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x10,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64,
	0x22, 0xaa, 0x05, 0x0a, 0x0d, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x74, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe8, 0x04,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07,
	0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06,
	0x54, 0x69, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x12, 0x4d, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x65, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0xd2, 0x01,
	0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x74, 0x69, 0x65, 0x72,
	0xd2, 0x01, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0xd2, 0x01, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x05, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x57,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x6a, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x08,
	0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x74, 0x69, 0x65, 0x72, 0xd2,
	0x01, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0xd2, 0x01, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0xd2, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x53,
	0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xaa, 0x05, 0x0a, 0x13, 0x44,
	0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x69, 0x43, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x31,
	0x0a, 0x0d, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x11, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x73,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa9, 0x05, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07,
	0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x35,
	0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x69, 0x43, 0x6f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x31, 0x0a, 0x0d,
	0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x11, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x73, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0xa1, 0x01, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x97, 0x01, 0x0a, 0x94, 0x01, 0xd2,
	0x01, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0a, 0x79, 0x65, 0x61,
	0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0xd2, 0x01, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x63, 0x69, 0x63,
	0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0f,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2,
	0x01, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0e, 0x64,
	0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x13,
	0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xca, 0x05, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x53,
	0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x59,
	0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x43, 0x69, 0x43, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x69,
	0x63, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x42, 0x69, 0x6c, 0x6c,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x11, 0x44, 0x73, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x13, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0xa6, 0x01, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x92, 0x41, 0x9c, 0x01, 0x0a, 0x99, 0x01, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x08, 0x64,
	0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0xd2, 0x01, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x63, 0x69, 0x63, 0x6f, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0f, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0e, 0x64, 0x73, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x13, 0x64, 0x73, 0x61,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x51, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05,
	0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x3a, 0x18, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x0f, 0x0a, 0x0d, 0xd2, 0x01, 0x0a, 0x79, 0x65, 0x61,
	0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x7a, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x54, 0x72,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x51, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x70, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x3e, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x54,
	0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0x85, 0x66, 0x0a, 0x18, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xdc, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x33, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d,
	0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22,
	0xde, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x03, 0x0a, 0x12, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x4a, 0x5e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12,
	0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34,
	0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a,
	0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30,
	0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30,
	0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x65, 0x65,
	0x28, 0x00, 0x30, 0x00, 0x12, 0xe4, 0x04, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x12, 0x33, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x63,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0xe6,
	0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x1a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x5e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e,
	0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32,
	0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a,
	0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30,
	0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x65, 0x65, 0x2f,
	0x7b, 0x46, 0x65, 0x65, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xdf, 0x04, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0xdf, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xa0, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x47, 0x65, 0x74, 0x73, 0x20, 0x52,
	0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x46, 0x65, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x27, 0x47, 0x65, 0x74, 0x73,
	0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x35,
	0x0a, 0x33, 0x1a, 0x31, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x65,
	0x65, 0x2f, 0x7b, 0x46, 0x65, 0x65, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xcc, 0x04,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xac,
	0x03, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x6d, 0x63,
	0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x65,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x4a, 0x6a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x63, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x41, 0x0a, 0x3f, 0x1a,
	0x3d, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x6c,
	0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c,
	0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c,
	0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a,
	0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20,
	0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x65, 0x65, 0x30, 0x00, 0x12, 0xe3, 0x04, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x33, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0xe5, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xa6, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x2a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5e, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x57, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x2e, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32,
	0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20,
	0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12,
	0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a,
	0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2d, 0x66, 0x65, 0x65, 0x2f, 0x7b, 0x46, 0x65, 0x65, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xd3, 0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x32,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x22, 0xd8, 0x03, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0xa2, 0x03, 0x0a, 0x13, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x12, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x53, 0x41,
	0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5d, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x56, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x2e, 0x12, 0x34, 0x0a, 0x32, 0x1a, 0x30, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32,
	0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58,
	0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x2d,
	0x74, 0x69, 0x65, 0x72, 0x28, 0x00, 0x30, 0x00, 0x12, 0xde, 0x04, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53,
	0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x22,
	0xe3, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x03, 0x0a, 0x13, 0x44, 0x53,
	0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x44,
	0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69,
	0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x4a, 0x5d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x56, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x34, 0x0a, 0x32, 0x1a,
	0x30, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65,
	0x72, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12,
	0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34,
	0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a,
	0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30,
	0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30,
	0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x1a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64,
	0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x2f, 0x7b, 0x54, 0x69,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xda, 0x04, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x65, 0x72, 0x22, 0xdd, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x9e, 0x03, 0x0a,
	0x13, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x47, 0x65, 0x74, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x26, 0x47, 0x65, 0x74, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a,
	0x5d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x56, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x34, 0x0a, 0x32, 0x1a, 0x30, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x4a, 0x6c,
	0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c,
	0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c,
	0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a,
	0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20,
	0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x2f, 0x7b, 0x54, 0x69, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc6, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x03, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa9, 0x03, 0x0a, 0x13, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x12, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a,
	0x24, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x69, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x62,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x40, 0x0a, 0x3e, 0x1a, 0x3c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d,
	0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12,
	0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35,
	0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x64, 0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x30, 0x00, 0x12,
	0xde, 0x04, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x22, 0xe3, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xa4, 0x03, 0x0a, 0x13, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x12, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x29, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5d, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x56, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x12, 0x34, 0x0a, 0x32, 0x1a, 0x30, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12,
	0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a,
	0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x2d, 0x74,
	0x69, 0x65, 0x72, 0x2f, 0x7b, 0x54, 0x69, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xb5, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53,
	0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x03, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8f, 0x03, 0x0a, 0x0e, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x59, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12,
	0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a,
	0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc0, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x91, 0x03,
	0x0a, 0x0e, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d,
	0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12,
	0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35,
	0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x64, 0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b,
	0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xbc, 0x04, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x53, 0x41,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0x8b, 0x03, 0x0a, 0x0e, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x47, 0x65, 0x74, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x1a, 0x21, 0x47, 0x65, 0x74, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12,
	0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34,
	0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a,
	0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30,
	0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30,
	0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64,
	0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x43,
	0x6f, 0x6d, 0x6d, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa9, 0x04, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0x93, 0x03, 0x0a, 0x0e, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x1a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x4a, 0x65, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5e, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x3c, 0x0a, 0x3a, 0x1a, 0x38,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12,
	0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a,
	0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x30, 0x00, 0x12, 0xc0, 0x04, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xd1, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x91, 0x03, 0x0a, 0x0e,
	0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x24, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x30,
	0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e,
	0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32,
	0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a,
	0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30,
	0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73,
	0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x43, 0x6f,
	0x6d, 0x6d, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xe1, 0x04, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe0, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xaa, 0x03, 0x0a, 0x15, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x1a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x53,
	0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5f, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x6c,
	0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c,
	0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c,
	0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a,
	0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20,
	0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d,
	0x74, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xe2, 0x04,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0xa6, 0x03, 0x0a, 0x15, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x1a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53,
	0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5f, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x6c,
	0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c,
	0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c,
	0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a,
	0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20,
	0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x1a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d,
	0x74, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xf6, 0x04, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x35, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53,
	0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf3, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb8, 0x03, 0x0a, 0x15,
	0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x47, 0x65, 0x74, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3a, 0x47, 0x65, 0x74, 0x73, 0x20, 0x44,
	0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65,
	0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x74, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xfa, 0x04, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0xbe, 0x03, 0x0a, 0x15, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x3d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x49, 0x44,
	0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36, 0x0a, 0x34,
	0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a,
	0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x74, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x7b, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xd9, 0x04, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x33, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xeb, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb5,
	0x03, 0x0a, 0x15, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x27, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x6b, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x64, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x2e, 0x12, 0x42, 0x0a, 0x40, 0x1a, 0x3e, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65,
	0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x74, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x00, 0x12, 0xc1, 0x05, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3d, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa2, 0x04, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd5, 0x03, 0x0a, 0x15, 0x44, 0x53,
	0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x37, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x44, 0x53,
	0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x79, 0x65,
	0x61, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x1a, 0x35, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x20, 0x62, 0x79, 0x20, 0x79, 0x65, 0x61, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x6b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x64, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x42,
	0x0a, 0x40, 0x1a, 0x3e, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d,
	0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12,
	0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35,
	0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x64, 0x73, 0x61, 0x2d, 0x74, 0x72, 0x78, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x79, 0x65,
	0x61, 0x72, 0x2d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2f, 0x7b, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc0, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xda, 0x01, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xad, 0x01, 0x0a, 0x15, 0x44, 0x53, 0x41, 0x20, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x20,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x50, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x49, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x27, 0x0a,
	0x25, 0x1a, 0x23, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x28, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00,
	0x42, 0x5c, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x41, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73,
	0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3b, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90,
	0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 26)
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_goTypes   = []interface{}{
		(CommissionType)(0),                               // 0: revenue_commission.CommissionType
		(TrxType)(0),                                      // 1: revenue_commission.TrxType
		(*RemcoCommissionFee)(nil),                        // 2: revenue_commission.RemcoCommissionFee
		(*CreateRemcoCommissionFeeRequest)(nil),           // 3: revenue_commission.CreateRemcoCommissionFeeRequest
		(*UpdateRemcoCommissionFeeRequest)(nil),           // 4: revenue_commission.UpdateRemcoCommissionFeeRequest
		(*ListRemcoCommissionFeeResponse)(nil),            // 5: revenue_commission.ListRemcoCommissionFeeResponse
		(*GetRemcoCommissionFeeByIDRequest)(nil),          // 6: revenue_commission.GetRemcoCommissionFeeByIDRequest
		(*DeleteRemcoCommissionFeeRequest)(nil),           // 7: revenue_commission.DeleteRemcoCommissionFeeRequest
		(*DSACommissionTier)(nil),                         // 8: revenue_commission.DSACommissionTier
		(*CreateDSACommissionTierRequest)(nil),            // 9: revenue_commission.CreateDSACommissionTierRequest
		(*UpdateDSACommissionTierRequest)(nil),            // 10: revenue_commission.UpdateDSACommissionTierRequest
		(*ListDSACommissionTierResponse)(nil),             // 11: revenue_commission.ListDSACommissionTierResponse
		(*GetDSACommissionTierByIDRequest)(nil),           // 12: revenue_commission.GetDSACommissionTierByIDRequest
		(*DeleteDSACommissionTierRequest)(nil),            // 13: revenue_commission.DeleteDSACommissionTierRequest
		(*DSACommission)(nil),                             // 14: revenue_commission.DSACommission
		(*CreateDSACommissionRequest)(nil),                // 15: revenue_commission.CreateDSACommissionRequest
		(*UpdateDSACommissionRequest)(nil),                // 16: revenue_commission.UpdateDSACommissionRequest
		(*GetDSACommissionByIDRequest)(nil),               // 17: revenue_commission.GetDSACommissionByIDRequest
		(*DeleteDSACommissionRequest)(nil),                // 18: revenue_commission.DeleteDSACommissionRequest
		(*ListDSACommissionResponse)(nil),                 // 19: revenue_commission.ListDSACommissionResponse
		(*DSATransactionCount)(nil),                       // 20: revenue_commission.DSATransactionCount
		(*CreateDSATransactionCountRequest)(nil),          // 21: revenue_commission.CreateDSATransactionCountRequest
		(*UpdateDSATransactionCountRequest)(nil),          // 22: revenue_commission.UpdateDSATransactionCountRequest
		(*GetDSATransactionCountByIDRequest)(nil),         // 23: revenue_commission.GetDSATransactionCountByIDRequest
		(*DeleteDSATransactionCountRequest)(nil),          // 24: revenue_commission.DeleteDSATransactionCountRequest
		(*ListDSATransactionCountByYearMonthRequest)(nil), // 25: revenue_commission.ListDSATransactionCountByYearMonthRequest
		(*ListDSATransactionCountResponse)(nil),           // 26: revenue_commission.ListDSATransactionCountResponse
		(*SendTransactionReportRequest)(nil),              // 27: revenue_commission.SendTransactionReportRequest
		(*timestamppb.Timestamp)(nil),                     // 28: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),                             // 29: google.protobuf.Empty
	}
)

var file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_depIdxs = []int32{
	0,  // 0: revenue_commission.RemcoCommissionFee.CommissionType:type_name -> revenue_commission.CommissionType
	1,  // 1: revenue_commission.RemcoCommissionFee.TrxType:type_name -> revenue_commission.TrxType
	28, // 2: revenue_commission.RemcoCommissionFee.CreatedAt:type_name -> google.protobuf.Timestamp
	28, // 3: revenue_commission.RemcoCommissionFee.UpdatedAt:type_name -> google.protobuf.Timestamp
	0,  // 4: revenue_commission.CreateRemcoCommissionFeeRequest.CommissionType:type_name -> revenue_commission.CommissionType
	1,  // 5: revenue_commission.CreateRemcoCommissionFeeRequest.TrxType:type_name -> revenue_commission.TrxType
	0,  // 6: revenue_commission.UpdateRemcoCommissionFeeRequest.CommissionType:type_name -> revenue_commission.CommissionType
	1,  // 7: revenue_commission.UpdateRemcoCommissionFeeRequest.TrxType:type_name -> revenue_commission.TrxType
	2,  // 8: revenue_commission.ListRemcoCommissionFeeResponse.RemcoCommissionFeeList:type_name -> revenue_commission.RemcoCommissionFee
	28, // 9: revenue_commission.DSACommissionTier.CreatedAt:type_name -> google.protobuf.Timestamp
	28, // 10: revenue_commission.DSACommissionTier.UpdatedAt:type_name -> google.protobuf.Timestamp
	8,  // 11: revenue_commission.ListDSACommissionTierResponse.CommissionTierList:type_name -> revenue_commission.DSACommissionTier
	0,  // 12: revenue_commission.DSACommission.CommissionType:type_name -> revenue_commission.CommissionType
	28, // 13: revenue_commission.DSACommission.CreatedAt:type_name -> google.protobuf.Timestamp
	28, // 14: revenue_commission.DSACommission.UpdatedAt:type_name -> google.protobuf.Timestamp
	28, // 15: revenue_commission.DSACommission.EffectiveDate:type_name -> google.protobuf.Timestamp
	0,  // 16: revenue_commission.CreateDSACommissionRequest.CommissionType:type_name -> revenue_commission.CommissionType
	28, // 17: revenue_commission.CreateDSACommissionRequest.EffectiveDate:type_name -> google.protobuf.Timestamp
	0,  // 18: revenue_commission.UpdateDSACommissionRequest.CommissionType:type_name -> revenue_commission.CommissionType
	28, // 19: revenue_commission.UpdateDSACommissionRequest.EffectiveDate:type_name -> google.protobuf.Timestamp
	14, // 20: revenue_commission.ListDSACommissionResponse.CommissionList:type_name -> revenue_commission.DSACommission
	0,  // 21: revenue_commission.DSATransactionCount.DsaCommissionType:type_name -> revenue_commission.CommissionType
	28, // 22: revenue_commission.DSATransactionCount.CreatedAt:type_name -> google.protobuf.Timestamp
	28, // 23: revenue_commission.DSATransactionCount.UpdatedAt:type_name -> google.protobuf.Timestamp
	0,  // 24: revenue_commission.CreateDSATransactionCountRequest.DsaCommissionType:type_name -> revenue_commission.CommissionType
	0,  // 25: revenue_commission.UpdateDSATransactionCountRequest.DsaCommissionType:type_name -> revenue_commission.CommissionType
	20, // 26: revenue_commission.ListDSATransactionCountResponse.TrxCountList:type_name -> revenue_commission.DSATransactionCount
	3,  // 27: revenue_commission.RevenueCommissionService.CreateRemcoCommissionFee:input_type -> revenue_commission.CreateRemcoCommissionFeeRequest
	4,  // 28: revenue_commission.RevenueCommissionService.UpdateRemcoCommissionFee:input_type -> revenue_commission.UpdateRemcoCommissionFeeRequest
	6,  // 29: revenue_commission.RevenueCommissionService.GetRemcoCommissionFeeByID:input_type -> revenue_commission.GetRemcoCommissionFeeByIDRequest
	29, // 30: revenue_commission.RevenueCommissionService.ListRemcoCommissionFee:input_type -> google.protobuf.Empty
	7,  // 31: revenue_commission.RevenueCommissionService.DeleteRemcoCommissionFee:input_type -> revenue_commission.DeleteRemcoCommissionFeeRequest
	9,  // 32: revenue_commission.RevenueCommissionService.CreateDSACommissionTier:input_type -> revenue_commission.CreateDSACommissionTierRequest
	10, // 33: revenue_commission.RevenueCommissionService.UpdateDSACommissionTier:input_type -> revenue_commission.UpdateDSACommissionTierRequest
	12, // 34: revenue_commission.RevenueCommissionService.GetDSACommissionTierByID:input_type -> revenue_commission.GetDSACommissionTierByIDRequest
	29, // 35: revenue_commission.RevenueCommissionService.ListDSACommissionTier:input_type -> google.protobuf.Empty
	13, // 36: revenue_commission.RevenueCommissionService.DeleteDSACommissionTier:input_type -> revenue_commission.DeleteDSACommissionTierRequest
	15, // 37: revenue_commission.RevenueCommissionService.CreateDSACommission:input_type -> revenue_commission.CreateDSACommissionRequest
	16, // 38: revenue_commission.RevenueCommissionService.UpdateDSACommission:input_type -> revenue_commission.UpdateDSACommissionRequest
	17, // 39: revenue_commission.RevenueCommissionService.GetDSACommissionByID:input_type -> revenue_commission.GetDSACommissionByIDRequest
	29, // 40: revenue_commission.RevenueCommissionService.ListDSACommission:input_type -> google.protobuf.Empty
	18, // 41: revenue_commission.RevenueCommissionService.DeleteDSACommission:input_type -> revenue_commission.DeleteDSACommissionRequest
	21, // 42: revenue_commission.RevenueCommissionService.CreateDSATransactionCount:input_type -> revenue_commission.CreateDSATransactionCountRequest
	22, // 43: revenue_commission.RevenueCommissionService.UpdateDSATransactionCount:input_type -> revenue_commission.UpdateDSATransactionCountRequest
	23, // 44: revenue_commission.RevenueCommissionService.GetDSATransactionCountByID:input_type -> revenue_commission.GetDSATransactionCountByIDRequest
	24, // 45: revenue_commission.RevenueCommissionService.DeleteDSATransactionCount:input_type -> revenue_commission.DeleteDSATransactionCountRequest
	29, // 46: revenue_commission.RevenueCommissionService.ListDSATransactionCountAll:input_type -> google.protobuf.Empty
	25, // 47: revenue_commission.RevenueCommissionService.ListDSATransactionCountByYearMonth:input_type -> revenue_commission.ListDSATransactionCountByYearMonthRequest
	27, // 48: revenue_commission.RevenueCommissionService.SendTransactionReport:input_type -> revenue_commission.SendTransactionReportRequest
	2,  // 49: revenue_commission.RevenueCommissionService.CreateRemcoCommissionFee:output_type -> revenue_commission.RemcoCommissionFee
	2,  // 50: revenue_commission.RevenueCommissionService.UpdateRemcoCommissionFee:output_type -> revenue_commission.RemcoCommissionFee
	2,  // 51: revenue_commission.RevenueCommissionService.GetRemcoCommissionFeeByID:output_type -> revenue_commission.RemcoCommissionFee
	5,  // 52: revenue_commission.RevenueCommissionService.ListRemcoCommissionFee:output_type -> revenue_commission.ListRemcoCommissionFeeResponse
	2,  // 53: revenue_commission.RevenueCommissionService.DeleteRemcoCommissionFee:output_type -> revenue_commission.RemcoCommissionFee
	8,  // 54: revenue_commission.RevenueCommissionService.CreateDSACommissionTier:output_type -> revenue_commission.DSACommissionTier
	8,  // 55: revenue_commission.RevenueCommissionService.UpdateDSACommissionTier:output_type -> revenue_commission.DSACommissionTier
	8,  // 56: revenue_commission.RevenueCommissionService.GetDSACommissionTierByID:output_type -> revenue_commission.DSACommissionTier
	11, // 57: revenue_commission.RevenueCommissionService.ListDSACommissionTier:output_type -> revenue_commission.ListDSACommissionTierResponse
	8,  // 58: revenue_commission.RevenueCommissionService.DeleteDSACommissionTier:output_type -> revenue_commission.DSACommissionTier
	14, // 59: revenue_commission.RevenueCommissionService.CreateDSACommission:output_type -> revenue_commission.DSACommission
	14, // 60: revenue_commission.RevenueCommissionService.UpdateDSACommission:output_type -> revenue_commission.DSACommission
	14, // 61: revenue_commission.RevenueCommissionService.GetDSACommissionByID:output_type -> revenue_commission.DSACommission
	19, // 62: revenue_commission.RevenueCommissionService.ListDSACommission:output_type -> revenue_commission.ListDSACommissionResponse
	14, // 63: revenue_commission.RevenueCommissionService.DeleteDSACommission:output_type -> revenue_commission.DSACommission
	20, // 64: revenue_commission.RevenueCommissionService.CreateDSATransactionCount:output_type -> revenue_commission.DSATransactionCount
	20, // 65: revenue_commission.RevenueCommissionService.UpdateDSATransactionCount:output_type -> revenue_commission.DSATransactionCount
	20, // 66: revenue_commission.RevenueCommissionService.GetDSATransactionCountByID:output_type -> revenue_commission.DSATransactionCount
	20, // 67: revenue_commission.RevenueCommissionService.DeleteDSATransactionCount:output_type -> revenue_commission.DSATransactionCount
	26, // 68: revenue_commission.RevenueCommissionService.ListDSATransactionCountAll:output_type -> revenue_commission.ListDSATransactionCountResponse
	26, // 69: revenue_commission.RevenueCommissionService.ListDSATransactionCountByYearMonth:output_type -> revenue_commission.ListDSATransactionCountResponse
	29, // 70: revenue_commission.RevenueCommissionService.SendTransactionReport:output_type -> google.protobuf.Empty
	49, // [49:71] is the sub-list for method output_type
	27, // [27:49] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemcoCommissionFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemcoCommissionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRemcoCommissionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemcoCommissionFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemcoCommissionFeeByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemcoCommissionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSACommissionTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDSACommissionTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDSACommissionTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDSACommissionTierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDSACommissionTierByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDSACommissionTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSACommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDSACommissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDSACommissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDSACommissionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDSACommissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDSACommissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSATransactionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDSATransactionCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDSATransactionCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDSATransactionCountByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDSATransactionCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDSATransactionCountByYearMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDSATransactionCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_revenue_commission_all_proto_depIdxs = nil
}
