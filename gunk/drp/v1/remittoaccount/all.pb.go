// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/remittoaccount/all.proto

package remittoaccount

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RTAInquireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner         string `protobuf:"bytes,1,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	ReferenceNumber string `protobuf:"bytes,2,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	LocationID      string `protobuf:"bytes,3,opt,name=LocationID,json=location_id,proto3" json:"location_id,omitempty"`
}

func (x *RTAInquireRequest) Reset() {
	*x = RTAInquireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTAInquireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTAInquireRequest) ProtoMessage() {}

func (x *RTAInquireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTAInquireRequest.ProtoReflect.Descriptor instead.
func (*RTAInquireRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{0}
}

func (x *RTAInquireRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *RTAInquireRequest) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *RTAInquireRequest) GetLocationID() string {
	if x != nil {
		return x.LocationID
	}
	return ""
}

type RTAInquireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string            `protobuf:"bytes,1,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result   *RTAInquireResult `protobuf:"bytes,2,opt,name=Result,json=result,proto3" json:"result,omitempty"`
	BankCode string            `protobuf:"bytes,3,opt,name=BankCode,json=bank_code,proto3" json:"bank_code,omitempty"`
}

func (x *RTAInquireResponse) Reset() {
	*x = RTAInquireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTAInquireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTAInquireResponse) ProtoMessage() {}

func (x *RTAInquireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTAInquireResponse.ProtoReflect.Descriptor instead.
func (*RTAInquireResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{1}
}

func (x *RTAInquireResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RTAInquireResponse) GetResult() *RTAInquireResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RTAInquireResponse) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type RTAInquireResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneAmount                     string                 `protobuf:"bytes,1,opt,name=BeneAmount,json=bene_amount,proto3" json:"bene_amount,omitempty"`
	BeneficiaryAddress             string                 `protobuf:"bytes,2,opt,name=BeneficiaryAddress,json=beneficiary_address,proto3" json:"beneficiary_address,omitempty"`
	BeneficiaryBankAccountno       string                 `protobuf:"bytes,3,opt,name=BeneficiaryBankAccountno,json=beneficiary_bankAccountno,proto3" json:"beneficiary_bankAccountno,omitempty"`
	BeneficiaryCity                string                 `protobuf:"bytes,4,opt,name=BeneficiaryCity,json=beneficiary_city,proto3" json:"beneficiary_city,omitempty"`
	BeneficiaryCountry             string                 `protobuf:"bytes,5,opt,name=BeneficiaryCountry,json=beneficiary_country,proto3" json:"beneficiary_country,omitempty"`
	BeneficiaryFirstName           string                 `protobuf:"bytes,6,opt,name=BeneficiaryFirstName,json=beneficiary_firstname,proto3" json:"beneficiary_firstname,omitempty"`
	BeneficiaryLastName            string                 `protobuf:"bytes,7,opt,name=BeneficiaryLastName,json=beneficiary_lastname,proto3" json:"beneficiary_lastname,omitempty"`
	BeneficiaryMiddleName          string                 `protobuf:"bytes,8,opt,name=BeneficiaryMiddleName,json=beneficiary_middlename,proto3" json:"beneficiary_middlename,omitempty"`
	BeneficiaryStateOrProvince     string                 `protobuf:"bytes,9,opt,name=BeneficiaryStateOrProvince,json=beneficiary_state_or_province,proto3" json:"beneficiary_state_or_province,omitempty"`
	BpiBranchCode                  string                 `protobuf:"bytes,10,opt,name=BpiBranchCode,json=bpi_branch_code,proto3" json:"bpi_branch_code,omitempty"`
	CurrencyCodeOfFundingAmount    string                 `protobuf:"bytes,11,opt,name=CurrencyCodeOfFundingAmount,json=currency_code_of_funding_amount,proto3" json:"currency_code_of_funding_amount,omitempty"`
	CurrencyCodeOfSettlementAmount string                 `protobuf:"bytes,12,opt,name=CurrencyCodeOfSettlementAmount,json=currency_code_of_settlement_amount,proto3" json:"currency_code_of_settlement_amount,omitempty"`
	TxnDistributionDate            string                 `protobuf:"bytes,13,opt,name=TxnDistributionDate,json=txn_distribution_date,proto3" json:"txn_distribution_date,omitempty"`
	FundingAmount                  string                 `protobuf:"bytes,14,opt,name=FundingAmount,json=funding_amount,proto3" json:"funding_amount,omitempty"`
	Reason                         string                 `protobuf:"bytes,15,opt,name=Reason,json=reason,proto3" json:"reason,omitempty"`
	RemitterCity                   string                 `protobuf:"bytes,16,opt,name=RemitterCity,json=remitter_city,proto3" json:"remitter_city,omitempty"`
	RemitterCountry                string                 `protobuf:"bytes,17,opt,name=RemitterCountry,json=remitter_country,proto3" json:"remitter_country,omitempty"`
	RemitterFirstName              string                 `protobuf:"bytes,18,opt,name=RemitterFirstName,json=remitter_firstname,proto3" json:"remitter_firstname,omitempty"`
	RemitterLastName               string                 `protobuf:"bytes,19,opt,name=RemitterLastName,json=remitter_lastname,proto3" json:"remitter_lastname,omitempty"`
	RemitterMiddleName             string                 `protobuf:"bytes,20,opt,name=RemitterMiddleName,json=remitter_middlename,proto3" json:"remitter_middlename,omitempty"`
	RemitterStateOrProvince        string                 `protobuf:"bytes,21,opt,name=RemitterStateOrProvince,json=remitter_state_or_province,proto3" json:"remitter_state_or_province,omitempty"`
	SettlementMode                 string                 `protobuf:"bytes,22,opt,name=SettlementMode,json=settlement_mode,proto3" json:"settlement_mode,omitempty"`
	StatusCode                     string                 `protobuf:"bytes,23,opt,name=StatusCode,json=status_code,proto3" json:"status_code,omitempty"`
	TransactionDate                string                 `protobuf:"bytes,24,opt,name=TransactionDate,json=transaction_date,proto3" json:"transaction_date,omitempty"`
	TransactionReferenceNo         string                 `protobuf:"bytes,25,opt,name=TransactionReferenceNo,json=transaction_reference_no,proto3" json:"transaction_reference_no,omitempty"`
	Code                           string                 `protobuf:"bytes,26,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	SenderRefID                    string                 `protobuf:"bytes,27,opt,name=SenderRefID,json=sender_ref_id,proto3" json:"sender_ref_id,omitempty"`
	State                          string                 `protobuf:"bytes,28,opt,name=State,json=state,proto3" json:"state,omitempty"`
	UUID                           string                 `protobuf:"bytes,29,opt,name=UUID,json=uuid,proto3" json:"uuid,omitempty"`
	Description                    string                 `protobuf:"bytes,30,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	Type                           string                 `protobuf:"bytes,31,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Amount                         string                 `protobuf:"bytes,32,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	UbpTranID                      string                 `protobuf:"bytes,33,opt,name=UbpTranID,json=ubp_tran_id,proto3" json:"ubp_tran_id,omitempty"`
	TranRequestDate                string                 `protobuf:"bytes,34,opt,name=TranRequestDate,json=tranRequest_date,proto3" json:"tranRequest_date,omitempty"`
	TranFinacleDate                string                 `protobuf:"bytes,35,opt,name=TranFinacleDate,json=tranFinacle_date,proto3" json:"tranFinacle_date,omitempty"`
	CreatedAt                      *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=CreatedAt,json=created,proto3" json:"created,omitempty"`
	UpdatedAt                      *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=UpdatedAt,json=updated,proto3" json:"updated,omitempty"`
}

func (x *RTAInquireResult) Reset() {
	*x = RTAInquireResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTAInquireResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTAInquireResult) ProtoMessage() {}

func (x *RTAInquireResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTAInquireResult.ProtoReflect.Descriptor instead.
func (*RTAInquireResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{2}
}

func (x *RTAInquireResult) GetBeneAmount() string {
	if x != nil {
		return x.BeneAmount
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryAddress() string {
	if x != nil {
		return x.BeneficiaryAddress
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryBankAccountno() string {
	if x != nil {
		return x.BeneficiaryBankAccountno
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryCity() string {
	if x != nil {
		return x.BeneficiaryCity
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryCountry() string {
	if x != nil {
		return x.BeneficiaryCountry
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryFirstName() string {
	if x != nil {
		return x.BeneficiaryFirstName
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryLastName() string {
	if x != nil {
		return x.BeneficiaryLastName
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryMiddleName() string {
	if x != nil {
		return x.BeneficiaryMiddleName
	}
	return ""
}

func (x *RTAInquireResult) GetBeneficiaryStateOrProvince() string {
	if x != nil {
		return x.BeneficiaryStateOrProvince
	}
	return ""
}

func (x *RTAInquireResult) GetBpiBranchCode() string {
	if x != nil {
		return x.BpiBranchCode
	}
	return ""
}

func (x *RTAInquireResult) GetCurrencyCodeOfFundingAmount() string {
	if x != nil {
		return x.CurrencyCodeOfFundingAmount
	}
	return ""
}

func (x *RTAInquireResult) GetCurrencyCodeOfSettlementAmount() string {
	if x != nil {
		return x.CurrencyCodeOfSettlementAmount
	}
	return ""
}

func (x *RTAInquireResult) GetTxnDistributionDate() string {
	if x != nil {
		return x.TxnDistributionDate
	}
	return ""
}

func (x *RTAInquireResult) GetFundingAmount() string {
	if x != nil {
		return x.FundingAmount
	}
	return ""
}

func (x *RTAInquireResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RTAInquireResult) GetRemitterCity() string {
	if x != nil {
		return x.RemitterCity
	}
	return ""
}

func (x *RTAInquireResult) GetRemitterCountry() string {
	if x != nil {
		return x.RemitterCountry
	}
	return ""
}

func (x *RTAInquireResult) GetRemitterFirstName() string {
	if x != nil {
		return x.RemitterFirstName
	}
	return ""
}

func (x *RTAInquireResult) GetRemitterLastName() string {
	if x != nil {
		return x.RemitterLastName
	}
	return ""
}

func (x *RTAInquireResult) GetRemitterMiddleName() string {
	if x != nil {
		return x.RemitterMiddleName
	}
	return ""
}

func (x *RTAInquireResult) GetRemitterStateOrProvince() string {
	if x != nil {
		return x.RemitterStateOrProvince
	}
	return ""
}

func (x *RTAInquireResult) GetSettlementMode() string {
	if x != nil {
		return x.SettlementMode
	}
	return ""
}

func (x *RTAInquireResult) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RTAInquireResult) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *RTAInquireResult) GetTransactionReferenceNo() string {
	if x != nil {
		return x.TransactionReferenceNo
	}
	return ""
}

func (x *RTAInquireResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RTAInquireResult) GetSenderRefID() string {
	if x != nil {
		return x.SenderRefID
	}
	return ""
}

func (x *RTAInquireResult) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RTAInquireResult) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *RTAInquireResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RTAInquireResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RTAInquireResult) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RTAInquireResult) GetUbpTranID() string {
	if x != nil {
		return x.UbpTranID
	}
	return ""
}

func (x *RTAInquireResult) GetTranRequestDate() string {
	if x != nil {
		return x.TranRequestDate
	}
	return ""
}

func (x *RTAInquireResult) GetTranFinacleDate() string {
	if x != nil {
		return x.TranFinacleDate
	}
	return ""
}

func (x *RTAInquireResult) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RTAInquireResult) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type RTAPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner                     string `protobuf:"bytes,1,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	ReferenceNumber             string `protobuf:"bytes,2,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	TrxDate                     string `protobuf:"bytes,3,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	AccountNumber               string `protobuf:"bytes,4,opt,name=AccountNumber,json=account_number,proto3" json:"account_number,omitempty"`
	Currency                    string `protobuf:"bytes,5,opt,name=Currency,json=currency,proto3" json:"currency,omitempty"`
	ServiceCharge               string `protobuf:"bytes,6,opt,name=ServiceCharge,json=service_charge,proto3" json:"service_charge,omitempty"`
	Remarks                     string `protobuf:"bytes,7,opt,name=Remarks,json=remarks,proto3" json:"remarks,omitempty"`
	Particulars                 string `protobuf:"bytes,8,opt,name=Particulars,json=particulars,proto3" json:"particulars,omitempty"`
	MerchantName                string `protobuf:"bytes,9,opt,name=MerchantName,json=merchant_name,proto3" json:"merchant_name,omitempty"`
	BankID                      string `protobuf:"bytes,10,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	LocationID                  int32  `protobuf:"varint,11,opt,name=LocationID,json=location_id,proto3" json:"location_id,omitempty"`
	UserID                      int32  `protobuf:"varint,12,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	CurrencyID                  string `protobuf:"bytes,13,opt,name=CurrencyID,json=currency_id,proto3" json:"currency_id,omitempty"`
	CustomerID                  string `protobuf:"bytes,14,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	FormType                    string `protobuf:"bytes,15,opt,name=FormType,json=form_type,proto3" json:"form_type,omitempty"`
	FormNumber                  string `protobuf:"bytes,16,opt,name=FormNumber,json=form_number,proto3" json:"form_number,omitempty"`
	TrxType                     string `protobuf:"bytes,17,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	RemoteLocationID            int32  `protobuf:"varint,18,opt,name=RemoteLocationID,json=remote_location_id,proto3" json:"remote_location_id,omitempty"`
	RemoteUserID                int32  `protobuf:"varint,19,opt,name=RemoteUserID,json=remote_user_id,proto3" json:"remote_user_id,omitempty"`
	BillerName                  string `protobuf:"bytes,20,opt,name=BillerName,json=biller_name,proto3" json:"biller_name,omitempty"`
	TrxTime                     string `protobuf:"bytes,21,opt,name=TrxTime,json=trx_time,proto3" json:"trx_time,omitempty"`
	TotalAmount                 string `protobuf:"bytes,22,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
	AccountName                 string `protobuf:"bytes,23,opt,name=AccountName,json=account_name,proto3" json:"account_name,omitempty"`
	BeneficiaryAddress          string `protobuf:"bytes,24,opt,name=BeneficiaryAddress,json=beneficiary_address,proto3" json:"beneficiary_address,omitempty"`
	BeneficiaryBirthdate        string `protobuf:"bytes,25,opt,name=BeneficiaryBirthdate,json=beneficiary_birthdate,proto3" json:"beneficiary_birthdate,omitempty"`
	BeneficiaryCity             string `protobuf:"bytes,26,opt,name=BeneficiaryCity,json=beneficiary_city,proto3" json:"beneficiary_city,omitempty"`
	BeneficiaryCivil            string `protobuf:"bytes,27,opt,name=BeneficiaryCivil,json=beneficiary_civil,proto3" json:"beneficiary_civil,omitempty"`
	BeneficiaryCountry          string `protobuf:"bytes,28,opt,name=BeneficiaryCountry,json=beneficiary_country,proto3" json:"beneficiary_country,omitempty"`
	BeneficiaryCustomertype     string `protobuf:"bytes,29,opt,name=BeneficiaryCustomertype,json=beneficiary_customertype,proto3" json:"beneficiary_customertype,omitempty"`
	BeneficiaryFirstname        string `protobuf:"bytes,30,opt,name=BeneficiaryFirstname,json=beneficiary_firstname,proto3" json:"beneficiary_firstname,omitempty"`
	BeneficiaryLastname         string `protobuf:"bytes,31,opt,name=BeneficiaryLastname,json=beneficiary_lastname,proto3" json:"beneficiary_lastname,omitempty"`
	BeneficiaryMiddlename       string `protobuf:"bytes,32,opt,name=BeneficiaryMiddlename,json=beneficiary_middlename,proto3" json:"beneficiary_middlename,omitempty"`
	BeneficiaryTin              string `protobuf:"bytes,33,opt,name=BeneficiaryTin,json=beneficiary_tin,proto3" json:"beneficiary_tin,omitempty"`
	BeneficiarySex              string `protobuf:"bytes,34,opt,name=BeneficiarySex,json=beneficiary_sex,proto3" json:"beneficiary_sex,omitempty"`
	BeneficiaryState            string `protobuf:"bytes,35,opt,name=BeneficiaryState,json=beneficiary_state,proto3" json:"beneficiary_state,omitempty"`
	CurrencyCodePrincipalAmount string `protobuf:"bytes,36,opt,name=CurrencyCodePrincipalAmount,json=currency_code_principal_amount,proto3" json:"currency_code_principal_amount,omitempty"`
	PrincipalAmount             string `protobuf:"bytes,37,opt,name=PrincipalAmount,json=principal_amount,proto3" json:"principal_amount,omitempty"`
	RecordType                  string `protobuf:"bytes,38,opt,name=RecordType,json=record_type,proto3" json:"record_type,omitempty"`
	RemitterAddress             string `protobuf:"bytes,39,opt,name=RemitterAddress,json=remitter_address,proto3" json:"remitter_address,omitempty"`
	RemitterBirthdate           string `protobuf:"bytes,40,opt,name=RemitterBirthdate,json=remitter_birthdate,proto3" json:"remitter_birthdate,omitempty"`
	RemitterCity                string `protobuf:"bytes,41,opt,name=RemitterCity,json=remitter_city,proto3" json:"remitter_city,omitempty"`
	RemitterCivil               string `protobuf:"bytes,42,opt,name=RemitterCivil,json=remitter_civil,proto3" json:"remitter_civil,omitempty"`
	RemitterCountry             string `protobuf:"bytes,43,opt,name=RemitterCountry,json=remitter_country,proto3" json:"remitter_country,omitempty"`
	RemitterCustomerType        string `protobuf:"bytes,44,opt,name=RemitterCustomerType,json=remitter_customer_type,proto3" json:"remitter_customer_type,omitempty"`
	RemitterFirstname           string `protobuf:"bytes,45,opt,name=RemitterFirstname,json=remitter_firstname,proto3" json:"remitter_firstname,omitempty"`
	RemitterGender              string `protobuf:"bytes,46,opt,name=RemitterGender,json=remitter_gender,proto3" json:"remitter_gender,omitempty"`
	RemitterID                  int32  `protobuf:"varint,47,opt,name=RemitterID,json=remitter_id,proto3" json:"remitter_id,omitempty"`
	RemitterLastname            string `protobuf:"bytes,48,opt,name=RemitterLastname,json=remitter_lastname,proto3" json:"remitter_lastname,omitempty"`
	RemitterMiddlename          string `protobuf:"bytes,49,opt,name=RemitterMiddlename,json=remitter_middlename,proto3" json:"remitter_middlename,omitempty"`
	RemitterState               string `protobuf:"bytes,50,opt,name=RemitterState,json=remitter_state,proto3" json:"remitter_state,omitempty"`
	SettlementMode              string `protobuf:"bytes,51,opt,name=SettlementMode,json=settlement_mode,proto3" json:"settlement_mode,omitempty"`
	Notification                string `protobuf:"bytes,52,opt,name=Notification,json=notification,proto3" json:"notification,omitempty"`
	BeneZipCode                 string `protobuf:"bytes,53,opt,name=BeneZipCode,json=bene_zip_code,proto3" json:"bene_zip_code,omitempty"`
}

func (x *RTAPaymentRequest) Reset() {
	*x = RTAPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTAPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTAPaymentRequest) ProtoMessage() {}

func (x *RTAPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTAPaymentRequest.ProtoReflect.Descriptor instead.
func (*RTAPaymentRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{3}
}

func (x *RTAPaymentRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *RTAPaymentRequest) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *RTAPaymentRequest) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *RTAPaymentRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *RTAPaymentRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RTAPaymentRequest) GetServiceCharge() string {
	if x != nil {
		return x.ServiceCharge
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *RTAPaymentRequest) GetParticulars() string {
	if x != nil {
		return x.Particulars
	}
	return ""
}

func (x *RTAPaymentRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *RTAPaymentRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *RTAPaymentRequest) GetLocationID() int32 {
	if x != nil {
		return x.LocationID
	}
	return 0
}

func (x *RTAPaymentRequest) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *RTAPaymentRequest) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *RTAPaymentRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *RTAPaymentRequest) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *RTAPaymentRequest) GetFormNumber() string {
	if x != nil {
		return x.FormNumber
	}
	return ""
}

func (x *RTAPaymentRequest) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemoteLocationID() int32 {
	if x != nil {
		return x.RemoteLocationID
	}
	return 0
}

func (x *RTAPaymentRequest) GetRemoteUserID() int32 {
	if x != nil {
		return x.RemoteUserID
	}
	return 0
}

func (x *RTAPaymentRequest) GetBillerName() string {
	if x != nil {
		return x.BillerName
	}
	return ""
}

func (x *RTAPaymentRequest) GetTrxTime() string {
	if x != nil {
		return x.TrxTime
	}
	return ""
}

func (x *RTAPaymentRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *RTAPaymentRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryAddress() string {
	if x != nil {
		return x.BeneficiaryAddress
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryBirthdate() string {
	if x != nil {
		return x.BeneficiaryBirthdate
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryCity() string {
	if x != nil {
		return x.BeneficiaryCity
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryCivil() string {
	if x != nil {
		return x.BeneficiaryCivil
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryCountry() string {
	if x != nil {
		return x.BeneficiaryCountry
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryCustomertype() string {
	if x != nil {
		return x.BeneficiaryCustomertype
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryFirstname() string {
	if x != nil {
		return x.BeneficiaryFirstname
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryLastname() string {
	if x != nil {
		return x.BeneficiaryLastname
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryMiddlename() string {
	if x != nil {
		return x.BeneficiaryMiddlename
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryTin() string {
	if x != nil {
		return x.BeneficiaryTin
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiarySex() string {
	if x != nil {
		return x.BeneficiarySex
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneficiaryState() string {
	if x != nil {
		return x.BeneficiaryState
	}
	return ""
}

func (x *RTAPaymentRequest) GetCurrencyCodePrincipalAmount() string {
	if x != nil {
		return x.CurrencyCodePrincipalAmount
	}
	return ""
}

func (x *RTAPaymentRequest) GetPrincipalAmount() string {
	if x != nil {
		return x.PrincipalAmount
	}
	return ""
}

func (x *RTAPaymentRequest) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterAddress() string {
	if x != nil {
		return x.RemitterAddress
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterBirthdate() string {
	if x != nil {
		return x.RemitterBirthdate
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterCity() string {
	if x != nil {
		return x.RemitterCity
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterCivil() string {
	if x != nil {
		return x.RemitterCivil
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterCountry() string {
	if x != nil {
		return x.RemitterCountry
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterCustomerType() string {
	if x != nil {
		return x.RemitterCustomerType
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterFirstname() string {
	if x != nil {
		return x.RemitterFirstname
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterGender() string {
	if x != nil {
		return x.RemitterGender
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterID() int32 {
	if x != nil {
		return x.RemitterID
	}
	return 0
}

func (x *RTAPaymentRequest) GetRemitterLastname() string {
	if x != nil {
		return x.RemitterLastname
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterMiddlename() string {
	if x != nil {
		return x.RemitterMiddlename
	}
	return ""
}

func (x *RTAPaymentRequest) GetRemitterState() string {
	if x != nil {
		return x.RemitterState
	}
	return ""
}

func (x *RTAPaymentRequest) GetSettlementMode() string {
	if x != nil {
		return x.SettlementMode
	}
	return ""
}

func (x *RTAPaymentRequest) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *RTAPaymentRequest) GetBeneZipCode() string {
	if x != nil {
		return x.BeneZipCode
	}
	return ""
}

type RTAPaymentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneAmount                     string                 `protobuf:"bytes,1,opt,name=BeneAmount,json=bene_amount,proto3" json:"bene_amount,omitempty"`
	BeneficiaryAddress             string                 `protobuf:"bytes,2,opt,name=BeneficiaryAddress,json=beneficiary_address,proto3" json:"beneficiary_address,omitempty"`
	BeneficiaryBankAccountno       string                 `protobuf:"bytes,3,opt,name=BeneficiaryBankAccountno,json=beneficiary_bank_accountno,proto3" json:"beneficiary_bank_accountno,omitempty"`
	BeneficiaryCity                string                 `protobuf:"bytes,4,opt,name=BeneficiaryCity,json=beneficiary_city,proto3" json:"beneficiary_city,omitempty"`
	BeneficiaryCountry             string                 `protobuf:"bytes,5,opt,name=BeneficiaryCountry,json=beneficiary_country,proto3" json:"beneficiary_country,omitempty"`
	BeneficiaryFirstName           string                 `protobuf:"bytes,6,opt,name=BeneficiaryFirstName,json=beneficiary_firstname,proto3" json:"beneficiary_firstname,omitempty"`
	BeneficiaryLastName            string                 `protobuf:"bytes,7,opt,name=BeneficiaryLastName,json=beneficiary_lastname,proto3" json:"beneficiary_lastname,omitempty"`
	BeneficiaryMiddleName          string                 `protobuf:"bytes,8,opt,name=BeneficiaryMiddleName,json=beneficiary_middlename,proto3" json:"beneficiary_middlename,omitempty"`
	BeneficiaryStateOrProvince     string                 `protobuf:"bytes,9,opt,name=BeneficiaryStateOrProvince,json=beneficiary_state_or_province,proto3" json:"beneficiary_state_or_province,omitempty"`
	BpiBranchCode                  string                 `protobuf:"bytes,10,opt,name=BpiBranchCode,json=bpi_branch_code,proto3" json:"bpi_branch_code,omitempty"`
	CurrencyCodeOfFundingAmount    string                 `protobuf:"bytes,11,opt,name=CurrencyCodeOfFundingAmount,json=currency_code_of_funding_amount,proto3" json:"currency_code_of_funding_amount,omitempty"`
	CurrencyCodeOfSettlementAmount string                 `protobuf:"bytes,12,opt,name=CurrencyCodeOfSettlementAmount,json=currency_code_of_settlement_amount,proto3" json:"currency_code_of_settlement_amount,omitempty"`
	TxnDistributionDate            string                 `protobuf:"bytes,13,opt,name=TxnDistributionDate,json=txn_distribution_date,proto3" json:"txn_distribution_date,omitempty"`
	FundingAmount                  string                 `protobuf:"bytes,14,opt,name=FundingAmount,json=funding_amount,proto3" json:"funding_amount,omitempty"`
	Reason                         string                 `protobuf:"bytes,15,opt,name=Reason,json=reason,proto3" json:"reason,omitempty"`
	RemitterCity                   string                 `protobuf:"bytes,16,opt,name=RemitterCity,json=remitter_city,proto3" json:"remitter_city,omitempty"`
	RemitterCountry                string                 `protobuf:"bytes,17,opt,name=RemitterCountry,json=remitter_country,proto3" json:"remitter_country,omitempty"`
	RemitterFirstName              string                 `protobuf:"bytes,18,opt,name=RemitterFirstName,json=remitter_firstname,proto3" json:"remitter_firstname,omitempty"`
	RemitterLastName               string                 `protobuf:"bytes,19,opt,name=RemitterLastName,json=remitter_lastname,proto3" json:"remitter_lastname,omitempty"`
	RemitterMessageToBeneficiary   string                 `protobuf:"bytes,20,opt,name=RemitterMessageToBeneficiary,json=remitter_message_to_beneficiary,proto3" json:"remitter_message_to_beneficiary,omitempty"`
	RemitterMiddleName             string                 `protobuf:"bytes,21,opt,name=RemitterMiddleName,json=remitter_middlename,proto3" json:"remitter_middlename,omitempty"`
	RemitterStateOrProvince        string                 `protobuf:"bytes,22,opt,name=RemitterStateOrProvince,json=remitter_state_or_province,proto3" json:"remitter_state_or_province,omitempty"`
	SettlementMode                 string                 `protobuf:"bytes,23,opt,name=SettlementMode,json=settlement_mode,proto3" json:"settlement_mode,omitempty"`
	StatusCode                     string                 `protobuf:"bytes,24,opt,name=StatusCode,json=status_code,proto3" json:"status_code,omitempty"`
	TransactionDate                string                 `protobuf:"bytes,25,opt,name=TransactionDate,json=transaction_date,proto3" json:"transaction_date,omitempty"`
	TransactionReferenceNo         string                 `protobuf:"bytes,26,opt,name=TransactionReferenceNo,json=transaction_reference_no,proto3" json:"transaction_reference_no,omitempty"`
	Message                        string                 `protobuf:"bytes,27,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Code                           string                 `protobuf:"bytes,28,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	SenderRefID                    string                 `protobuf:"bytes,29,opt,name=SenderRefID,json=sender_ref_id,proto3" json:"sender_ref_id,omitempty"`
	State                          string                 `protobuf:"bytes,30,opt,name=State,json=state,proto3" json:"state,omitempty"`
	UUID                           string                 `protobuf:"bytes,31,opt,name=UUID,json=uuid,proto3" json:"uuid,omitempty"`
	Description                    string                 `protobuf:"bytes,32,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	Type                           string                 `protobuf:"bytes,33,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Amount                         string                 `protobuf:"bytes,34,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	UbpTranID                      string                 `protobuf:"bytes,35,opt,name=UbpTranID,json=ubp_tran_id,proto3" json:"ubp_tran_id,omitempty"`
	TranRequestDate                string                 `protobuf:"bytes,36,opt,name=TranRequestDate,json=tran_request_date,proto3" json:"tran_request_date,omitempty"`
	TranFinacleDate                string                 `protobuf:"bytes,37,opt,name=TranFinacleDate,json=tran_finacle_date,proto3" json:"tran_finacle_date,omitempty"`
	Created                        *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated                        *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *RTAPaymentResult) Reset() {
	*x = RTAPaymentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTAPaymentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTAPaymentResult) ProtoMessage() {}

func (x *RTAPaymentResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTAPaymentResult.ProtoReflect.Descriptor instead.
func (*RTAPaymentResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{4}
}

func (x *RTAPaymentResult) GetBeneAmount() string {
	if x != nil {
		return x.BeneAmount
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryAddress() string {
	if x != nil {
		return x.BeneficiaryAddress
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryBankAccountno() string {
	if x != nil {
		return x.BeneficiaryBankAccountno
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryCity() string {
	if x != nil {
		return x.BeneficiaryCity
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryCountry() string {
	if x != nil {
		return x.BeneficiaryCountry
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryFirstName() string {
	if x != nil {
		return x.BeneficiaryFirstName
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryLastName() string {
	if x != nil {
		return x.BeneficiaryLastName
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryMiddleName() string {
	if x != nil {
		return x.BeneficiaryMiddleName
	}
	return ""
}

func (x *RTAPaymentResult) GetBeneficiaryStateOrProvince() string {
	if x != nil {
		return x.BeneficiaryStateOrProvince
	}
	return ""
}

func (x *RTAPaymentResult) GetBpiBranchCode() string {
	if x != nil {
		return x.BpiBranchCode
	}
	return ""
}

func (x *RTAPaymentResult) GetCurrencyCodeOfFundingAmount() string {
	if x != nil {
		return x.CurrencyCodeOfFundingAmount
	}
	return ""
}

func (x *RTAPaymentResult) GetCurrencyCodeOfSettlementAmount() string {
	if x != nil {
		return x.CurrencyCodeOfSettlementAmount
	}
	return ""
}

func (x *RTAPaymentResult) GetTxnDistributionDate() string {
	if x != nil {
		return x.TxnDistributionDate
	}
	return ""
}

func (x *RTAPaymentResult) GetFundingAmount() string {
	if x != nil {
		return x.FundingAmount
	}
	return ""
}

func (x *RTAPaymentResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RTAPaymentResult) GetRemitterCity() string {
	if x != nil {
		return x.RemitterCity
	}
	return ""
}

func (x *RTAPaymentResult) GetRemitterCountry() string {
	if x != nil {
		return x.RemitterCountry
	}
	return ""
}

func (x *RTAPaymentResult) GetRemitterFirstName() string {
	if x != nil {
		return x.RemitterFirstName
	}
	return ""
}

func (x *RTAPaymentResult) GetRemitterLastName() string {
	if x != nil {
		return x.RemitterLastName
	}
	return ""
}

func (x *RTAPaymentResult) GetRemitterMessageToBeneficiary() string {
	if x != nil {
		return x.RemitterMessageToBeneficiary
	}
	return ""
}

func (x *RTAPaymentResult) GetRemitterMiddleName() string {
	if x != nil {
		return x.RemitterMiddleName
	}
	return ""
}

func (x *RTAPaymentResult) GetRemitterStateOrProvince() string {
	if x != nil {
		return x.RemitterStateOrProvince
	}
	return ""
}

func (x *RTAPaymentResult) GetSettlementMode() string {
	if x != nil {
		return x.SettlementMode
	}
	return ""
}

func (x *RTAPaymentResult) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RTAPaymentResult) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *RTAPaymentResult) GetTransactionReferenceNo() string {
	if x != nil {
		return x.TransactionReferenceNo
	}
	return ""
}

func (x *RTAPaymentResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RTAPaymentResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RTAPaymentResult) GetSenderRefID() string {
	if x != nil {
		return x.SenderRefID
	}
	return ""
}

func (x *RTAPaymentResult) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RTAPaymentResult) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *RTAPaymentResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RTAPaymentResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RTAPaymentResult) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RTAPaymentResult) GetUbpTranID() string {
	if x != nil {
		return x.UbpTranID
	}
	return ""
}

func (x *RTAPaymentResult) GetTranRequestDate() string {
	if x != nil {
		return x.TranRequestDate
	}
	return ""
}

func (x *RTAPaymentResult) GetTranFinacleDate() string {
	if x != nil {
		return x.TranFinacleDate
	}
	return ""
}

func (x *RTAPaymentResult) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RTAPaymentResult) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type RTAPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string            `protobuf:"bytes,1,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result   *RTAPaymentResult `protobuf:"bytes,2,opt,name=Result,json=result,proto3" json:"result,omitempty"`
	BankCode string            `protobuf:"bytes,3,opt,name=BankCode,json=bank_code,proto3" json:"bank_code,omitempty"`
}

func (x *RTAPaymentResponse) Reset() {
	*x = RTAPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTAPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTAPaymentResponse) ProtoMessage() {}

func (x *RTAPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTAPaymentResponse.ProtoReflect.Descriptor instead.
func (*RTAPaymentResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{5}
}

func (x *RTAPaymentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RTAPaymentResponse) GetResult() *RTAPaymentResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RTAPaymentResponse) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type RTARetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner         string `protobuf:"bytes,1,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	ReferenceNumber string `protobuf:"bytes,2,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	ID              string `protobuf:"bytes,3,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	LocationID      int32  `protobuf:"varint,4,opt,name=LocationID,json=location_id,proto3" json:"location_id,omitempty"`
	PrincipalAmount string `protobuf:"bytes,5,opt,name=PrincipalAmount,json=principal_amount,proto3" json:"principal_amount,omitempty"`
	FormNumber      string `protobuf:"bytes,6,opt,name=FormNumber,json=form_number,proto3" json:"form_number,omitempty"`
}

func (x *RTARetryRequest) Reset() {
	*x = RTARetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTARetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTARetryRequest) ProtoMessage() {}

func (x *RTARetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTARetryRequest.ProtoReflect.Descriptor instead.
func (*RTARetryRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{6}
}

func (x *RTARetryRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *RTARetryRequest) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *RTARetryRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RTARetryRequest) GetLocationID() int32 {
	if x != nil {
		return x.LocationID
	}
	return 0
}

func (x *RTARetryRequest) GetPrincipalAmount() string {
	if x != nil {
		return x.PrincipalAmount
	}
	return ""
}

func (x *RTARetryRequest) GetFormNumber() string {
	if x != nil {
		return x.FormNumber
	}
	return ""
}

type RTARetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string            `protobuf:"bytes,1,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result   *RTAPaymentResult `protobuf:"bytes,2,opt,name=Result,json=result,proto3" json:"result,omitempty"`
	BankCode string            `protobuf:"bytes,3,opt,name=BankCode,json=bank_code,proto3" json:"bank_code,omitempty"`
}

func (x *RTARetryResponse) Reset() {
	*x = RTARetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTARetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTARetryResponse) ProtoMessage() {}

func (x *RTARetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTARetryResponse.ProtoReflect.Descriptor instead.
func (*RTARetryResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP(), []int{7}
}

func (x *RTARetryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RTARetryResponse) GetResult() *RTAPaymentResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RTARetryResponse) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

var File_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDesc = []byte{
	0x0a, 0x34, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x52, 0x54, 0x41, 0x49, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb1, 0x01,
	0x0a, 0x12, 0x52, 0x54, 0x41, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x54, 0x41, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xaf, 0x10, 0x0a, 0x10, 0x52, 0x54, 0x41, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x47, 0x0a, 0x18, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x3b, 0x0a, 0x12, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a,
	0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x13, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x15, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x1a, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x1d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x32, 0x0a, 0x0d, 0x42, 0x70, 0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x62, 0x70, 0x69, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x1e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x13, 0x54, 0x78, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x74, 0x78, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x0d, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x43, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x11,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x55, 0x62, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x75, 0x62, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xd5, 0x15, 0x0a, 0x11, 0x52, 0x54, 0x41, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x12,
	0x2f, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x46, 0x6f,
	0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x42, 0x69,
	0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x12,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x14, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x43, 0x69, 0x76, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x12, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x17, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x13, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4c, 0x61,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x15, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x54, 0x69, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x53, 0x65, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x10, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x0d,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x69, 0x76, 0x69, 0x6c, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x12,
	0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x16, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x12, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x12, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x5a, 0x69, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa7, 0x11, 0x0a, 0x10,
	0x52, 0x54, 0x41, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x12, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x18, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x6e, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x43, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x12, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x1a, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1d, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x42, 0x70,
	0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x62,
	0x70, 0x69, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50,
	0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x66,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x56, 0x0a, 0x1e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x4f, 0x66, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x13, 0x54, 0x78, 0x6e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x15, 0x74, 0x78, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x1c, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1f, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x3b,
	0x0a, 0x12, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x09, 0x55, 0x62, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x75, 0x62,
	0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x63, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x52, 0x54, 0x41, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x52, 0x54, 0x41, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x52, 0x54,
	0x41, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x46, 0x6f,
	0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xaf, 0x01, 0x0a, 0x10, 0x52, 0x54, 0x41, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x54, 0x41, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x32, 0xb0, 0x09, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x03, 0x0a, 0x0a,
	0x52, 0x54, 0x41, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x54, 0x41, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52,
	0x54, 0x41, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xaf, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8b, 0x02, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x1a, 0x18, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x54, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x32, 0x0a,
	0x30, 0x1a, 0x2e, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x54, 0x41, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x12, 0x33, 0x0a, 0x31, 0x4a, 0x2f, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x52, 0x54, 0x41, 0x20, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a,
	0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0x89, 0x03, 0x0a, 0x0a, 0x52, 0x54, 0x41, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x54, 0x41, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x54, 0x41, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8b, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x5b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x54, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x54, 0x41, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x12, 0x33, 0x0a, 0x31, 0x4a, 0x2f, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x52, 0x54, 0x41, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x74, 0x61, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xf9, 0x02, 0x0a, 0x08, 0x52, 0x54, 0x41, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x1f, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x52, 0x54, 0x41, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x52, 0x54, 0x41, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa5, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x83, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x52, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x16, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x1a,
	0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x54, 0x41,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x54, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x12, 0x31, 0x0a, 0x2f, 0x4a, 0x2d, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x52, 0x54, 0x41, 0x20, 0x52, 0x65, 0x74, 0x72, 0x79, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x28, 0x00, 0x30, 0x00, 0x1a,
	0x03, 0x88, 0x02, 0x00, 0x42, 0x54, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x39, 0x62, 0x72, 0x61, 0x6e,
	0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b,
	0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3b, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x6f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_goTypes  = []interface{}{
		(*RTAInquireRequest)(nil),     // 0: remittoaccount.RTAInquireRequest
		(*RTAInquireResponse)(nil),    // 1: remittoaccount.RTAInquireResponse
		(*RTAInquireResult)(nil),      // 2: remittoaccount.RTAInquireResult
		(*RTAPaymentRequest)(nil),     // 3: remittoaccount.RTAPaymentRequest
		(*RTAPaymentResult)(nil),      // 4: remittoaccount.RTAPaymentResult
		(*RTAPaymentResponse)(nil),    // 5: remittoaccount.RTAPaymentResponse
		(*RTARetryRequest)(nil),       // 6: remittoaccount.RTARetryRequest
		(*RTARetryResponse)(nil),      // 7: remittoaccount.RTARetryResponse
		(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_depIdxs = []int32{
	2,  // 0: remittoaccount.RTAInquireResponse.Result:type_name -> remittoaccount.RTAInquireResult
	8,  // 1: remittoaccount.RTAInquireResult.CreatedAt:type_name -> google.protobuf.Timestamp
	8,  // 2: remittoaccount.RTAInquireResult.UpdatedAt:type_name -> google.protobuf.Timestamp
	8,  // 3: remittoaccount.RTAPaymentResult.Created:type_name -> google.protobuf.Timestamp
	8,  // 4: remittoaccount.RTAPaymentResult.Updated:type_name -> google.protobuf.Timestamp
	4,  // 5: remittoaccount.RTAPaymentResponse.Result:type_name -> remittoaccount.RTAPaymentResult
	4,  // 6: remittoaccount.RTARetryResponse.Result:type_name -> remittoaccount.RTAPaymentResult
	0,  // 7: remittoaccount.RemitToAccountService.RTAInquire:input_type -> remittoaccount.RTAInquireRequest
	3,  // 8: remittoaccount.RemitToAccountService.RTAPayment:input_type -> remittoaccount.RTAPaymentRequest
	6,  // 9: remittoaccount.RemitToAccountService.RTARetry:input_type -> remittoaccount.RTARetryRequest
	1,  // 10: remittoaccount.RemitToAccountService.RTAInquire:output_type -> remittoaccount.RTAInquireResponse
	5,  // 11: remittoaccount.RemitToAccountService.RTAPayment:output_type -> remittoaccount.RTAPaymentResponse
	7,  // 12: remittoaccount.RemitToAccountService.RTARetry:output_type -> remittoaccount.RTARetryResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTAInquireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTAInquireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTAInquireResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTAPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTAPaymentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTAPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTARetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTARetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_depIdxs,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_remittoaccount_all_proto_depIdxs = nil
}
