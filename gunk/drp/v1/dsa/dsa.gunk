package dsa

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

// DSA represents perahub DSA object
type DSA struct {
	DsaID          uint32    `pb:"1" json:"id"`
	DsaCode        string    `pb:"2" json:"dsa_code"`
	DsaName        string    `pb:"3" json:"dsa_name"`
	EmailAddress   string    `pb:"4" json:"email_address"`
	Status         uint32    `pb:"5" json:"status"`
	Vatable        uint32    `pb:"6" json:"vatable"`
	Address        string    `pb:"7" json:"address"`
	Tin            string    `pb:"8" json:"tin"`
	UpdatedBy      string    `pb:"9" json:"updated_by"`
	ContactPerson  string    `pb:"10" json:"contact_person"`
	City           string    `pb:"11" json:"city"`
	Province       string    `pb:"12" json:"province"`
	Zipcode        string    `pb:"13" json:"zipcode"`
	President      string    `pb:"14" json:"president"`
	GeneralManager string    `pb:"15" json:"general_manager"`
	CreatedAt      time.Time `pb:"16" json:"created_at"`
	UpdatedAt      time.Time `pb:"17" json:"updated_at"`
	DeletedAt      time.Time `pb:"18" json:"deleted_at"`
}

// CreateDSARequest ...
//
// +gunk openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
//         Required: []string{
//                 "dsa_code",
//                 "dsa_name",
//                 "vatable",
//                 "address",
//                 "updated_by",
//                 "contact_person",
//                 "city",
//                 "province",
//                 "president",
//                 "general_manager",
//         },
// }}
type CreateDSARequest struct {
	DsaCode        string `pb:"1" json:"dsa_code"`
	DsaName        string `pb:"2" json:"dsa_name"`
	EmailAddress   string `pb:"3" json:"email_address"`
	Vatable        string `pb:"4" json:"vatable"`
	Address        string `pb:"5" json:"address"`
	Tin            string `pb:"6" json:"tin"`
	UpdatedBy      string `pb:"7" json:"updated_by"`
	ContactPerson  string `pb:"8" json:"contact_person"`
	City           string `pb:"9" json:"city"`
	Province       string `pb:"10" json:"province"`
	Zipcode        string `pb:"11" json:"zipcode"`
	President      string `pb:"12" json:"president"`
	GeneralManager string `pb:"13" json:"general_manager"`
}

// UpdateDSARequest ...
//
// +gunk openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
//         Required: []string{
//                 "id",
//                 "dsa_code",
//                 "dsa_name",
//                 "vatable",
//                 "address",
//                 "updated_by",
//                 "contact_person",
//                 "city",
//                 "province",
//                 "president",
//                 "general_manager",
//         },
// }}
type UpdateDSARequest struct {
	DsaID          uint32 `pb:"1" json:"id"`
	DsaCode        string `pb:"2" json:"dsa_code"`
	DsaName        string `pb:"3" json:"dsa_name"`
	EmailAddress   string `pb:"4" json:"email_address"`
	Vatable        string `pb:"5" json:"vatable"`
	Address        string `pb:"6" json:"address"`
	Tin            string `pb:"7" json:"tin"`
	UpdatedBy      string `pb:"8" json:"updated_by"`
	ContactPerson  string `pb:"9" json:"contact_person"`
	City           string `pb:"10" json:"city"`
	Province       string `pb:"11" json:"province"`
	Zipcode        string `pb:"12" json:"zipcode"`
	President      string `pb:"13" json:"president"`
	GeneralManager string `pb:"14" json:"general_manager"`
}

// GetDSAByIDRequest ...
//
// +gunk openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
//         Required: []string{
//                 "id",
//         },
// }}
type GetDSAByIDRequest struct {
	DsaID uint32 `pb:"1" json:"id"`
}

// ListDSAResponse ...
type ListDSAResponse struct {
	DSAList []DSA `pb:"1" json:"list"`
}

// DeleteDSAByIDRequest ...
//
// +gunk openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
//         Required: []string{
//                 "id",
//         },
// }}
type DeleteDSAByIDRequest struct {
	DsaID uint32 `pb:"1" json:"id"`
}

// DSAService ...
type DSAService interface {
	// CreateDSA Creates DSA record.
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/dsa",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"DSA"},
	//         Description: "Creates new DSA record.",
	//         Summary:     "Creates DSA record",
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/dsaDSA",
	//                         }},
	//                 },
	//                 "422": openapiv2.Response{
	//                         Description: "Returned when unprocessable entity.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 422, \"message\": \"invalid input for parameters\" }",
	//                         }},
	//                 },
	//                 "500": openapiv2.Response{
	//                         Description: "Returned when internal server error.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 500, \"message\": \"internal error\" }",
	//                         }},
	//                 },
	//         },
	// }
	CreateDSA(CreateDSARequest) DSA

	// UpdateDSA Updates DSA record by id.
	//
	// +gunk http.Match{
	//         Method: "PUT",
	//         Path:   "/v1/dsa/{DsaID}",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"DSA"},
	//         Description: "Update DSA record by ID.",
	//         Summary:     "Update DSA record",
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/dsaDSA",
	//                         }},
	//                 },
	//                 "422": openapiv2.Response{
	//                         Description: "Returned when unprocessable entity.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 422, \"message\": \"invalid input for parameters\" }",
	//                         }},
	//                 },
	//                 "500": openapiv2.Response{
	//                         Description: "Returned when internal server error.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 500, \"message\": \"internal error\" }",
	//                         }},
	//                 },
	//         },
	// }
	UpdateDSA(UpdateDSARequest) DSA

	// GetDSAByID Gets DSA record by ID.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/revenue-commission/dsa/{DsaID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"DSA"},
	//         Description: "Get DSA record by ID.",
	//         Summary:     "Get DSA record",
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/dsaDSA",
	//                         }},
	//                 },
	//                 "422": openapiv2.Response{
	//                         Description: "Returned when unprocessable entity.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 422, \"message\": \"invalid input for parameters\" }",
	//                         }},
	//                 },
	//                 "500": openapiv2.Response{
	//                         Description: "Returned when internal server error.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 500, \"message\": \"internal error\" }",
	//                         }},
	//                 },
	//         },
	// }
	GetDSAByID(GetDSAByIDRequest) DSA

	// ListDSA Gets all DSA records
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/dsa",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"DSA"},
	//         Description: "List all DSA records.",
	//         Summary:     "List DSA records",
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/dsaListDSAResponse",
	//                         }},
	//                 },
	//                 "422": openapiv2.Response{
	//                         Description: "Returned when unprocessable entity.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 422, \"message\": \"invalid input for parameters\" }",
	//                         }},
	//                 },
	//                 "500": openapiv2.Response{
	//                         Description: "Returned when internal server error.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 500, \"message\": \"internal error\" }",
	//                         }},
	//                 },
	//         },
	// }
	ListDSA() ListDSAResponse

	// DeleteDSAByID Deletes DSA record by ID.
	//
	// +gunk http.Match{
	//         Method: "DELETE",
	//         Path:   "/v1/dsa/{DsaID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"DSA"},
	//         Description: "Deletes DSA record by ID.",
	//         Summary:     "Deletes DSA record",
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/dsaDSA",
	//                         }},
	//                 },
	//                 "422": openapiv2.Response{
	//                         Description: "Returned when unprocessable entity.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 422, \"message\": \"invalid input for parameters\" }",
	//                         }},
	//                 },
	//                 "500": openapiv2.Response{
	//                         Description: "Returned when internal server error.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 500, \"message\": \"internal error\" }",
	//                         }},
	//                 },
	//         },
	// }
	DeleteDSAByID(DeleteDSAByIDRequest) DSA
}
