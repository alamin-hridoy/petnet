// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package teller

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TellerServiceClient is the client API for TellerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TellerServiceClient interface {
	// Register a remittance teller to the perahub conex platform.
	RegisterTeller(ctx context.Context, in *RegisterTellerRequest, opts ...grpc.CallOption) (*RegisterTellerResponse, error)
}

type tellerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTellerServiceClient(cc grpc.ClientConnInterface) TellerServiceClient {
	return &tellerServiceClient{cc}
}

func (c *tellerServiceClient) RegisterTeller(ctx context.Context, in *RegisterTellerRequest, opts ...grpc.CallOption) (*RegisterTellerResponse, error) {
	out := new(RegisterTellerResponse)
	err := c.cc.Invoke(ctx, "/teller.TellerService/RegisterTeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TellerServiceServer is the server API for TellerService service.
// All implementations must embed UnimplementedTellerServiceServer
// for forward compatibility
type TellerServiceServer interface {
	// Register a remittance teller to the perahub conex platform.
	RegisterTeller(context.Context, *RegisterTellerRequest) (*RegisterTellerResponse, error)
	mustEmbedUnimplementedTellerServiceServer()
}

// UnimplementedTellerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTellerServiceServer struct{}

func (UnimplementedTellerServiceServer) RegisterTeller(context.Context, *RegisterTellerRequest) (*RegisterTellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTeller not implemented")
}
func (UnimplementedTellerServiceServer) mustEmbedUnimplementedTellerServiceServer() {}

// UnsafeTellerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TellerServiceServer will
// result in compilation errors.
type UnsafeTellerServiceServer interface {
	mustEmbedUnimplementedTellerServiceServer()
}

func RegisterTellerServiceServer(s grpc.ServiceRegistrar, srv TellerServiceServer) {
	s.RegisterService(&TellerService_ServiceDesc, srv)
}

func _TellerService_RegisterTeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerServiceServer).RegisterTeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teller.TellerService/RegisterTeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerServiceServer).RegisterTeller(ctx, req.(*RegisterTellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TellerService_ServiceDesc is the grpc.ServiceDesc for TellerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TellerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teller.TellerService",
	HandlerType: (*TellerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTeller",
			Handler:    _TellerService_RegisterTeller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/teller/all.proto",
}
