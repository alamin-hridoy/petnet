// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v1/branch/all.proto

package branch

import (
	reflect "reflect"
	sync "sync"

	profile "brank.as/petnet/gunk/dsa/v1/profile"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_UnknownStatus    Status = 0
	Status_Accepted         Status = 1
	Status_Completed        Status = 2
	Status_Pending          Status = 3
	Status_Rejected         Status = 4
	Status_PendingDocuments Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UnknownStatus",
		1: "Accepted",
		2: "Completed",
		3: "Pending",
		4: "Rejected",
		5: "PendingDocuments",
	}
	Status_value = map[string]int32{
		"UnknownStatus":    0,
		"Accepted":         1,
		"Completed":        2,
		"Pending":          3,
		"Rejected":         4,
		"PendingDocuments": 5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{0}
}

type RiskScore int32

const (
	RiskScore_UnknownRiskScore RiskScore = 0
	RiskScore_Low              RiskScore = 1
	RiskScore_Medium           RiskScore = 2
	RiskScore_High             RiskScore = 3
)

// Enum value maps for RiskScore.
var (
	RiskScore_name = map[int32]string{
		0: "UnknownRiskScore",
		1: "Low",
		2: "Medium",
		3: "High",
	}
	RiskScore_value = map[string]int32{
		"UnknownRiskScore": 0,
		"Low":              1,
		"Medium":           2,
		"High":             3,
	}
)

func (x RiskScore) Enum() *RiskScore {
	p := new(RiskScore)
	*p = x
	return p
}

func (x RiskScore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskScore) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[1].Descriptor()
}

func (RiskScore) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[1]
}

func (x RiskScore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskScore.Descriptor instead.
func (RiskScore) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{1}
}

type Currency int32

const (
	Currency_UnknownCurrency Currency = 0
	Currency_PHP             Currency = 1
	Currency_USD             Currency = 2
	Currency_EURO            Currency = 3
	Currency_SGD             Currency = 4
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "UnknownCurrency",
		1: "PHP",
		2: "USD",
		3: "EURO",
		4: "SGD",
	}
	Currency_value = map[string]int32{
		"UnknownCurrency": 0,
		"PHP":             1,
		"USD":             2,
		"EURO":            3,
		"SGD":             4,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[2].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[2]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{2}
}

type FeeStatus int32

const (
	FeeStatus_UnknownFeeStatus FeeStatus = 0
	FeeStatus_Active           FeeStatus = 1
	FeeStatus_Disabled         FeeStatus = 2
)

// Enum value maps for FeeStatus.
var (
	FeeStatus_name = map[int32]string{
		0: "UnknownFeeStatus",
		1: "Active",
		2: "Disabled",
	}
	FeeStatus_value = map[string]int32{
		"UnknownFeeStatus": 0,
		"Active":           1,
		"Disabled":         2,
	}
)

func (x FeeStatus) Enum() *FeeStatus {
	p := new(FeeStatus)
	*p = x
	return p
}

func (x FeeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[3].Descriptor()
}

func (FeeStatus) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[3]
}

func (x FeeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeStatus.Descriptor instead.
func (FeeStatus) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{3}
}

// To avoid overrides of boolean on upsert
type Boolean int32

const (
	Boolean_UnknownBoolean Boolean = 0
	Boolean_True           Boolean = 1
	Boolean_False          Boolean = 2
)

// Enum value maps for Boolean.
var (
	Boolean_name = map[int32]string{
		0: "UnknownBoolean",
		1: "True",
		2: "False",
	}
	Boolean_value = map[string]int32{
		"UnknownBoolean": 0,
		"True":           1,
		"False":          2,
	}
)

func (x Boolean) Enum() *Boolean {
	p := new(Boolean)
	*p = x
	return p
}

func (x Boolean) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Boolean) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[4].Descriptor()
}

func (Boolean) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[4]
}

func (x Boolean) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Boolean.Descriptor instead.
func (Boolean) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{4}
}

type Type int32

const (
	Type_UnknownType Type = 0
	Type_PetNet      Type = 1
	Type_DSA         Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UnknownType",
		1: "PetNet",
		2: "DSA",
	}
	Type_value = map[string]int32{
		"UnknownType": 0,
		"PetNet":      1,
		"DSA":         2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[5].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes[5]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{5}
}

type UpsertBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=Branch,json=branch,proto3" json:"branch,omitempty"`
}

func (x *UpsertBranchRequest) Reset() {
	*x = UpsertBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertBranchRequest) ProtoMessage() {}

func (x *UpsertBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertBranchRequest.ProtoReflect.Descriptor instead.
func (*UpsertBranchRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type UpsertBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *UpsertBranchResponse) Reset() {
	*x = UpsertBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertBranchResponse) ProtoMessage() {}

func (x *UpsertBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertBranchResponse.ProtoReflect.Descriptor instead.
func (*UpsertBranchResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertBranchResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *GetBranchRequest) Reset() {
	*x = GetBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchRequest) ProtoMessage() {}

func (x *GetBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchRequest.ProtoReflect.Descriptor instead.
func (*GetBranchRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{2}
}

func (x *GetBranchRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=Branch,json=branch,proto3" json:"branch,omitempty"`
}

func (x *GetBranchResponse) Reset() {
	*x = GetBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchResponse) ProtoMessage() {}

func (x *GetBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchResponse.ProtoReflect.Descriptor instead.
func (*GetBranchResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{3}
}

func (x *GetBranchResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type ListBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID  string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
}

func (x *ListBranchesRequest) Reset() {
	*x = ListBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest) ProtoMessage() {}

func (x *ListBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{4}
}

func (x *ListBranchesRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ListBranchesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListBranchesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branchs []*Branch `protobuf:"bytes,1,rep,name=Branchs,json=branchs,proto3" json:"branchs,omitempty"`
	Next    int32     `protobuf:"varint,2,opt,name=Next,json=next,proto3" json:"next,omitempty"`
	Total   int32     `protobuf:"varint,3,opt,name=Total,json=total,proto3" json:"total,omitempty"`
}

func (x *ListBranchesResponse) Reset() {
	*x = ListBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesResponse) ProtoMessage() {}

func (x *ListBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesResponse.ProtoReflect.Descriptor instead.
func (*ListBranchesResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{5}
}

func (x *ListBranchesResponse) GetBranchs() []*Branch {
	if x != nil {
		return x.Branchs
	}
	return nil
}

func (x *ListBranchesResponse) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *ListBranchesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID         string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=Title,json=title,proto3" json:"title,omitempty"`
	Address       *profile.Address       `protobuf:"bytes,4,opt,name=Address,json=address,proto3" json:"address,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,5,opt,name=PhoneNumber,json=phone_number,proto3" json:"phone_number,omitempty"`
	FaxNumber     string                 `protobuf:"bytes,6,opt,name=FaxNumber,json=fax_number,proto3" json:"fax_number,omitempty"`
	ContactPerson string                 `protobuf:"bytes,7,opt,name=ContactPerson,json=contact_person,proto3" json:"contact_person,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Deleted       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Deleted,json=deleted,proto3" json:"deleted,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP(), []int{6}
}

func (x *Branch) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Branch) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Branch) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Branch) GetAddress() *profile.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Branch) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Branch) GetFaxNumber() string {
	if x != nil {
		return x.FaxNumber
	}
	return ""
}

func (x *Branch) GetContactPerson() string {
	if x != nil {
		return x.ContactPerson
	}
	return ""
}

func (x *Branch) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Branch) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Branch) GetDeleted() *timestamppb.Timestamp {
	if x != nil {
		return x.Deleted
	}
	return nil
}

var File_brank_as_petnet_gunk_dsa_v1_branch_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2d, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b,
	0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x3a, 0x0a, 0x14, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x59, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x1e, 0x0a, 0x04,
	0x4e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x86, 0x04, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a,
	0x85, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x0d, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x10, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x05, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x54, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b,
	0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x48,
	0x69, 0x67, 0x68, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x5c, 0x0a,
	0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x0f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x50, 0x48, 0x50, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0b, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04,
	0x45, 0x55, 0x52, 0x4f, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x53, 0x47,
	0x44, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4b, 0x0a, 0x09, 0x46,
	0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x46, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x42, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x54,
	0x72, 0x75, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x3c, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x50, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x44, 0x53, 0x41,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xb8, 0x09, 0x0a, 0x0d, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x03, 0x0a,
	0x0c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x25, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x07, 0x20, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x20, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x2e, 0x1a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x2e, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2f, 0x7b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x80, 0x03, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5,
	0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x84, 0x02, 0x0a, 0x07, 0x20, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x0c, 0x47, 0x65, 0x74, 0x20, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x2e, 0x1a, 0x1d, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x20, 0x49, 0x44,
	0x2e, 0x4a, 0x52, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29, 0x0a, 0x27, 0x1a, 0x25,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x83, 0x03, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x02, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0x83, 0x02, 0x0a, 0x07, 0x20, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x2e,
	0x1a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x2e, 0x4a, 0x52, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x4b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29, 0x0a, 0x27, 0x1a, 0x25, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c,
	0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x28, 0x00, 0x30, 0x00,
	0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x44, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x29, 0x62, 0x72, 0x61,
	0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e,
	0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3b,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8,
	0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 7)
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_goTypes   = []interface{}{
		(Status)(0),                   // 0: petnet.v1.branch.Status
		(RiskScore)(0),                // 1: petnet.v1.branch.RiskScore
		(Currency)(0),                 // 2: petnet.v1.branch.Currency
		(FeeStatus)(0),                // 3: petnet.v1.branch.FeeStatus
		(Boolean)(0),                  // 4: petnet.v1.branch.Boolean
		(Type)(0),                     // 5: petnet.v1.branch.Type
		(*UpsertBranchRequest)(nil),   // 6: petnet.v1.branch.UpsertBranchRequest
		(*UpsertBranchResponse)(nil),  // 7: petnet.v1.branch.UpsertBranchResponse
		(*GetBranchRequest)(nil),      // 8: petnet.v1.branch.GetBranchRequest
		(*GetBranchResponse)(nil),     // 9: petnet.v1.branch.GetBranchResponse
		(*ListBranchesRequest)(nil),   // 10: petnet.v1.branch.ListBranchesRequest
		(*ListBranchesResponse)(nil),  // 11: petnet.v1.branch.ListBranchesResponse
		(*Branch)(nil),                // 12: petnet.v1.branch.Branch
		(*profile.Address)(nil),       // 13: petnet.v1.profile.Address
		(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_depIdxs = []int32{
	12, // 0: petnet.v1.branch.UpsertBranchRequest.Branch:type_name -> petnet.v1.branch.Branch
	12, // 1: petnet.v1.branch.GetBranchResponse.Branch:type_name -> petnet.v1.branch.Branch
	12, // 2: petnet.v1.branch.ListBranchesResponse.Branchs:type_name -> petnet.v1.branch.Branch
	13, // 3: petnet.v1.branch.Branch.Address:type_name -> petnet.v1.profile.Address
	14, // 4: petnet.v1.branch.Branch.Created:type_name -> google.protobuf.Timestamp
	14, // 5: petnet.v1.branch.Branch.Updated:type_name -> google.protobuf.Timestamp
	14, // 6: petnet.v1.branch.Branch.Deleted:type_name -> google.protobuf.Timestamp
	6,  // 7: petnet.v1.branch.BranchService.UpsertBranch:input_type -> petnet.v1.branch.UpsertBranchRequest
	8,  // 8: petnet.v1.branch.BranchService.GetBranch:input_type -> petnet.v1.branch.GetBranchRequest
	10, // 9: petnet.v1.branch.BranchService.ListBranches:input_type -> petnet.v1.branch.ListBranchesRequest
	7,  // 10: petnet.v1.branch.BranchService.UpsertBranch:output_type -> petnet.v1.branch.UpsertBranchResponse
	9,  // 11: petnet.v1.branch.BranchService.GetBranch:output_type -> petnet.v1.branch.GetBranchResponse
	11, // 12: petnet.v1.branch.BranchService.ListBranches:output_type -> petnet.v1.branch.ListBranchesResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v1_branch_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v1_branch_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v1_branch_all_proto_depIdxs = nil
}
