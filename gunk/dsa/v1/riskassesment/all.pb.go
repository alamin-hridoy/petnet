// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v1/riskassesment/all.proto

package riskassesment

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RiskAssesmentQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question *Question `protobuf:"bytes,1,opt,name=Question,json=question,proto3" json:"question,omitempty"`
}

func (x *RiskAssesmentQuestionRequest) Reset() {
	*x = RiskAssesmentQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAssesmentQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssesmentQuestionRequest) ProtoMessage() {}

func (x *RiskAssesmentQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssesmentQuestionRequest.ProtoReflect.Descriptor instead.
func (*RiskAssesmentQuestionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescGZIP(), []int{0}
}

func (x *RiskAssesmentQuestionRequest) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type RiskAssesmentQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question *Question `protobuf:"bytes,1,opt,name=Question,json=question,proto3" json:"question,omitempty"`
}

func (x *RiskAssesmentQuestionResponse) Reset() {
	*x = RiskAssesmentQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAssesmentQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssesmentQuestionResponse) ProtoMessage() {}

func (x *RiskAssesmentQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssesmentQuestionResponse.ProtoReflect.Descriptor instead.
func (*RiskAssesmentQuestionResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescGZIP(), []int{1}
}

func (x *RiskAssesmentQuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type ListQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,1,opt,name=ID,json=qid,proto3" json:"qid,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	OrgID  string `protobuf:"bytes,3,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	QType  string `protobuf:"bytes,4,opt,name=QType,json=qtype,proto3" json:"qtype,omitempty"`
}

func (x *ListQuestionRequest) Reset() {
	*x = ListQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionRequest) ProtoMessage() {}

func (x *ListQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionRequest.ProtoReflect.Descriptor instead.
func (*ListQuestionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescGZIP(), []int{2}
}

func (x *ListQuestionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ListQuestionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListQuestionRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ListQuestionRequest) GetQType() string {
	if x != nil {
		return x.QType
	}
	return ""
}

type ListQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question []*Question `protobuf:"bytes,1,rep,name=Question,json=question,proto3" json:"question,omitempty"`
}

func (x *ListQuestionResponse) Reset() {
	*x = ListQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionResponse) ProtoMessage() {}

func (x *ListQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionResponse.ProtoReflect.Descriptor instead.
func (*ListQuestionResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescGZIP(), []int{3}
}

func (x *ListQuestionResponse) GetQuestion() []*Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID          string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID         string                 `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	QID            string                 `protobuf:"bytes,4,opt,name=QID,json=qid,proto3" json:"qid,omitempty"`
	ANS            string                 `protobuf:"bytes,5,opt,name=ANS,json=ans,proto3" json:"ans,omitempty"`
	QType          string                 `protobuf:"bytes,6,opt,name=QType,json=qtype,proto3" json:"qtype,omitempty"`
	CustomersTotal string                 `protobuf:"bytes,7,opt,name=CustomersTotal,json=customers_total,proto3" json:"customers_total,omitempty"`
	HrTotal        string                 `protobuf:"bytes,8,opt,name=HrTotal,json=hr_total,proto3" json:"hr_total,omitempty"`
	ImpactScore    string                 `protobuf:"bytes,9,opt,name=ImpactScore,json=impact_score,proto3" json:"impact_score,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescGZIP(), []int{4}
}

func (x *Question) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Question) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Question) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Question) GetQID() string {
	if x != nil {
		return x.QID
	}
	return ""
}

func (x *Question) GetANS() string {
	if x != nil {
		return x.ANS
	}
	return ""
}

func (x *Question) GetQType() string {
	if x != nil {
		return x.QType
	}
	return ""
}

func (x *Question) GetCustomersTotal() string {
	if x != nil {
		return x.CustomersTotal
	}
	return ""
}

func (x *Question) GetHrTotal() string {
	if x != nil {
		return x.HrTotal
	}
	return ""
}

func (x *Question) GetImpactScore() string {
	if x != nil {
		return x.ImpactScore
	}
	return ""
}

func (x *Question) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Question) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

var File_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDesc = []byte{
	0x0a, 0x33, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69,
	0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a,
	0x1c, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x72, 0x0a, 0x1d, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xa4, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x71, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x05, 0x51, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x71, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x69, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe3, 0x03, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x51, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x03, 0x71, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x41, 0x4e, 0x53, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03,
	0x61, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x51, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x71, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x48, 0x72,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x68, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2d, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xb5, 0x0e, 0x0a,
	0x14, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x03, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0x92, 0x02, 0x0a, 0x09, 0x20, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x11, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x1a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4a, 0x58, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x51, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2f, 0x0a, 0x2d, 0x1a,
	0x2b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36,
	0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a,
	0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x7b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x49, 0x44,
	0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xd5, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x4d, 0x6c, 0x54, 0x66, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x92, 0x02, 0x0a, 0x09, 0x20, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x11, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x20, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x20, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x58, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x51, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x2f, 0x0a, 0x2d, 0x1a, 0x2b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x1a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6c, 0x74, 0x66, 0x72, 0x69, 0x73,
	0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb2, 0x03,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x9d, 0x02, 0x0a, 0x09, 0x20, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x20, 0x72, 0x69, 0x73, 0x6b, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x1a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x20, 0x72, 0x69,
	0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x5c, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x55, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x33, 0x0a, 0x31, 0x1a, 0x2f, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a,
	0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xba, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6c, 0x54, 0x66, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x9d,
	0x02, 0x0a, 0x09, 0x20, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x20, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x1a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x20, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x5c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x55, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x33, 0x0a, 0x31, 0x1a, 0x2f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6c, 0x74, 0x66, 0x72, 0x69,
	0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00, 0x1a,
	0x03, 0x88, 0x02, 0x00, 0x42, 0x52, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x37, 0x62, 0x72, 0x61, 0x6e,
	0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b,
	0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x72, 0x69, 0x73, 0x6b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8,
	0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_goTypes  = []interface{}{
		(*RiskAssesmentQuestionRequest)(nil),  // 0: petnet.v1.riskassesment.RiskAssesmentQuestionRequest
		(*RiskAssesmentQuestionResponse)(nil), // 1: petnet.v1.riskassesment.RiskAssesmentQuestionResponse
		(*ListQuestionRequest)(nil),           // 2: petnet.v1.riskassesment.ListQuestionRequest
		(*ListQuestionResponse)(nil),          // 3: petnet.v1.riskassesment.ListQuestionResponse
		(*Question)(nil),                      // 4: petnet.v1.riskassesment.Question
		(*timestamppb.Timestamp)(nil),         // 5: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_depIdxs = []int32{
	4, // 0: petnet.v1.riskassesment.RiskAssesmentQuestionRequest.Question:type_name -> petnet.v1.riskassesment.Question
	4, // 1: petnet.v1.riskassesment.RiskAssesmentQuestionResponse.Question:type_name -> petnet.v1.riskassesment.Question
	4, // 2: petnet.v1.riskassesment.ListQuestionResponse.Question:type_name -> petnet.v1.riskassesment.Question
	5, // 3: petnet.v1.riskassesment.Question.Created:type_name -> google.protobuf.Timestamp
	5, // 4: petnet.v1.riskassesment.Question.Updated:type_name -> google.protobuf.Timestamp
	0, // 5: petnet.v1.riskassesment.RiskAssesmentService.UpsertQuestion:input_type -> petnet.v1.riskassesment.RiskAssesmentQuestionRequest
	0, // 6: petnet.v1.riskassesment.RiskAssesmentService.UpsertMlTfQuestion:input_type -> petnet.v1.riskassesment.RiskAssesmentQuestionRequest
	2, // 7: petnet.v1.riskassesment.RiskAssesmentService.ListQuestion:input_type -> petnet.v1.riskassesment.ListQuestionRequest
	2, // 8: petnet.v1.riskassesment.RiskAssesmentService.ListMlTfQuestion:input_type -> petnet.v1.riskassesment.ListQuestionRequest
	1, // 9: petnet.v1.riskassesment.RiskAssesmentService.UpsertQuestion:output_type -> petnet.v1.riskassesment.RiskAssesmentQuestionResponse
	1, // 10: petnet.v1.riskassesment.RiskAssesmentService.UpsertMlTfQuestion:output_type -> petnet.v1.riskassesment.RiskAssesmentQuestionResponse
	3, // 11: petnet.v1.riskassesment.RiskAssesmentService.ListQuestion:output_type -> petnet.v1.riskassesment.ListQuestionResponse
	3, // 12: petnet.v1.riskassesment.RiskAssesmentService.ListMlTfQuestion:output_type -> petnet.v1.riskassesment.ListQuestionResponse
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAssesmentQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAssesmentQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_depIdxs,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v1_riskassesment_all_proto_depIdxs = nil
}
