// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v2/partner/all.proto

package partner

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartnerType int32

const (
	PartnerType_WU   PartnerType = 0
	PartnerType_IR   PartnerType = 1
	PartnerType_TF   PartnerType = 2
	PartnerType_RM   PartnerType = 3
	PartnerType_RIA  PartnerType = 4
	PartnerType_MB   PartnerType = 5
	PartnerType_BPI  PartnerType = 6
	PartnerType_USSC PartnerType = 7
	PartnerType_JPR  PartnerType = 8
	PartnerType_IC   PartnerType = 9
	PartnerType_UNT  PartnerType = 10
	PartnerType_CEB  PartnerType = 11
	PartnerType_WISE PartnerType = 12
	PartnerType_CEBI PartnerType = 13
	PartnerType_AYA  PartnerType = 14
	PartnerType_IE   PartnerType = 15
)

// Enum value maps for PartnerType.
var (
	PartnerType_name = map[int32]string{
		0:  "WU",
		1:  "IR",
		2:  "TF",
		3:  "RM",
		4:  "RIA",
		5:  "MB",
		6:  "BPI",
		7:  "USSC",
		8:  "JPR",
		9:  "IC",
		10: "UNT",
		11: "CEB",
		12: "WISE",
		13: "CEBI",
		14: "AYA",
		15: "IE",
	}
	PartnerType_value = map[string]int32{
		"WU":   0,
		"IR":   1,
		"TF":   2,
		"RM":   3,
		"RIA":  4,
		"MB":   5,
		"BPI":  6,
		"USSC": 7,
		"JPR":  8,
		"IC":   9,
		"UNT":  10,
		"CEB":  11,
		"WISE": 12,
		"CEBI": 13,
		"AYA":  14,
		"IE":   15,
	}
)

func (x PartnerType) Enum() *PartnerType {
	p := new(PartnerType)
	*p = x
	return p
}

func (x PartnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_enumTypes[0].Descriptor()
}

func (PartnerType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_enumTypes[0]
}

func (x PartnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartnerType.Descriptor instead.
func (PartnerType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{0}
}

type PartnerStatusType int32

const (
	PartnerStatusType_DISABLED PartnerStatusType = 0
	PartnerStatusType_PENDING  PartnerStatusType = 1
	PartnerStatusType_ENABLED  PartnerStatusType = 2
)

// Enum value maps for PartnerStatusType.
var (
	PartnerStatusType_name = map[int32]string{
		0: "DISABLED",
		1: "PENDING",
		2: "ENABLED",
	}
	PartnerStatusType_value = map[string]int32{
		"DISABLED": 0,
		"PENDING":  1,
		"ENABLED":  2,
	}
)

func (x PartnerStatusType) Enum() *PartnerStatusType {
	p := new(PartnerStatusType)
	*p = x
	return p
}

func (x PartnerStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartnerStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_enumTypes[1].Descriptor()
}

func (PartnerStatusType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_enumTypes[1]
}

func (x PartnerStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartnerStatusType.Descriptor instead.
func (PartnerStatusType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{1}
}

type CreatePartnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partners *Partners `protobuf:"bytes,1,opt,name=Partners,json=partners,proto3" json:"partners,omitempty"`
}

func (x *CreatePartnersRequest) Reset() {
	*x = CreatePartnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnersRequest) ProtoMessage() {}

func (x *CreatePartnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnersRequest.ProtoReflect.Descriptor instead.
func (*CreatePartnersRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePartnersRequest) GetPartners() *Partners {
	if x != nil {
		return x.Partners
	}
	return nil
}

type CreatePartnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partners *Partners `protobuf:"bytes,1,opt,name=Partners,json=partners,proto3" json:"partners,omitempty"`
}

func (x *CreatePartnersResponse) Reset() {
	*x = CreatePartnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnersResponse) ProtoMessage() {}

func (x *CreatePartnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnersResponse.ProtoReflect.Descriptor instead.
func (*CreatePartnersResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePartnersResponse) GetPartners() *Partners {
	if x != nil {
		return x.Partners
	}
	return nil
}

type UpdatePartnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partners *Partners `protobuf:"bytes,1,opt,name=Partners,json=partners,proto3" json:"partners,omitempty"`
}

func (x *UpdatePartnersRequest) Reset() {
	*x = UpdatePartnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnersRequest) ProtoMessage() {}

func (x *UpdatePartnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnersRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartnersRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePartnersRequest) GetPartners() *Partners {
	if x != nil {
		return x.Partners
	}
	return nil
}

type UpdatePartnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partners *Partners `protobuf:"bytes,1,opt,name=Partners,json=partners,proto3" json:"partners,omitempty"`
}

func (x *UpdatePartnersResponse) Reset() {
	*x = UpdatePartnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnersResponse) ProtoMessage() {}

func (x *UpdatePartnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnersResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartnersResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatePartnersResponse) GetPartners() *Partners {
	if x != nil {
		return x.Partners
	}
	return nil
}

type GetPartnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"type,omitempty"`
}

func (x *GetPartnersRequest) Reset() {
	*x = GetPartnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnersRequest) ProtoMessage() {}

func (x *GetPartnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnersRequest.ProtoReflect.Descriptor instead.
func (*GetPartnersRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{4}
}

func (x *GetPartnersRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *GetPartnersRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Partner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID     string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Type      string                 `protobuf:"bytes,3,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Partner   string                 `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,7,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Status    string                 `protobuf:"bytes,8,opt,name=Status,json=status,proto3" json:"status,omitempty"`
}

func (x *Partner) Reset() {
	*x = Partner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partner) ProtoMessage() {}

func (x *Partner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partner.ProtoReflect.Descriptor instead.
func (*Partner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{5}
}

func (x *Partner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Partner) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Partner) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Partner) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *Partner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Partner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Partner) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Partner) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetPartnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partners *Partners `protobuf:"bytes,1,opt,name=Partners,json=partners,proto3" json:"partners,omitempty"`
}

func (x *GetPartnersResponse) Reset() {
	*x = GetPartnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnersResponse) ProtoMessage() {}

func (x *GetPartnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnersResponse.ProtoReflect.Descriptor instead.
func (*GetPartnersResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{6}
}

func (x *GetPartnersResponse) GetPartners() *Partners {
	if x != nil {
		return x.Partners
	}
	return nil
}

type GetPartnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner *Partner `protobuf:"bytes,1,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
}

func (x *GetPartnerResponse) Reset() {
	*x = GetPartnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerResponse) ProtoMessage() {}

func (x *GetPartnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerResponse.ProtoReflect.Descriptor instead.
func (*GetPartnerResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{7}
}

func (x *GetPartnerResponse) GetPartner() *Partner {
	if x != nil {
		return x.Partner
	}
	return nil
}

type DeletePartnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *DeletePartnerRequest) Reset() {
	*x = DeletePartnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePartnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartnerRequest) ProtoMessage() {}

func (x *DeletePartnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartnerRequest.ProtoReflect.Descriptor instead.
func (*DeletePartnerRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePartnerRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeletePartnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePartnerResponse) Reset() {
	*x = DeletePartnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePartnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartnerResponse) ProtoMessage() {}

func (x *DeletePartnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartnerResponse.ProtoReflect.Descriptor instead.
func (*DeletePartnerResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{9}
}

type ValidatePartnerAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID   string      `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner PartnerType `protobuf:"varint,2,opt,name=Partner,json=partner,proto3,enum=petnet.v2.partner.PartnerType" json:"partner,omitempty"`
}

func (x *ValidatePartnerAccessRequest) Reset() {
	*x = ValidatePartnerAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePartnerAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePartnerAccessRequest) ProtoMessage() {}

func (x *ValidatePartnerAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePartnerAccessRequest.ProtoReflect.Descriptor instead.
func (*ValidatePartnerAccessRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{10}
}

func (x *ValidatePartnerAccessRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ValidatePartnerAccessRequest) GetPartner() PartnerType {
	if x != nil {
		return x.Partner
	}
	return PartnerType_WU
}

type ValidatePartnerAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidatePartnerAccessResponse) Reset() {
	*x = ValidatePartnerAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePartnerAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePartnerAccessResponse) ProtoMessage() {}

func (x *ValidatePartnerAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePartnerAccessResponse.ProtoReflect.Descriptor instead.
func (*ValidatePartnerAccessResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{11}
}

type EnablePartnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID   string      `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner PartnerType `protobuf:"varint,2,opt,name=Partner,json=partner,proto3,enum=petnet.v2.partner.PartnerType" json:"partner,omitempty"`
}

func (x *EnablePartnerRequest) Reset() {
	*x = EnablePartnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePartnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePartnerRequest) ProtoMessage() {}

func (x *EnablePartnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePartnerRequest.ProtoReflect.Descriptor instead.
func (*EnablePartnerRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{12}
}

func (x *EnablePartnerRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *EnablePartnerRequest) GetPartner() PartnerType {
	if x != nil {
		return x.Partner
	}
	return PartnerType_WU
}

type EnablePartnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnablePartnerResponse) Reset() {
	*x = EnablePartnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePartnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePartnerResponse) ProtoMessage() {}

func (x *EnablePartnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePartnerResponse.ProtoReflect.Descriptor instead.
func (*EnablePartnerResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{13}
}

type DisablePartnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID   string      `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner PartnerType `protobuf:"varint,2,opt,name=Partner,json=partner,proto3,enum=petnet.v2.partner.PartnerType" json:"partner,omitempty"`
}

func (x *DisablePartnerRequest) Reset() {
	*x = DisablePartnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePartnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePartnerRequest) ProtoMessage() {}

func (x *DisablePartnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePartnerRequest.ProtoReflect.Descriptor instead.
func (*DisablePartnerRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{14}
}

func (x *DisablePartnerRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *DisablePartnerRequest) GetPartner() PartnerType {
	if x != nil {
		return x.Partner
	}
	return PartnerType_WU
}

type DisablePartnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisablePartnerResponse) Reset() {
	*x = DisablePartnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePartnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePartnerResponse) ProtoMessage() {}

func (x *DisablePartnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePartnerResponse.ProtoReflect.Descriptor instead.
func (*DisablePartnerResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{15}
}

type Partners struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID               string               `protobuf:"bytes,1,opt,name=OrgID,json=id,proto3" json:"id,omitempty"`
	WesternUnionPartner *WesternUnionPartner `protobuf:"bytes,2,opt,name=WesternUnionPartner,json=wu_partner,proto3" json:"wu_partner,omitempty"`
	IRemitPartner       *IRemitPartner       `protobuf:"bytes,3,opt,name=IRemitPartner,json=ir_partner,proto3" json:"ir_partner,omitempty"`
	TransfastPartner    *TransfastPartner    `protobuf:"bytes,4,opt,name=TransfastPartner,json=tf_partner,proto3" json:"tf_partner,omitempty"`
	RemitlyPartner      *RemitlyPartner      `protobuf:"bytes,5,opt,name=RemitlyPartner,json=rm_partner,proto3" json:"rm_partner,omitempty"`
	RiaPartner          *RiaPartner          `protobuf:"bytes,6,opt,name=RiaPartner,json=ria_partner,proto3" json:"ria_partner,omitempty"`
	MetroBankPartner    *MetroBankPartner    `protobuf:"bytes,7,opt,name=MetroBankPartner,json=mb_partner,proto3" json:"mb_partner,omitempty"`
	BPIPartner          *BPIPartner          `protobuf:"bytes,8,opt,name=BPIPartner,json=bpi_partner,proto3" json:"bpi_partner,omitempty"`
	USSCPartner         *USSCPartner         `protobuf:"bytes,9,opt,name=USSCPartner,json=ussc_partner,proto3" json:"ussc_partner,omitempty"`
	JapanRemitPartner   *JapanRemitPartner   `protobuf:"bytes,10,opt,name=JapanRemitPartner,json=jpr_partner,proto3" json:"jpr_partner,omitempty"`
	InstantCashPartner  *InstantCashPartner  `protobuf:"bytes,11,opt,name=InstantCashPartner,json=ic_partner,proto3" json:"ic_partner,omitempty"`
	UnitellerPartner    *UnitellerPartner    `protobuf:"bytes,12,opt,name=UnitellerPartner,json=unt_partner,proto3" json:"unt_partner,omitempty"`
	TransferWisePartner *TransferWisePartner `protobuf:"bytes,13,opt,name=TransferWisePartner,json=wise_partner,proto3" json:"wise_partner,omitempty"`
	CebuanaIntlPartner  *CebuanaIntlPartner  `protobuf:"bytes,14,opt,name=CebuanaIntlPartner,json=cebi_partner,proto3" json:"cebi_partner,omitempty"`
	CebuanaPartner      *CebuanaPartner      `protobuf:"bytes,15,opt,name=CebuanaPartner,json=ceb_partner,proto3" json:"ceb_partner,omitempty"`
	AyannahPartner      *AyannahPartner      `protobuf:"bytes,16,opt,name=AyannahPartner,json=aya_partner,proto3" json:"aya_partner,omitempty"`
	IntelExpressPartner *IntelExpressPartner `protobuf:"bytes,17,opt,name=IntelExpressPartner,json=ie_partner,proto3" json:"ie_partner,omitempty"`
	UpdatedBy           string               `protobuf:"bytes,18,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	// for easy access to all enabled partners
	PartnerStatuses map[string]string `protobuf:"bytes,19,rep,name=PartnerStatuses,json=partner_statuses,proto3" json:"partner_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Partners) Reset() {
	*x = Partners{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partners) ProtoMessage() {}

func (x *Partners) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partners.ProtoReflect.Descriptor instead.
func (*Partners) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{16}
}

func (x *Partners) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Partners) GetWesternUnionPartner() *WesternUnionPartner {
	if x != nil {
		return x.WesternUnionPartner
	}
	return nil
}

func (x *Partners) GetIRemitPartner() *IRemitPartner {
	if x != nil {
		return x.IRemitPartner
	}
	return nil
}

func (x *Partners) GetTransfastPartner() *TransfastPartner {
	if x != nil {
		return x.TransfastPartner
	}
	return nil
}

func (x *Partners) GetRemitlyPartner() *RemitlyPartner {
	if x != nil {
		return x.RemitlyPartner
	}
	return nil
}

func (x *Partners) GetRiaPartner() *RiaPartner {
	if x != nil {
		return x.RiaPartner
	}
	return nil
}

func (x *Partners) GetMetroBankPartner() *MetroBankPartner {
	if x != nil {
		return x.MetroBankPartner
	}
	return nil
}

func (x *Partners) GetBPIPartner() *BPIPartner {
	if x != nil {
		return x.BPIPartner
	}
	return nil
}

func (x *Partners) GetUSSCPartner() *USSCPartner {
	if x != nil {
		return x.USSCPartner
	}
	return nil
}

func (x *Partners) GetJapanRemitPartner() *JapanRemitPartner {
	if x != nil {
		return x.JapanRemitPartner
	}
	return nil
}

func (x *Partners) GetInstantCashPartner() *InstantCashPartner {
	if x != nil {
		return x.InstantCashPartner
	}
	return nil
}

func (x *Partners) GetUnitellerPartner() *UnitellerPartner {
	if x != nil {
		return x.UnitellerPartner
	}
	return nil
}

func (x *Partners) GetTransferWisePartner() *TransferWisePartner {
	if x != nil {
		return x.TransferWisePartner
	}
	return nil
}

func (x *Partners) GetCebuanaIntlPartner() *CebuanaIntlPartner {
	if x != nil {
		return x.CebuanaIntlPartner
	}
	return nil
}

func (x *Partners) GetCebuanaPartner() *CebuanaPartner {
	if x != nil {
		return x.CebuanaPartner
	}
	return nil
}

func (x *Partners) GetAyannahPartner() *AyannahPartner {
	if x != nil {
		return x.AyannahPartner
	}
	return nil
}

func (x *Partners) GetIntelExpressPartner() *IntelExpressPartner {
	if x != nil {
		return x.IntelExpressPartner
	}
	return nil
}

func (x *Partners) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Partners) GetPartnerStatuses() map[string]string {
	if x != nil {
		return x.PartnerStatuses
	}
	return nil
}

type WesternUnionPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Coy        string                 `protobuf:"bytes,2,opt,name=Coy,json=coy,proto3" json:"coy,omitempty"`
	OperatorID string                 `protobuf:"bytes,3,opt,name=OperatorID,json=operator_id,proto3" json:"operator_id,omitempty"`
	TerminalID string                 `protobuf:"bytes,4,opt,name=TerminalID,json=terminal_id,proto3" json:"terminal_id,omitempty"`
	Status     PartnerStatusType      `protobuf:"varint,5,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *WesternUnionPartner) Reset() {
	*x = WesternUnionPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WesternUnionPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WesternUnionPartner) ProtoMessage() {}

func (x *WesternUnionPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WesternUnionPartner.ProtoReflect.Descriptor instead.
func (*WesternUnionPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{17}
}

func (x *WesternUnionPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *WesternUnionPartner) GetCoy() string {
	if x != nil {
		return x.Coy
	}
	return ""
}

func (x *WesternUnionPartner) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *WesternUnionPartner) GetTerminalID() string {
	if x != nil {
		return x.TerminalID
	}
	return ""
}

func (x *WesternUnionPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *WesternUnionPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *WesternUnionPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *WesternUnionPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *WesternUnionPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type JapanRemitPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *JapanRemitPartner) Reset() {
	*x = JapanRemitPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JapanRemitPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JapanRemitPartner) ProtoMessage() {}

func (x *JapanRemitPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JapanRemitPartner.ProtoReflect.Descriptor instead.
func (*JapanRemitPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{18}
}

func (x *JapanRemitPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *JapanRemitPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *JapanRemitPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *JapanRemitPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *JapanRemitPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JapanRemitPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *JapanRemitPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *JapanRemitPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type InstantCashPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *InstantCashPartner) Reset() {
	*x = InstantCashPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantCashPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantCashPartner) ProtoMessage() {}

func (x *InstantCashPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantCashPartner.ProtoReflect.Descriptor instead.
func (*InstantCashPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{19}
}

func (x *InstantCashPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *InstantCashPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *InstantCashPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *InstantCashPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *InstantCashPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *InstantCashPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *InstantCashPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *InstantCashPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type IRemitPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *IRemitPartner) Reset() {
	*x = IRemitPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRemitPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRemitPartner) ProtoMessage() {}

func (x *IRemitPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRemitPartner.ProtoReflect.Descriptor instead.
func (*IRemitPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{20}
}

func (x *IRemitPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *IRemitPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *IRemitPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *IRemitPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *IRemitPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *IRemitPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *IRemitPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *IRemitPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type TransfastPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *TransfastPartner) Reset() {
	*x = TransfastPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransfastPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransfastPartner) ProtoMessage() {}

func (x *TransfastPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransfastPartner.ProtoReflect.Descriptor instead.
func (*TransfastPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{21}
}

func (x *TransfastPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TransfastPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *TransfastPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *TransfastPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *TransfastPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TransfastPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *TransfastPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *TransfastPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type RemitlyPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *RemitlyPartner) Reset() {
	*x = RemitlyPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemitlyPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemitlyPartner) ProtoMessage() {}

func (x *RemitlyPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemitlyPartner.ProtoReflect.Descriptor instead.
func (*RemitlyPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{22}
}

func (x *RemitlyPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RemitlyPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *RemitlyPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *RemitlyPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *RemitlyPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RemitlyPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *RemitlyPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RemitlyPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type RiaPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *RiaPartner) Reset() {
	*x = RiaPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiaPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiaPartner) ProtoMessage() {}

func (x *RiaPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiaPartner.ProtoReflect.Descriptor instead.
func (*RiaPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{23}
}

func (x *RiaPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RiaPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *RiaPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *RiaPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *RiaPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RiaPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *RiaPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RiaPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type MetroBankPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *MetroBankPartner) Reset() {
	*x = MetroBankPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetroBankPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetroBankPartner) ProtoMessage() {}

func (x *MetroBankPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetroBankPartner.ProtoReflect.Descriptor instead.
func (*MetroBankPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{24}
}

func (x *MetroBankPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetroBankPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *MetroBankPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *MetroBankPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *MetroBankPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *MetroBankPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *MetroBankPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *MetroBankPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type BPIPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *BPIPartner) Reset() {
	*x = BPIPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPIPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPIPartner) ProtoMessage() {}

func (x *BPIPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPIPartner.ProtoReflect.Descriptor instead.
func (*BPIPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{25}
}

func (x *BPIPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BPIPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *BPIPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *BPIPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *BPIPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *BPIPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *BPIPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *BPIPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type USSCPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *USSCPartner) Reset() {
	*x = USSCPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USSCPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USSCPartner) ProtoMessage() {}

func (x *USSCPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USSCPartner.ProtoReflect.Descriptor instead.
func (*USSCPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{26}
}

func (x *USSCPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *USSCPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *USSCPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *USSCPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *USSCPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *USSCPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *USSCPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *USSCPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type UnitellerPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *UnitellerPartner) Reset() {
	*x = UnitellerPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitellerPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitellerPartner) ProtoMessage() {}

func (x *UnitellerPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitellerPartner.ProtoReflect.Descriptor instead.
func (*UnitellerPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{27}
}

func (x *UnitellerPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UnitellerPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *UnitellerPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *UnitellerPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *UnitellerPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UnitellerPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *UnitellerPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *UnitellerPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type CebuanaPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *CebuanaPartner) Reset() {
	*x = CebuanaPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CebuanaPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CebuanaPartner) ProtoMessage() {}

func (x *CebuanaPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CebuanaPartner.ProtoReflect.Descriptor instead.
func (*CebuanaPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{28}
}

func (x *CebuanaPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CebuanaPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *CebuanaPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *CebuanaPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *CebuanaPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CebuanaPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *CebuanaPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CebuanaPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type TransferWisePartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *TransferWisePartner) Reset() {
	*x = TransferWisePartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferWisePartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWisePartner) ProtoMessage() {}

func (x *TransferWisePartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWisePartner.ProtoReflect.Descriptor instead.
func (*TransferWisePartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{29}
}

func (x *TransferWisePartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TransferWisePartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *TransferWisePartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *TransferWisePartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *TransferWisePartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TransferWisePartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *TransferWisePartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *TransferWisePartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type CebuanaIntlPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *CebuanaIntlPartner) Reset() {
	*x = CebuanaIntlPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CebuanaIntlPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CebuanaIntlPartner) ProtoMessage() {}

func (x *CebuanaIntlPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CebuanaIntlPartner.ProtoReflect.Descriptor instead.
func (*CebuanaIntlPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{30}
}

func (x *CebuanaIntlPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CebuanaIntlPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *CebuanaIntlPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *CebuanaIntlPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *CebuanaIntlPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CebuanaIntlPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *CebuanaIntlPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CebuanaIntlPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type AyannahPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *AyannahPartner) Reset() {
	*x = AyannahPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AyannahPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AyannahPartner) ProtoMessage() {}

func (x *AyannahPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AyannahPartner.ProtoReflect.Descriptor instead.
func (*AyannahPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{31}
}

func (x *AyannahPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AyannahPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *AyannahPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *AyannahPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *AyannahPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AyannahPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *AyannahPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *AyannahPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type IntelExpressPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Param1    string                 `protobuf:"bytes,2,opt,name=Param1,json=param1,proto3" json:"param1,omitempty"`
	Param2    string                 `protobuf:"bytes,3,opt,name=Param2,json=param2,proto3" json:"param2,omitempty"`
	Status    PartnerStatusType      `protobuf:"varint,4,opt,name=Status,json=enabled,proto3,enum=petnet.v2.partner.PartnerStatusType" json:"enabled,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=startdate,proto3" json:"startdate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=enddate,proto3" json:"enddate,omitempty"`
}

func (x *IntelExpressPartner) Reset() {
	*x = IntelExpressPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntelExpressPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntelExpressPartner) ProtoMessage() {}

func (x *IntelExpressPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntelExpressPartner.ProtoReflect.Descriptor instead.
func (*IntelExpressPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP(), []int{32}
}

func (x *IntelExpressPartner) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *IntelExpressPartner) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *IntelExpressPartner) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *IntelExpressPartner) GetStatus() PartnerStatusType {
	if x != nil {
		return x.Status
	}
	return PartnerStatusType_DISABLED
}

func (x *IntelExpressPartner) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *IntelExpressPartner) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *IntelExpressPartner) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *IntelExpressPartner) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

var File_brank_as_petnet_gunk_dsa_v2_partner_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x64, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x65, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x64,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x65, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5f, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe9, 0x02, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5e, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x3a, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x1f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x27, 0x0a, 0x1d, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x1f,
	0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x88, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x07,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x20, 0x0a, 0x16, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe1, 0x0c, 0x0a,
	0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x57, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x77, 0x75, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x49, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x49, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x69, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x74, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x6c,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x0a, 0x52, 0x69, 0x61, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x69, 0x61, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x72, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x10,
	0x4d, 0x65, 0x74, 0x72, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x6f,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x42, 0x50, 0x49, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x50, 0x49, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x62, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x0b, 0x55, 0x53, 0x53, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x55, 0x53, 0x53, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x75, 0x73, 0x73, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x11, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x4a, 0x61,
	0x70, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6a, 0x70, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x61, 0x73, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x43, 0x61, 0x73, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x69, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x69, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x77, 0x69,
	0x73, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x12, 0x43, 0x65,
	0x62, 0x75, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x74, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x62, 0x75, 0x61,
	0x6e, 0x61, 0x49, 0x6e, 0x74, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x65, 0x62, 0x69, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x43, 0x65, 0x62, 0x75, 0x61,
	0x6e, 0x61, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x62, 0x75, 0x61, 0x6e, 0x61, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x63, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x41,
	0x79, 0x61, 0x6e, 0x6e, 0x61, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x79, 0x61, 0x6e, 0x6e, 0x61, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x61, 0x79, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12,
	0x5b, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x69, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x67, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x1a, 0x36, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x88, 0x04, 0x0a, 0x13, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x43, 0x6f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x63,
	0x6f, 0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd6, 0x03, 0x0a, 0x11,
	0x4a, 0x61, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xd7, 0x03, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x43, 0x61, 0x73, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12,
	0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd2,
	0x03, 0x0a, 0x0d, 0x49, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xd5, 0x03, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd3, 0x03, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xcf, 0x03, 0x0a, 0x0a, 0x52, 0x69, 0x61, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xd5, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x42, 0x61, 0x6e,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xcf, 0x03, 0x0a, 0x0a,
	0x42, 0x50, 0x49, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd0, 0x03,
	0x0a, 0x0b, 0x55, 0x53, 0x53, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xd5, 0x03, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x43, 0x65, 0x62,
	0x75, 0x61, 0x6e, 0x61, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12,
	0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd8,
	0x03, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x69, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd7, 0x03, 0x0a, 0x12, 0x43, 0x65,
	0x62, 0x75, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x74, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x41, 0x79, 0x61, 0x6e, 0x6e, 0x61, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd8, 0x03, 0x0a, 0x13, 0x49, 0x6e,
	0x74, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x31, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x2a, 0xdd, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x02, 0x57, 0x55, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0a, 0x0a, 0x02, 0x49, 0x52, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02,
	0x54, 0x46, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x52, 0x4d, 0x10, 0x03,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x52, 0x49, 0x41, 0x10, 0x04, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0a, 0x0a, 0x02, 0x4d, 0x42, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a,
	0x03, 0x42, 0x50, 0x49, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x55, 0x53,
	0x53, 0x43, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x4a, 0x50, 0x52, 0x10,
	0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x49, 0x43, 0x10, 0x09, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0b, 0x0a, 0x03, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b,
	0x0a, 0x03, 0x43, 0x45, 0x42, 0x10, 0x0b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x57,
	0x49, 0x53, 0x45, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x43, 0x45, 0x42,
	0x49, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41, 0x59, 0x41, 0x10, 0x0e,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x49, 0x45, 0x10, 0x0f, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4b, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18,
	0x00, 0x32, 0xc3, 0x1a, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xb1, 0x03, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x93, 0x02, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x2e, 0x1a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e,
	0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x73, 0x61, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb1, 0x03, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc5, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x93, 0x02, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x1a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x73,
	0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x59, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x95, 0x03, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8c, 0x02, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x2e, 0x1a, 0x1f, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x49,
	0x44, 0x2e, 0x4a, 0x56, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2d, 0x0a, 0x2b, 0x1a,
	0x29, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x8f, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xae, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x08,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x0c, 0x47, 0x65, 0x74, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x1a, 0x1e, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x6f,
	0x72, 0x67, 0x20, 0x49, 0x44, 0x2e, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61,
	0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x91, 0x03, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x85, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x1a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x4a, 0x58, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x51, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x12, 0x2f, 0x0a, 0x2d, 0x1a, 0x2b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc6, 0x03, 0x0a, 0x15, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0x9b, 0x02, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x1a, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x4a, 0x60, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35,
	0x1a, 0x33, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28,
	0x00, 0x30, 0x00, 0x12, 0x99, 0x03, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0x88, 0x02, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x1a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x2e, 0x4a, 0x58, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x51, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x12, 0x2f, 0x0a, 0x2d, 0x1a, 0x2b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xa0, 0x03, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x28, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0x8b, 0x02, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x10,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x1a, 0x18, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x2e, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x28, 0x00,
	0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x46, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x2b, 0x62,
	0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67,
	0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x3b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00,
	0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 34)
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_goTypes   = []interface{}{
		(PartnerType)(0),                      // 0: petnet.v2.partner.PartnerType
		(PartnerStatusType)(0),                // 1: petnet.v2.partner.PartnerStatusType
		(*CreatePartnersRequest)(nil),         // 2: petnet.v2.partner.CreatePartnersRequest
		(*CreatePartnersResponse)(nil),        // 3: petnet.v2.partner.CreatePartnersResponse
		(*UpdatePartnersRequest)(nil),         // 4: petnet.v2.partner.UpdatePartnersRequest
		(*UpdatePartnersResponse)(nil),        // 5: petnet.v2.partner.UpdatePartnersResponse
		(*GetPartnersRequest)(nil),            // 6: petnet.v2.partner.GetPartnersRequest
		(*Partner)(nil),                       // 7: petnet.v2.partner.Partner
		(*GetPartnersResponse)(nil),           // 8: petnet.v2.partner.GetPartnersResponse
		(*GetPartnerResponse)(nil),            // 9: petnet.v2.partner.GetPartnerResponse
		(*DeletePartnerRequest)(nil),          // 10: petnet.v2.partner.DeletePartnerRequest
		(*DeletePartnerResponse)(nil),         // 11: petnet.v2.partner.DeletePartnerResponse
		(*ValidatePartnerAccessRequest)(nil),  // 12: petnet.v2.partner.ValidatePartnerAccessRequest
		(*ValidatePartnerAccessResponse)(nil), // 13: petnet.v2.partner.ValidatePartnerAccessResponse
		(*EnablePartnerRequest)(nil),          // 14: petnet.v2.partner.EnablePartnerRequest
		(*EnablePartnerResponse)(nil),         // 15: petnet.v2.partner.EnablePartnerResponse
		(*DisablePartnerRequest)(nil),         // 16: petnet.v2.partner.DisablePartnerRequest
		(*DisablePartnerResponse)(nil),        // 17: petnet.v2.partner.DisablePartnerResponse
		(*Partners)(nil),                      // 18: petnet.v2.partner.Partners
		(*WesternUnionPartner)(nil),           // 19: petnet.v2.partner.WesternUnionPartner
		(*JapanRemitPartner)(nil),             // 20: petnet.v2.partner.JapanRemitPartner
		(*InstantCashPartner)(nil),            // 21: petnet.v2.partner.InstantCashPartner
		(*IRemitPartner)(nil),                 // 22: petnet.v2.partner.IRemitPartner
		(*TransfastPartner)(nil),              // 23: petnet.v2.partner.TransfastPartner
		(*RemitlyPartner)(nil),                // 24: petnet.v2.partner.RemitlyPartner
		(*RiaPartner)(nil),                    // 25: petnet.v2.partner.RiaPartner
		(*MetroBankPartner)(nil),              // 26: petnet.v2.partner.MetroBankPartner
		(*BPIPartner)(nil),                    // 27: petnet.v2.partner.BPIPartner
		(*USSCPartner)(nil),                   // 28: petnet.v2.partner.USSCPartner
		(*UnitellerPartner)(nil),              // 29: petnet.v2.partner.UnitellerPartner
		(*CebuanaPartner)(nil),                // 30: petnet.v2.partner.CebuanaPartner
		(*TransferWisePartner)(nil),           // 31: petnet.v2.partner.TransferWisePartner
		(*CebuanaIntlPartner)(nil),            // 32: petnet.v2.partner.CebuanaIntlPartner
		(*AyannahPartner)(nil),                // 33: petnet.v2.partner.AyannahPartner
		(*IntelExpressPartner)(nil),           // 34: petnet.v2.partner.IntelExpressPartner
		nil,                                   // 35: petnet.v2.partner.Partners.PartnerStatusesEntry
		(*timestamppb.Timestamp)(nil),         // 36: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_depIdxs = []int32{
	18,  // 0: petnet.v2.partner.CreatePartnersRequest.Partners:type_name -> petnet.v2.partner.Partners
	18,  // 1: petnet.v2.partner.CreatePartnersResponse.Partners:type_name -> petnet.v2.partner.Partners
	18,  // 2: petnet.v2.partner.UpdatePartnersRequest.Partners:type_name -> petnet.v2.partner.Partners
	18,  // 3: petnet.v2.partner.UpdatePartnersResponse.Partners:type_name -> petnet.v2.partner.Partners
	36,  // 4: petnet.v2.partner.Partner.Created:type_name -> google.protobuf.Timestamp
	36,  // 5: petnet.v2.partner.Partner.Updated:type_name -> google.protobuf.Timestamp
	18,  // 6: petnet.v2.partner.GetPartnersResponse.Partners:type_name -> petnet.v2.partner.Partners
	7,   // 7: petnet.v2.partner.GetPartnerResponse.Partner:type_name -> petnet.v2.partner.Partner
	0,   // 8: petnet.v2.partner.ValidatePartnerAccessRequest.Partner:type_name -> petnet.v2.partner.PartnerType
	0,   // 9: petnet.v2.partner.EnablePartnerRequest.Partner:type_name -> petnet.v2.partner.PartnerType
	0,   // 10: petnet.v2.partner.DisablePartnerRequest.Partner:type_name -> petnet.v2.partner.PartnerType
	19,  // 11: petnet.v2.partner.Partners.WesternUnionPartner:type_name -> petnet.v2.partner.WesternUnionPartner
	22,  // 12: petnet.v2.partner.Partners.IRemitPartner:type_name -> petnet.v2.partner.IRemitPartner
	23,  // 13: petnet.v2.partner.Partners.TransfastPartner:type_name -> petnet.v2.partner.TransfastPartner
	24,  // 14: petnet.v2.partner.Partners.RemitlyPartner:type_name -> petnet.v2.partner.RemitlyPartner
	25,  // 15: petnet.v2.partner.Partners.RiaPartner:type_name -> petnet.v2.partner.RiaPartner
	26,  // 16: petnet.v2.partner.Partners.MetroBankPartner:type_name -> petnet.v2.partner.MetroBankPartner
	27,  // 17: petnet.v2.partner.Partners.BPIPartner:type_name -> petnet.v2.partner.BPIPartner
	28,  // 18: petnet.v2.partner.Partners.USSCPartner:type_name -> petnet.v2.partner.USSCPartner
	20,  // 19: petnet.v2.partner.Partners.JapanRemitPartner:type_name -> petnet.v2.partner.JapanRemitPartner
	21,  // 20: petnet.v2.partner.Partners.InstantCashPartner:type_name -> petnet.v2.partner.InstantCashPartner
	29,  // 21: petnet.v2.partner.Partners.UnitellerPartner:type_name -> petnet.v2.partner.UnitellerPartner
	31,  // 22: petnet.v2.partner.Partners.TransferWisePartner:type_name -> petnet.v2.partner.TransferWisePartner
	32,  // 23: petnet.v2.partner.Partners.CebuanaIntlPartner:type_name -> petnet.v2.partner.CebuanaIntlPartner
	30,  // 24: petnet.v2.partner.Partners.CebuanaPartner:type_name -> petnet.v2.partner.CebuanaPartner
	33,  // 25: petnet.v2.partner.Partners.AyannahPartner:type_name -> petnet.v2.partner.AyannahPartner
	34,  // 26: petnet.v2.partner.Partners.IntelExpressPartner:type_name -> petnet.v2.partner.IntelExpressPartner
	35,  // 27: petnet.v2.partner.Partners.PartnerStatuses:type_name -> petnet.v2.partner.Partners.PartnerStatusesEntry
	1,   // 28: petnet.v2.partner.WesternUnionPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 29: petnet.v2.partner.WesternUnionPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 30: petnet.v2.partner.WesternUnionPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 31: petnet.v2.partner.WesternUnionPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 32: petnet.v2.partner.WesternUnionPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 33: petnet.v2.partner.JapanRemitPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 34: petnet.v2.partner.JapanRemitPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 35: petnet.v2.partner.JapanRemitPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 36: petnet.v2.partner.JapanRemitPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 37: petnet.v2.partner.JapanRemitPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 38: petnet.v2.partner.InstantCashPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 39: petnet.v2.partner.InstantCashPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 40: petnet.v2.partner.InstantCashPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 41: petnet.v2.partner.InstantCashPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 42: petnet.v2.partner.InstantCashPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 43: petnet.v2.partner.IRemitPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 44: petnet.v2.partner.IRemitPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 45: petnet.v2.partner.IRemitPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 46: petnet.v2.partner.IRemitPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 47: petnet.v2.partner.IRemitPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 48: petnet.v2.partner.TransfastPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 49: petnet.v2.partner.TransfastPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 50: petnet.v2.partner.TransfastPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 51: petnet.v2.partner.TransfastPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 52: petnet.v2.partner.TransfastPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 53: petnet.v2.partner.RemitlyPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 54: petnet.v2.partner.RemitlyPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 55: petnet.v2.partner.RemitlyPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 56: petnet.v2.partner.RemitlyPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 57: petnet.v2.partner.RemitlyPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 58: petnet.v2.partner.RiaPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 59: petnet.v2.partner.RiaPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 60: petnet.v2.partner.RiaPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 61: petnet.v2.partner.RiaPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 62: petnet.v2.partner.RiaPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 63: petnet.v2.partner.MetroBankPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 64: petnet.v2.partner.MetroBankPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 65: petnet.v2.partner.MetroBankPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 66: petnet.v2.partner.MetroBankPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 67: petnet.v2.partner.MetroBankPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 68: petnet.v2.partner.BPIPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 69: petnet.v2.partner.BPIPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 70: petnet.v2.partner.BPIPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 71: petnet.v2.partner.BPIPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 72: petnet.v2.partner.BPIPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 73: petnet.v2.partner.USSCPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 74: petnet.v2.partner.USSCPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 75: petnet.v2.partner.USSCPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 76: petnet.v2.partner.USSCPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 77: petnet.v2.partner.USSCPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 78: petnet.v2.partner.UnitellerPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 79: petnet.v2.partner.UnitellerPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 80: petnet.v2.partner.UnitellerPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 81: petnet.v2.partner.UnitellerPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 82: petnet.v2.partner.UnitellerPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 83: petnet.v2.partner.CebuanaPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 84: petnet.v2.partner.CebuanaPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 85: petnet.v2.partner.CebuanaPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 86: petnet.v2.partner.CebuanaPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 87: petnet.v2.partner.CebuanaPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 88: petnet.v2.partner.TransferWisePartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 89: petnet.v2.partner.TransferWisePartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 90: petnet.v2.partner.TransferWisePartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 91: petnet.v2.partner.TransferWisePartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 92: petnet.v2.partner.TransferWisePartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 93: petnet.v2.partner.CebuanaIntlPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 94: petnet.v2.partner.CebuanaIntlPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 95: petnet.v2.partner.CebuanaIntlPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 96: petnet.v2.partner.CebuanaIntlPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 97: petnet.v2.partner.CebuanaIntlPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 98: petnet.v2.partner.AyannahPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 99: petnet.v2.partner.AyannahPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 100: petnet.v2.partner.AyannahPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 101: petnet.v2.partner.AyannahPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 102: petnet.v2.partner.AyannahPartner.EndDate:type_name -> google.protobuf.Timestamp
	1,   // 103: petnet.v2.partner.IntelExpressPartner.Status:type_name -> petnet.v2.partner.PartnerStatusType
	36,  // 104: petnet.v2.partner.IntelExpressPartner.Created:type_name -> google.protobuf.Timestamp
	36,  // 105: petnet.v2.partner.IntelExpressPartner.Updated:type_name -> google.protobuf.Timestamp
	36,  // 106: petnet.v2.partner.IntelExpressPartner.StartDate:type_name -> google.protobuf.Timestamp
	36,  // 107: petnet.v2.partner.IntelExpressPartner.EndDate:type_name -> google.protobuf.Timestamp
	2,   // 108: petnet.v2.partner.PartnerService.CreatePartners:input_type -> petnet.v2.partner.CreatePartnersRequest
	4,   // 109: petnet.v2.partner.PartnerService.UpdatePartners:input_type -> petnet.v2.partner.UpdatePartnersRequest
	6,   // 110: petnet.v2.partner.PartnerService.GetPartners:input_type -> petnet.v2.partner.GetPartnersRequest
	6,   // 111: petnet.v2.partner.PartnerService.GetPartner:input_type -> petnet.v2.partner.GetPartnersRequest
	10,  // 112: petnet.v2.partner.PartnerService.DeletePartner:input_type -> petnet.v2.partner.DeletePartnerRequest
	12,  // 113: petnet.v2.partner.PartnerService.ValidatePartnerAccess:input_type -> petnet.v2.partner.ValidatePartnerAccessRequest
	14,  // 114: petnet.v2.partner.PartnerService.EnablePartner:input_type -> petnet.v2.partner.EnablePartnerRequest
	16,  // 115: petnet.v2.partner.PartnerService.DisablePartner:input_type -> petnet.v2.partner.DisablePartnerRequest
	3,   // 116: petnet.v2.partner.PartnerService.CreatePartners:output_type -> petnet.v2.partner.CreatePartnersResponse
	5,   // 117: petnet.v2.partner.PartnerService.UpdatePartners:output_type -> petnet.v2.partner.UpdatePartnersResponse
	8,   // 118: petnet.v2.partner.PartnerService.GetPartners:output_type -> petnet.v2.partner.GetPartnersResponse
	9,   // 119: petnet.v2.partner.PartnerService.GetPartner:output_type -> petnet.v2.partner.GetPartnerResponse
	11,  // 120: petnet.v2.partner.PartnerService.DeletePartner:output_type -> petnet.v2.partner.DeletePartnerResponse
	13,  // 121: petnet.v2.partner.PartnerService.ValidatePartnerAccess:output_type -> petnet.v2.partner.ValidatePartnerAccessResponse
	15,  // 122: petnet.v2.partner.PartnerService.EnablePartner:output_type -> petnet.v2.partner.EnablePartnerResponse
	17,  // 123: petnet.v2.partner.PartnerService.DisablePartner:output_type -> petnet.v2.partner.DisablePartnerResponse
	116, // [116:124] is the sub-list for method output_type
	108, // [108:116] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v2_partner_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePartnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePartnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePartnerAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePartnerAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePartnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePartnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisablePartnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisablePartnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partners); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WesternUnionPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JapanRemitPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantCashPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRemitPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransfastPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemitlyPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiaPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetroBankPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPIPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USSCPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitellerPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CebuanaPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferWisePartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CebuanaIntlPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AyannahPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntelExpressPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v2_partner_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v2_partner_all_proto_depIdxs = nil
}
