// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fees

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrgFeesServiceClient is the client API for OrgFeesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgFeesServiceClient interface {
	// Upsert org fee.
	UpsertFee(ctx context.Context, in *UpsertFeeRequest, opts ...grpc.CallOption) (*UpsertFeeResponse, error)
	// List org fees.
	ListFees(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (*ListFeesResponse, error)
	// Upsert org fee.
	UpsertRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*UpsertRateResponse, error)
	// List fees rates.
	ListRates(ctx context.Context, in *ListRatesRequest, opts ...grpc.CallOption) (*ListRatesResponse, error)
}

type orgFeesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgFeesServiceClient(cc grpc.ClientConnInterface) OrgFeesServiceClient {
	return &orgFeesServiceClient{cc}
}

func (c *orgFeesServiceClient) UpsertFee(ctx context.Context, in *UpsertFeeRequest, opts ...grpc.CallOption) (*UpsertFeeResponse, error) {
	out := new(UpsertFeeResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.fees.OrgFeesService/UpsertFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgFeesServiceClient) ListFees(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (*ListFeesResponse, error) {
	out := new(ListFeesResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.fees.OrgFeesService/ListFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgFeesServiceClient) UpsertRate(ctx context.Context, in *UpsertRateRequest, opts ...grpc.CallOption) (*UpsertRateResponse, error) {
	out := new(UpsertRateResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.fees.OrgFeesService/UpsertRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgFeesServiceClient) ListRates(ctx context.Context, in *ListRatesRequest, opts ...grpc.CallOption) (*ListRatesResponse, error) {
	out := new(ListRatesResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.fees.OrgFeesService/ListRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgFeesServiceServer is the server API for OrgFeesService service.
// All implementations must embed UnimplementedOrgFeesServiceServer
// for forward compatibility
type OrgFeesServiceServer interface {
	// Upsert org fee.
	UpsertFee(context.Context, *UpsertFeeRequest) (*UpsertFeeResponse, error)
	// List org fees.
	ListFees(context.Context, *ListFeesRequest) (*ListFeesResponse, error)
	// Upsert org fee.
	UpsertRate(context.Context, *UpsertRateRequest) (*UpsertRateResponse, error)
	// List fees rates.
	ListRates(context.Context, *ListRatesRequest) (*ListRatesResponse, error)
	mustEmbedUnimplementedOrgFeesServiceServer()
}

// UnimplementedOrgFeesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrgFeesServiceServer struct{}

func (UnimplementedOrgFeesServiceServer) UpsertFee(context.Context, *UpsertFeeRequest) (*UpsertFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertFee not implemented")
}

func (UnimplementedOrgFeesServiceServer) ListFees(context.Context, *ListFeesRequest) (*ListFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFees not implemented")
}

func (UnimplementedOrgFeesServiceServer) UpsertRate(context.Context, *UpsertRateRequest) (*UpsertRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRate not implemented")
}

func (UnimplementedOrgFeesServiceServer) ListRates(context.Context, *ListRatesRequest) (*ListRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRates not implemented")
}
func (UnimplementedOrgFeesServiceServer) mustEmbedUnimplementedOrgFeesServiceServer() {}

// UnsafeOrgFeesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgFeesServiceServer will
// result in compilation errors.
type UnsafeOrgFeesServiceServer interface {
	mustEmbedUnimplementedOrgFeesServiceServer()
}

func RegisterOrgFeesServiceServer(s grpc.ServiceRegistrar, srv OrgFeesServiceServer) {
	s.RegisterService(&OrgFeesService_ServiceDesc, srv)
}

func _OrgFeesService_UpsertFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgFeesServiceServer).UpsertFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.fees.OrgFeesService/UpsertFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgFeesServiceServer).UpsertFee(ctx, req.(*UpsertFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgFeesService_ListFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgFeesServiceServer).ListFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.fees.OrgFeesService/ListFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgFeesServiceServer).ListFees(ctx, req.(*ListFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgFeesService_UpsertRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgFeesServiceServer).UpsertRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.fees.OrgFeesService/UpsertRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgFeesServiceServer).UpsertRate(ctx, req.(*UpsertRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgFeesService_ListRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgFeesServiceServer).ListRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.fees.OrgFeesService/ListRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgFeesServiceServer).ListRates(ctx, req.(*ListRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgFeesService_ServiceDesc is the grpc.ServiceDesc for OrgFeesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgFeesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v2.fees.OrgFeesService",
	HandlerType: (*OrgFeesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertFee",
			Handler:    _OrgFeesService_UpsertFee_Handler,
		},
		{
			MethodName: "ListFees",
			Handler:    _OrgFeesService_ListFees_Handler,
		},
		{
			MethodName: "UpsertRate",
			Handler:    _OrgFeesService_UpsertRate_Handler,
		},
		{
			MethodName: "ListRates",
			Handler:    _OrgFeesService_ListRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v2/fees/all.proto",
}
