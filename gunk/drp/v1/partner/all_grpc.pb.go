// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package partner

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemitPartnerServiceClient is the client API for RemitPartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemitPartnerServiceClient interface {
	// List Remittance Partners.
	RemitPartners(ctx context.Context, in *RemitPartnersRequest, opts ...grpc.CallOption) (*RemitPartnersResponse, error)
	// Remittance Partners Input Guide.
	InputGuide(ctx context.Context, in *InputGuideRequest, opts ...grpc.CallOption) (*InputGuideResponse, error)
	// get partners remco id
	GetPartnersRemco(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPartnersRemcoResponse, error)
}

type remitPartnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemitPartnerServiceClient(cc grpc.ClientConnInterface) RemitPartnerServiceClient {
	return &remitPartnerServiceClient{cc}
}

func (c *remitPartnerServiceClient) RemitPartners(ctx context.Context, in *RemitPartnersRequest, opts ...grpc.CallOption) (*RemitPartnersResponse, error) {
	out := new(RemitPartnersResponse)
	err := c.cc.Invoke(ctx, "/partner.RemitPartnerService/RemitPartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remitPartnerServiceClient) InputGuide(ctx context.Context, in *InputGuideRequest, opts ...grpc.CallOption) (*InputGuideResponse, error) {
	out := new(InputGuideResponse)
	err := c.cc.Invoke(ctx, "/partner.RemitPartnerService/InputGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remitPartnerServiceClient) GetPartnersRemco(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPartnersRemcoResponse, error) {
	out := new(GetPartnersRemcoResponse)
	err := c.cc.Invoke(ctx, "/partner.RemitPartnerService/GetPartnersRemco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemitPartnerServiceServer is the server API for RemitPartnerService service.
// All implementations must embed UnimplementedRemitPartnerServiceServer
// for forward compatibility
type RemitPartnerServiceServer interface {
	// List Remittance Partners.
	RemitPartners(context.Context, *RemitPartnersRequest) (*RemitPartnersResponse, error)
	// Remittance Partners Input Guide.
	InputGuide(context.Context, *InputGuideRequest) (*InputGuideResponse, error)
	// get partners remco id
	GetPartnersRemco(context.Context, *emptypb.Empty) (*GetPartnersRemcoResponse, error)
	mustEmbedUnimplementedRemitPartnerServiceServer()
}

// UnimplementedRemitPartnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemitPartnerServiceServer struct{}

func (UnimplementedRemitPartnerServiceServer) RemitPartners(context.Context, *RemitPartnersRequest) (*RemitPartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemitPartners not implemented")
}

func (UnimplementedRemitPartnerServiceServer) InputGuide(context.Context, *InputGuideRequest) (*InputGuideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputGuide not implemented")
}

func (UnimplementedRemitPartnerServiceServer) GetPartnersRemco(context.Context, *emptypb.Empty) (*GetPartnersRemcoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnersRemco not implemented")
}
func (UnimplementedRemitPartnerServiceServer) mustEmbedUnimplementedRemitPartnerServiceServer() {}

// UnsafeRemitPartnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemitPartnerServiceServer will
// result in compilation errors.
type UnsafeRemitPartnerServiceServer interface {
	mustEmbedUnimplementedRemitPartnerServiceServer()
}

func RegisterRemitPartnerServiceServer(s grpc.ServiceRegistrar, srv RemitPartnerServiceServer) {
	s.RegisterService(&RemitPartnerService_ServiceDesc, srv)
}

func _RemitPartnerService_RemitPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemitPartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemitPartnerServiceServer).RemitPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.RemitPartnerService/RemitPartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemitPartnerServiceServer).RemitPartners(ctx, req.(*RemitPartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemitPartnerService_InputGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemitPartnerServiceServer).InputGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.RemitPartnerService/InputGuide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemitPartnerServiceServer).InputGuide(ctx, req.(*InputGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemitPartnerService_GetPartnersRemco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemitPartnerServiceServer).GetPartnersRemco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.RemitPartnerService/GetPartnersRemco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemitPartnerServiceServer).GetPartnersRemco(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RemitPartnerService_ServiceDesc is the grpc.ServiceDesc for RemitPartnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemitPartnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partner.RemitPartnerService",
	HandlerType: (*RemitPartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemitPartners",
			Handler:    _RemitPartnerService_RemitPartners_Handler,
		},
		{
			MethodName: "InputGuide",
			Handler:    _RemitPartnerService_InputGuide_Handler,
		},
		{
			MethodName: "GetPartnersRemco",
			Handler:    _RemitPartnerService_GetPartnersRemco_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/partner/all.proto",
}
