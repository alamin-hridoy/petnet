// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package microinsurance

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroInsuranceServiceClient is the client API for MicroInsuranceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroInsuranceServiceClient interface {
	// Transact ...
	Transact(ctx context.Context, in *TransactRequest, opts ...grpc.CallOption) (*Insurance, error)
	// GetReprint ...
	GetReprint(ctx context.Context, in *GetReprintRequest, opts ...grpc.CallOption) (*Insurance, error)
	// RetryTransaction ...
	RetryTransaction(ctx context.Context, in *RetryTransactionRequest, opts ...grpc.CallOption) (*Insurance, error)
	// GetTransactionList ...
	GetTransactionList(ctx context.Context, in *GetTransactionListRequest, opts ...grpc.CallOption) (*TransactionListResult, error)
	// GetProduct ...
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResult, error)
	// GetOfferProduct ...
	GetOfferProduct(ctx context.Context, in *GetOfferProductRequest, opts ...grpc.CallOption) (*OfferProduct, error)
	// CheckActiveProduct ...
	CheckActiveProduct(ctx context.Context, in *CheckActiveProductRequest, opts ...grpc.CallOption) (*ActiveProduct, error)
	// GetProductList ...
	GetProductList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetProductListResult, error)
	// GetRelationships ...
	GetRelationships(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRelationshipsResult, error)
	// GetAllCities ...
	GetAllCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CityListResult, error)
}

type microInsuranceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroInsuranceServiceClient(cc grpc.ClientConnInterface) MicroInsuranceServiceClient {
	return &microInsuranceServiceClient{cc}
}

func (c *microInsuranceServiceClient) Transact(ctx context.Context, in *TransactRequest, opts ...grpc.CallOption) (*Insurance, error) {
	out := new(Insurance)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/Transact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) GetReprint(ctx context.Context, in *GetReprintRequest, opts ...grpc.CallOption) (*Insurance, error) {
	out := new(Insurance)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/GetReprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) RetryTransaction(ctx context.Context, in *RetryTransactionRequest, opts ...grpc.CallOption) (*Insurance, error) {
	out := new(Insurance)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/RetryTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) GetTransactionList(ctx context.Context, in *GetTransactionListRequest, opts ...grpc.CallOption) (*TransactionListResult, error) {
	out := new(TransactionListResult)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/GetTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResult, error) {
	out := new(ProductResult)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) GetOfferProduct(ctx context.Context, in *GetOfferProductRequest, opts ...grpc.CallOption) (*OfferProduct, error) {
	out := new(OfferProduct)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/GetOfferProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) CheckActiveProduct(ctx context.Context, in *CheckActiveProductRequest, opts ...grpc.CallOption) (*ActiveProduct, error) {
	out := new(ActiveProduct)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/CheckActiveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) GetProductList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetProductListResult, error) {
	out := new(GetProductListResult)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/GetProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) GetRelationships(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRelationshipsResult, error) {
	out := new(GetRelationshipsResult)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/GetRelationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microInsuranceServiceClient) GetAllCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CityListResult, error) {
	out := new(CityListResult)
	err := c.cc.Invoke(ctx, "/microinsurance.MicroInsuranceService/GetAllCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroInsuranceServiceServer is the server API for MicroInsuranceService service.
// All implementations must embed UnimplementedMicroInsuranceServiceServer
// for forward compatibility
type MicroInsuranceServiceServer interface {
	// Transact ...
	Transact(context.Context, *TransactRequest) (*Insurance, error)
	// GetReprint ...
	GetReprint(context.Context, *GetReprintRequest) (*Insurance, error)
	// RetryTransaction ...
	RetryTransaction(context.Context, *RetryTransactionRequest) (*Insurance, error)
	// GetTransactionList ...
	GetTransactionList(context.Context, *GetTransactionListRequest) (*TransactionListResult, error)
	// GetProduct ...
	GetProduct(context.Context, *GetProductRequest) (*ProductResult, error)
	// GetOfferProduct ...
	GetOfferProduct(context.Context, *GetOfferProductRequest) (*OfferProduct, error)
	// CheckActiveProduct ...
	CheckActiveProduct(context.Context, *CheckActiveProductRequest) (*ActiveProduct, error)
	// GetProductList ...
	GetProductList(context.Context, *emptypb.Empty) (*GetProductListResult, error)
	// GetRelationships ...
	GetRelationships(context.Context, *emptypb.Empty) (*GetRelationshipsResult, error)
	// GetAllCities ...
	GetAllCities(context.Context, *emptypb.Empty) (*CityListResult, error)
	mustEmbedUnimplementedMicroInsuranceServiceServer()
}

// UnimplementedMicroInsuranceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMicroInsuranceServiceServer struct{}

func (UnimplementedMicroInsuranceServiceServer) Transact(context.Context, *TransactRequest) (*Insurance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transact not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) GetReprint(context.Context, *GetReprintRequest) (*Insurance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReprint not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) RetryTransaction(context.Context, *RetryTransactionRequest) (*Insurance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryTransaction not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) GetTransactionList(context.Context, *GetTransactionListRequest) (*TransactionListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionList not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) GetProduct(context.Context, *GetProductRequest) (*ProductResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) GetOfferProduct(context.Context, *GetOfferProductRequest) (*OfferProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferProduct not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) CheckActiveProduct(context.Context, *CheckActiveProductRequest) (*ActiveProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActiveProduct not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) GetProductList(context.Context, *emptypb.Empty) (*GetProductListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) GetRelationships(context.Context, *emptypb.Empty) (*GetRelationshipsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationships not implemented")
}

func (UnimplementedMicroInsuranceServiceServer) GetAllCities(context.Context, *emptypb.Empty) (*CityListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCities not implemented")
}
func (UnimplementedMicroInsuranceServiceServer) mustEmbedUnimplementedMicroInsuranceServiceServer() {}

// UnsafeMicroInsuranceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroInsuranceServiceServer will
// result in compilation errors.
type UnsafeMicroInsuranceServiceServer interface {
	mustEmbedUnimplementedMicroInsuranceServiceServer()
}

func RegisterMicroInsuranceServiceServer(s grpc.ServiceRegistrar, srv MicroInsuranceServiceServer) {
	s.RegisterService(&MicroInsuranceService_ServiceDesc, srv)
}

func _MicroInsuranceService_Transact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).Transact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/Transact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).Transact(ctx, req.(*TransactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_GetReprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).GetReprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/GetReprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).GetReprint(ctx, req.(*GetReprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_RetryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).RetryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/RetryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).RetryTransaction(ctx, req.(*RetryTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_GetTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).GetTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/GetTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).GetTransactionList(ctx, req.(*GetTransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_GetOfferProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).GetOfferProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/GetOfferProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).GetOfferProduct(ctx, req.(*GetOfferProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_CheckActiveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActiveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).CheckActiveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/CheckActiveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).CheckActiveProduct(ctx, req.(*CheckActiveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/GetProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).GetProductList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_GetRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).GetRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/GetRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).GetRelationships(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroInsuranceService_GetAllCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroInsuranceServiceServer).GetAllCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microinsurance.MicroInsuranceService/GetAllCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroInsuranceServiceServer).GetAllCities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroInsuranceService_ServiceDesc is the grpc.ServiceDesc for MicroInsuranceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroInsuranceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microinsurance.MicroInsuranceService",
	HandlerType: (*MicroInsuranceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transact",
			Handler:    _MicroInsuranceService_Transact_Handler,
		},
		{
			MethodName: "GetReprint",
			Handler:    _MicroInsuranceService_GetReprint_Handler,
		},
		{
			MethodName: "RetryTransaction",
			Handler:    _MicroInsuranceService_RetryTransaction_Handler,
		},
		{
			MethodName: "GetTransactionList",
			Handler:    _MicroInsuranceService_GetTransactionList_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _MicroInsuranceService_GetProduct_Handler,
		},
		{
			MethodName: "GetOfferProduct",
			Handler:    _MicroInsuranceService_GetOfferProduct_Handler,
		},
		{
			MethodName: "CheckActiveProduct",
			Handler:    _MicroInsuranceService_CheckActiveProduct_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _MicroInsuranceService_GetProductList_Handler,
		},
		{
			MethodName: "GetRelationships",
			Handler:    _MicroInsuranceService_GetRelationships_Handler,
		},
		{
			MethodName: "GetAllCities",
			Handler:    _MicroInsuranceService_GetAllCities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/microinsurance/all.proto",
}
