// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/cashincashout/all.proto

package cashincashout

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortOrder int32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	SortOrder_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{0}
}

type SortByColumn int32

const (
	SortByColumn_OmitSortByColumn         SortByColumn = 0
	SortByColumn_ReferenceNumber          SortByColumn = 1
	SortByColumn_TotalAmount              SortByColumn = 2
	SortByColumn_TransactionCompletedTime SortByColumn = 3
	SortByColumn_Provider                 SortByColumn = 4
	SortByColumn_Fee                      SortByColumn = 5
	SortByColumn_Commission               SortByColumn = 6
)

// Enum value maps for SortByColumn.
var (
	SortByColumn_name = map[int32]string{
		0: "OmitSortByColumn",
		1: "ReferenceNumber",
		2: "TotalAmount",
		3: "TransactionCompletedTime",
		4: "Provider",
		5: "Fee",
		6: "Commission",
	}
	SortByColumn_value = map[string]int32{
		"OmitSortByColumn":         0,
		"ReferenceNumber":          1,
		"TotalAmount":              2,
		"TransactionCompletedTime": 3,
		"Provider":                 4,
		"Fee":                      5,
		"Commission":               6,
	}
)

func (x SortByColumn) Enum() *SortByColumn {
	p := new(SortByColumn)
	*p = x
	return p
}

func (x SortByColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_enumTypes[1].Descriptor()
}

func (SortByColumn) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_enumTypes[1]
}

func (x SortByColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByColumn.Descriptor instead.
func (SortByColumn) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{1}
}

type CiCoInquireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode        string `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	Provider           string `protobuf:"bytes,2,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	TrxType            string `protobuf:"bytes,3,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	ReferenceNumber    string `protobuf:"bytes,4,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	PetnetTrackingno   string `protobuf:"bytes,5,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	Message            string `protobuf:"bytes,6,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	ProviderTrackingno string `protobuf:"bytes,7,opt,name=ProviderTrackingno,json=provider_trackingno,proto3" json:"provider_trackingno,omitempty"`
}

func (x *CiCoInquireRequest) Reset() {
	*x = CiCoInquireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoInquireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoInquireRequest) ProtoMessage() {}

func (x *CiCoInquireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoInquireRequest.ProtoReflect.Descriptor instead.
func (*CiCoInquireRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{0}
}

func (x *CiCoInquireRequest) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CiCoInquireRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CiCoInquireRequest) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CiCoInquireRequest) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CiCoInquireRequest) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CiCoInquireRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CiCoInquireRequest) GetProviderTrackingno() string {
	if x != nil {
		return x.ProviderTrackingno
	}
	return ""
}

type CicoInquireResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusMessage      string `protobuf:"bytes,1,opt,name=StatusMessage,json=status_message,proto3" json:"status_message,omitempty"`
	PetnetTrackingno   string `protobuf:"bytes,2,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxType            string `protobuf:"bytes,3,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	ReferenceNumber    string `protobuf:"bytes,4,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	Amount             string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	ProviderTrackingno string `protobuf:"bytes,6,opt,name=ProviderTrackingno,json=provider_trackingno,proto3" json:"provider_trackingno,omitempty"`
	Expiry             string `protobuf:"bytes,7,opt,name=Expiry,json=expiry,proto3" json:"expiry,omitempty"`
	CustomerName       string `protobuf:"bytes,8,opt,name=CustomerName,json=customer_name,proto3" json:"customer_name,omitempty"`
	CustomerFirstname  string `protobuf:"bytes,9,opt,name=CustomerFirstname,json=customer_firstname,proto3" json:"customer_firstname,omitempty"`
	CustomerLastname   string `protobuf:"bytes,10,opt,name=CustomerLastname,json=customer_lastname,proto3" json:"customer_lastname,omitempty"`
	MerchantID         string `protobuf:"bytes,11,opt,name=MerchantID,json=MerchantId,proto3" json:"MerchantId,omitempty"`
	PartnerCode        string `protobuf:"bytes,12,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	AccountNumber      string `protobuf:"bytes,13,opt,name=AccountNumber,json=account_number,proto3" json:"account_number,omitempty"`
	ServiceCharge      int32  `protobuf:"varint,14,opt,name=ServiceCharge,json=service_charge,proto3" json:"service_charge,omitempty"`
	CreatedAt          string `protobuf:"bytes,15,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
}

func (x *CicoInquireResult) Reset() {
	*x = CicoInquireResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CicoInquireResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CicoInquireResult) ProtoMessage() {}

func (x *CicoInquireResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CicoInquireResult.ProtoReflect.Descriptor instead.
func (*CicoInquireResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{1}
}

func (x *CicoInquireResult) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *CicoInquireResult) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CicoInquireResult) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CicoInquireResult) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CicoInquireResult) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CicoInquireResult) GetProviderTrackingno() string {
	if x != nil {
		return x.ProviderTrackingno
	}
	return ""
}

func (x *CicoInquireResult) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

func (x *CicoInquireResult) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *CicoInquireResult) GetCustomerFirstname() string {
	if x != nil {
		return x.CustomerFirstname
	}
	return ""
}

func (x *CicoInquireResult) GetCustomerLastname() string {
	if x != nil {
		return x.CustomerLastname
	}
	return ""
}

func (x *CicoInquireResult) GetMerchantID() string {
	if x != nil {
		return x.MerchantID
	}
	return ""
}

func (x *CicoInquireResult) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CicoInquireResult) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *CicoInquireResult) GetServiceCharge() int32 {
	if x != nil {
		return x.ServiceCharge
	}
	return 0
}

func (x *CicoInquireResult) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type CiCoInquireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32              `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *CicoInquireResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
}

func (x *CiCoInquireResponse) Reset() {
	*x = CiCoInquireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoInquireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoInquireResponse) ProtoMessage() {}

func (x *CiCoInquireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoInquireResponse.ProtoReflect.Descriptor instead.
func (*CiCoInquireResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{2}
}

func (x *CiCoInquireResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CiCoInquireResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CiCoInquireResponse) GetResult() *CicoInquireResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CiCoExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode      string `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	PetnetTrackingno string `protobuf:"bytes,2,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxDate          string `protobuf:"bytes,3,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	Provider         string `protobuf:"bytes,4,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
}

func (x *CiCoExecuteRequest) Reset() {
	*x = CiCoExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoExecuteRequest) ProtoMessage() {}

func (x *CiCoExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoExecuteRequest.ProtoReflect.Descriptor instead.
func (*CiCoExecuteRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{3}
}

func (x *CiCoExecuteRequest) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CiCoExecuteRequest) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CiCoExecuteRequest) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *CiCoExecuteRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type CicoExecuteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode        string `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	Provider           string `protobuf:"bytes,2,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	PetnetTrackingno   string `protobuf:"bytes,3,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxDate            string `protobuf:"bytes,4,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	TrxType            string `protobuf:"bytes,5,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	ProviderTrackingno string `protobuf:"bytes,6,opt,name=ProviderTrackingno,json=provider_trackingno,proto3" json:"provider_trackingno,omitempty"`
	ReferenceNumber    string `protobuf:"bytes,7,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	PrincipalAmount    int32  `protobuf:"varint,8,opt,name=PrincipalAmount,json=principal_amount,proto3" json:"principal_amount,omitempty"`
	Charges            int32  `protobuf:"varint,9,opt,name=Charges,json=charges,proto3" json:"charges,omitempty"`
	TotalAmount        int32  `protobuf:"varint,10,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
}

func (x *CicoExecuteResult) Reset() {
	*x = CicoExecuteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CicoExecuteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CicoExecuteResult) ProtoMessage() {}

func (x *CicoExecuteResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CicoExecuteResult.ProtoReflect.Descriptor instead.
func (*CicoExecuteResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{4}
}

func (x *CicoExecuteResult) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CicoExecuteResult) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CicoExecuteResult) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CicoExecuteResult) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *CicoExecuteResult) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CicoExecuteResult) GetProviderTrackingno() string {
	if x != nil {
		return x.ProviderTrackingno
	}
	return ""
}

func (x *CicoExecuteResult) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CicoExecuteResult) GetPrincipalAmount() int32 {
	if x != nil {
		return x.PrincipalAmount
	}
	return 0
}

func (x *CicoExecuteResult) GetCharges() int32 {
	if x != nil {
		return x.Charges
	}
	return 0
}

func (x *CicoExecuteResult) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type CiCoExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32              `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *CicoExecuteResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
}

func (x *CiCoExecuteResponse) Reset() {
	*x = CiCoExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoExecuteResponse) ProtoMessage() {}

func (x *CiCoExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoExecuteResponse.ProtoReflect.Descriptor instead.
func (*CiCoExecuteResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{5}
}

func (x *CiCoExecuteResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CiCoExecuteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CiCoExecuteResponse) GetResult() *CicoExecuteResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CiCoRetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode      string `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	PetnetTrackingno string `protobuf:"bytes,2,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxDate          string `protobuf:"bytes,3,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	Provider         string `protobuf:"bytes,4,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
}

func (x *CiCoRetryRequest) Reset() {
	*x = CiCoRetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoRetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoRetryRequest) ProtoMessage() {}

func (x *CiCoRetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoRetryRequest.ProtoReflect.Descriptor instead.
func (*CiCoRetryRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{6}
}

func (x *CiCoRetryRequest) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CiCoRetryRequest) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CiCoRetryRequest) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *CiCoRetryRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type CicoRetryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode        string      `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	Provider           string      `protobuf:"bytes,2,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	PetnetTrackingno   string      `protobuf:"bytes,3,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxDate            string      `protobuf:"bytes,4,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	TrxType            string      `protobuf:"bytes,5,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	ProviderTrackingno string      `protobuf:"bytes,6,opt,name=ProviderTrackingno,json=provider_trackingno,proto3" json:"provider_trackingno,omitempty"`
	ReferenceNumber    string      `protobuf:"bytes,7,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	PrincipalAmount    int32       `protobuf:"varint,8,opt,name=PrincipalAmount,json=principal_amount,proto3" json:"principal_amount,omitempty"`
	Charges            int32       `protobuf:"varint,9,opt,name=Charges,json=charges,proto3" json:"charges,omitempty"`
	TotalAmount        int32       `protobuf:"varint,10,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
	OTPPayload         *OTPPayload `protobuf:"bytes,11,opt,name=OTPPayload,json=otp_payload,proto3" json:"otp_payload,omitempty"`
}

func (x *CicoRetryResult) Reset() {
	*x = CicoRetryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CicoRetryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CicoRetryResult) ProtoMessage() {}

func (x *CicoRetryResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CicoRetryResult.ProtoReflect.Descriptor instead.
func (*CicoRetryResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{7}
}

func (x *CicoRetryResult) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CicoRetryResult) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CicoRetryResult) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CicoRetryResult) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *CicoRetryResult) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CicoRetryResult) GetProviderTrackingno() string {
	if x != nil {
		return x.ProviderTrackingno
	}
	return ""
}

func (x *CicoRetryResult) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CicoRetryResult) GetPrincipalAmount() int32 {
	if x != nil {
		return x.PrincipalAmount
	}
	return 0
}

func (x *CicoRetryResult) GetCharges() int32 {
	if x != nil {
		return x.Charges
	}
	return 0
}

func (x *CicoRetryResult) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *CicoRetryResult) GetOTPPayload() *OTPPayload {
	if x != nil {
		return x.OTPPayload
	}
	return nil
}

type OTPPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandID int32  `protobuf:"varint,1,opt,name=CommandID,json=commandId,proto3" json:"commandId,omitempty"`
	Payload   string `protobuf:"bytes,2,opt,name=Payload,json=payload,proto3" json:"payload,omitempty"`
}

func (x *OTPPayload) Reset() {
	*x = OTPPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTPPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTPPayload) ProtoMessage() {}

func (x *OTPPayload) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTPPayload.ProtoReflect.Descriptor instead.
func (*OTPPayload) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{8}
}

func (x *OTPPayload) GetCommandID() int32 {
	if x != nil {
		return x.CommandID
	}
	return 0
}

func (x *OTPPayload) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type CiCoRetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *CicoRetryResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
}

func (x *CiCoRetryResponse) Reset() {
	*x = CiCoRetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoRetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoRetryResponse) ProtoMessage() {}

func (x *CiCoRetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoRetryResponse.ProtoReflect.Descriptor instead.
func (*CiCoRetryResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{9}
}

func (x *CiCoRetryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CiCoRetryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CiCoRetryResponse) GetResult() *CicoRetryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CiCoOTPConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode      string      `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	PetnetTrackingno string      `protobuf:"bytes,2,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxDate          string      `protobuf:"bytes,3,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	OTP              string      `protobuf:"bytes,4,opt,name=OTP,json=otp,proto3" json:"otp,omitempty"`
	OTPPayload       *OTPPayload `protobuf:"bytes,5,opt,name=OTPPayload,json=otp_payload,proto3" json:"otp_payload,omitempty"`
	Provider         string      `protobuf:"bytes,6,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
}

func (x *CiCoOTPConfirmRequest) Reset() {
	*x = CiCoOTPConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoOTPConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoOTPConfirmRequest) ProtoMessage() {}

func (x *CiCoOTPConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoOTPConfirmRequest.ProtoReflect.Descriptor instead.
func (*CiCoOTPConfirmRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{10}
}

func (x *CiCoOTPConfirmRequest) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CiCoOTPConfirmRequest) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CiCoOTPConfirmRequest) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *CiCoOTPConfirmRequest) GetOTP() string {
	if x != nil {
		return x.OTP
	}
	return ""
}

func (x *CiCoOTPConfirmRequest) GetOTPPayload() *OTPPayload {
	if x != nil {
		return x.OTPPayload
	}
	return nil
}

func (x *CiCoOTPConfirmRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type CicoOTPConfirmResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode        string `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	Provider           string `protobuf:"bytes,2,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	PetnetTrackingno   string `protobuf:"bytes,3,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxDate            string `protobuf:"bytes,4,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	TrxType            string `protobuf:"bytes,5,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	ProviderTrackingno string `protobuf:"bytes,6,opt,name=ProviderTrackingno,json=provider_trackingno,proto3" json:"provider_trackingno,omitempty"`
	ReferenceNumber    string `protobuf:"bytes,7,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	PrincipalAmount    int32  `protobuf:"varint,8,opt,name=PrincipalAmount,json=principal_amount,proto3" json:"principal_amount,omitempty"`
	Charges            int32  `protobuf:"varint,9,opt,name=Charges,json=charges,proto3" json:"charges,omitempty"`
	TotalAmount        int32  `protobuf:"varint,10,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
}

func (x *CicoOTPConfirmResult) Reset() {
	*x = CicoOTPConfirmResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CicoOTPConfirmResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CicoOTPConfirmResult) ProtoMessage() {}

func (x *CicoOTPConfirmResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CicoOTPConfirmResult.ProtoReflect.Descriptor instead.
func (*CicoOTPConfirmResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{11}
}

func (x *CicoOTPConfirmResult) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CicoOTPConfirmResult) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CicoOTPConfirmResult) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CicoOTPConfirmResult) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *CicoOTPConfirmResult) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CicoOTPConfirmResult) GetProviderTrackingno() string {
	if x != nil {
		return x.ProviderTrackingno
	}
	return ""
}

func (x *CicoOTPConfirmResult) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CicoOTPConfirmResult) GetPrincipalAmount() int32 {
	if x != nil {
		return x.PrincipalAmount
	}
	return 0
}

func (x *CicoOTPConfirmResult) GetCharges() int32 {
	if x != nil {
		return x.Charges
	}
	return 0
}

func (x *CicoOTPConfirmResult) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type CiCoOTPConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *CicoOTPConfirmResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
}

func (x *CiCoOTPConfirmResponse) Reset() {
	*x = CiCoOTPConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoOTPConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoOTPConfirmResponse) ProtoMessage() {}

func (x *CiCoOTPConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoOTPConfirmResponse.ProtoReflect.Descriptor instead.
func (*CiCoOTPConfirmResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{12}
}

func (x *CiCoOTPConfirmResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CiCoOTPConfirmResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CiCoOTPConfirmResponse) GetResult() *CicoOTPConfirmResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CicoValidateCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID        string `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	CustomerFirstname string `protobuf:"bytes,2,opt,name=CustomerFirstname,json=customer_firstname,proto3" json:"customer_firstname,omitempty"`
	CustomerLastname  string `protobuf:"bytes,3,opt,name=CustomerLastname,json=customer_lastname,proto3" json:"customer_lastname,omitempty"`
	CurrAddress       string `protobuf:"bytes,4,opt,name=CurrAddress,json=curr_address,proto3" json:"curr_address,omitempty"`
	CurrBarangay      string `protobuf:"bytes,5,opt,name=CurrBarangay,json=curr_barangay,proto3" json:"curr_barangay,omitempty"`
	CurrCity          string `protobuf:"bytes,6,opt,name=CurrCity,json=curr_city,proto3" json:"curr_city,omitempty"`
	CurrProvince      string `protobuf:"bytes,7,opt,name=CurrProvince,json=curr_province,proto3" json:"curr_province,omitempty"`
	CurrCountry       string `protobuf:"bytes,8,opt,name=CurrCountry,json=curr_country,proto3" json:"curr_country,omitempty"`
	BirthDate         string `protobuf:"bytes,9,opt,name=BirthDate,json=birth_date,proto3" json:"birth_date,omitempty"`
	BirthPlace        string `protobuf:"bytes,10,opt,name=BirthPlace,json=birth_place,proto3" json:"birth_place,omitempty"`
	BirthCountry      string `protobuf:"bytes,11,opt,name=BirthCountry,json=birth_country,proto3" json:"birth_country,omitempty"`
	ContactNo         string `protobuf:"bytes,12,opt,name=ContactNo,json=contact_no,proto3" json:"contact_no,omitempty"`
	IDType            string `protobuf:"bytes,13,opt,name=IDType,json=id_type,proto3" json:"id_type,omitempty"`
	IDNumber          string `protobuf:"bytes,14,opt,name=IDNumber,json=id_number,proto3" json:"id_number,omitempty"`
}

func (x *CicoValidateCustomer) Reset() {
	*x = CicoValidateCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CicoValidateCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CicoValidateCustomer) ProtoMessage() {}

func (x *CicoValidateCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CicoValidateCustomer.ProtoReflect.Descriptor instead.
func (*CicoValidateCustomer) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{13}
}

func (x *CicoValidateCustomer) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *CicoValidateCustomer) GetCustomerFirstname() string {
	if x != nil {
		return x.CustomerFirstname
	}
	return ""
}

func (x *CicoValidateCustomer) GetCustomerLastname() string {
	if x != nil {
		return x.CustomerLastname
	}
	return ""
}

func (x *CicoValidateCustomer) GetCurrAddress() string {
	if x != nil {
		return x.CurrAddress
	}
	return ""
}

func (x *CicoValidateCustomer) GetCurrBarangay() string {
	if x != nil {
		return x.CurrBarangay
	}
	return ""
}

func (x *CicoValidateCustomer) GetCurrCity() string {
	if x != nil {
		return x.CurrCity
	}
	return ""
}

func (x *CicoValidateCustomer) GetCurrProvince() string {
	if x != nil {
		return x.CurrProvince
	}
	return ""
}

func (x *CicoValidateCustomer) GetCurrCountry() string {
	if x != nil {
		return x.CurrCountry
	}
	return ""
}

func (x *CicoValidateCustomer) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *CicoValidateCustomer) GetBirthPlace() string {
	if x != nil {
		return x.BirthPlace
	}
	return ""
}

func (x *CicoValidateCustomer) GetBirthCountry() string {
	if x != nil {
		return x.BirthCountry
	}
	return ""
}

func (x *CicoValidateCustomer) GetContactNo() string {
	if x != nil {
		return x.ContactNo
	}
	return ""
}

func (x *CicoValidateCustomer) GetIDType() string {
	if x != nil {
		return x.IDType
	}
	return ""
}

func (x *CicoValidateCustomer) GetIDNumber() string {
	if x != nil {
		return x.IDNumber
	}
	return ""
}

type CicoValidateTrx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider        string `protobuf:"bytes,1,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	ReferenceNumber string `protobuf:"bytes,2,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	TrxType         string `protobuf:"bytes,3,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	PrincipalAmount int32  `protobuf:"varint,4,opt,name=PrincipalAmount,json=principal_amount,proto3" json:"principal_amount,omitempty"`
}

func (x *CicoValidateTrx) Reset() {
	*x = CicoValidateTrx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CicoValidateTrx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CicoValidateTrx) ProtoMessage() {}

func (x *CicoValidateTrx) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CicoValidateTrx.ProtoReflect.Descriptor instead.
func (*CicoValidateTrx) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{14}
}

func (x *CicoValidateTrx) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CicoValidateTrx) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CicoValidateTrx) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CicoValidateTrx) GetPrincipalAmount() int32 {
	if x != nil {
		return x.PrincipalAmount
	}
	return 0
}

type CiCoValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode string                `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	Trx         *CicoValidateTrx      `protobuf:"bytes,2,opt,name=Trx,json=trx,proto3" json:"trx,omitempty"`
	Customer    *CicoValidateCustomer `protobuf:"bytes,3,opt,name=Customer,json=customer,proto3" json:"customer,omitempty"`
}

func (x *CiCoValidateRequest) Reset() {
	*x = CiCoValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoValidateRequest) ProtoMessage() {}

func (x *CiCoValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoValidateRequest.ProtoReflect.Descriptor instead.
func (*CiCoValidateRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{15}
}

func (x *CiCoValidateRequest) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *CiCoValidateRequest) GetTrx() *CicoValidateTrx {
	if x != nil {
		return x.Trx
	}
	return nil
}

func (x *CiCoValidateRequest) GetCustomer() *CicoValidateCustomer {
	if x != nil {
		return x.Customer
	}
	return nil
}

type CicoValidateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetnetTrackingno   string `protobuf:"bytes,1,opt,name=PetnetTrackingno,json=petnet_trackingno,proto3" json:"petnet_trackingno,omitempty"`
	TrxDate            string `protobuf:"bytes,2,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	TrxType            string `protobuf:"bytes,3,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	Provider           string `protobuf:"bytes,4,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	ProviderTrackingno string `protobuf:"bytes,5,opt,name=ProviderTrackingno,json=provider_trackingno,proto3" json:"provider_trackingno,omitempty"`
	ReferenceNumber    string `protobuf:"bytes,6,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	PrincipalAmount    int32  `protobuf:"varint,7,opt,name=PrincipalAmount,json=principal_amount,proto3" json:"principal_amount,omitempty"`
	Charges            int32  `protobuf:"varint,8,opt,name=Charges,json=charges,proto3" json:"charges,omitempty"`
	TotalAmount        int32  `protobuf:"varint,9,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
	Timestamp          string `protobuf:"bytes,10,opt,name=Timestamp,json=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CicoValidateResult) Reset() {
	*x = CicoValidateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CicoValidateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CicoValidateResult) ProtoMessage() {}

func (x *CicoValidateResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CicoValidateResult.ProtoReflect.Descriptor instead.
func (*CicoValidateResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{16}
}

func (x *CicoValidateResult) GetPetnetTrackingno() string {
	if x != nil {
		return x.PetnetTrackingno
	}
	return ""
}

func (x *CicoValidateResult) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *CicoValidateResult) GetTrxType() string {
	if x != nil {
		return x.TrxType
	}
	return ""
}

func (x *CicoValidateResult) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CicoValidateResult) GetProviderTrackingno() string {
	if x != nil {
		return x.ProviderTrackingno
	}
	return ""
}

func (x *CicoValidateResult) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CicoValidateResult) GetPrincipalAmount() int32 {
	if x != nil {
		return x.PrincipalAmount
	}
	return 0
}

func (x *CicoValidateResult) GetCharges() int32 {
	if x != nil {
		return x.Charges
	}
	return 0
}

func (x *CicoValidateResult) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *CicoValidateResult) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type CiCoValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32               `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *CicoValidateResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
}

func (x *CiCoValidateResponse) Reset() {
	*x = CiCoValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiCoValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiCoValidateResponse) ProtoMessage() {}

func (x *CiCoValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiCoValidateResponse.ProtoReflect.Descriptor instead.
func (*CiCoValidateResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{17}
}

func (x *CiCoValidateResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CiCoValidateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CiCoValidateResponse) GetResult() *CicoValidateResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CICOTransactListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From             string       `protobuf:"bytes,1,opt,name=From,json=from,proto3" json:"from,omitempty"`
	Until            string       `protobuf:"bytes,2,opt,name=Until,json=until,proto3" json:"until,omitempty"`
	Limit            int32        `protobuf:"varint,3,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
	Offset           int32        `protobuf:"varint,4,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
	SortOrder        SortOrder    `protobuf:"varint,5,opt,name=SortOrder,json=sort_order,proto3,enum=cashincashout.SortOrder" json:"sort_order,omitempty"`
	SortByColumn     SortByColumn `protobuf:"varint,6,opt,name=SortByColumn,json=sort_by_column,proto3,enum=cashincashout.SortByColumn" json:"sort_by_column,omitempty"`
	ReferenceNumber  string       `protobuf:"bytes,7,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	ExcludeProviders []string     `protobuf:"bytes,8,rep,name=ExcludeProviders,json=exclude_provider,proto3" json:"exclude_provider,omitempty"`
	OrgID            string       `protobuf:"bytes,9,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
}

func (x *CICOTransactListRequest) Reset() {
	*x = CICOTransactListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CICOTransactListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CICOTransactListRequest) ProtoMessage() {}

func (x *CICOTransactListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CICOTransactListRequest.ProtoReflect.Descriptor instead.
func (*CICOTransactListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{18}
}

func (x *CICOTransactListRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CICOTransactListRequest) GetUntil() string {
	if x != nil {
		return x.Until
	}
	return ""
}

func (x *CICOTransactListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CICOTransactListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CICOTransactListRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_DESC
}

func (x *CICOTransactListRequest) GetSortByColumn() SortByColumn {
	if x != nil {
		return x.SortByColumn
	}
	return SortByColumn_OmitSortByColumn
}

func (x *CICOTransactListRequest) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CICOTransactListRequest) GetExcludeProviders() []string {
	if x != nil {
		return x.ExcludeProviders
	}
	return nil
}

func (x *CICOTransactListRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type CICOTransactListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next          int32           `protobuf:"varint,1,opt,name=Next,json=next,proto3" json:"next,omitempty"`
	CICOTransacts []*CICOTransact `protobuf:"bytes,2,rep,name=CICOTransacts,json=cico_transact,proto3" json:"cico_transact,omitempty"`
	Total         int32           `protobuf:"varint,3,opt,name=Total,json=total,proto3" json:"total,omitempty"`
}

func (x *CICOTransactListResponse) Reset() {
	*x = CICOTransactListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CICOTransactListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CICOTransactListResponse) ProtoMessage() {}

func (x *CICOTransactListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CICOTransactListResponse.ProtoReflect.Descriptor instead.
func (*CICOTransactListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{19}
}

func (x *CICOTransactListResponse) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *CICOTransactListResponse) GetCICOTransacts() []*CICOTransact {
	if x != nil {
		return x.CICOTransacts
	}
	return nil
}

func (x *CICOTransactListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monetary amount in the smallest currency denomination.  Example: USD $10.25 => "1025".
	Amount string `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Currency code using ISO-4217 3-letter codes.
	Currency string `protobuf:"bytes,2,opt,name=Currency,json=currency,proto3" json:"currency,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{20}
}

func (x *Amount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Amount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type CICOTransact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceNumber          string                 `protobuf:"bytes,1,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	Provider                 string                 `protobuf:"bytes,2,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	TotalAmount              *Amount                `protobuf:"bytes,3,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
	TransactFee              *Amount                `protobuf:"bytes,4,opt,name=TransactFee,json=transact_fee,proto3" json:"transact_fee,omitempty"`
	TransactCommission       *Amount                `protobuf:"bytes,5,opt,name=TransactCommission,json=transact_commission,proto3" json:"transact_commission,omitempty"`
	TransactionCompletedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=TransactionCompletedTime,json=transaction_completed_time,proto3" json:"transaction_completed_time,omitempty"`
}

func (x *CICOTransact) Reset() {
	*x = CICOTransact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CICOTransact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CICOTransact) ProtoMessage() {}

func (x *CICOTransact) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CICOTransact.ProtoReflect.Descriptor instead.
func (*CICOTransact) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP(), []int{21}
}

func (x *CICOTransact) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *CICOTransact) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CICOTransact) GetTotalAmount() *Amount {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *CICOTransact) GetTransactFee() *Amount {
	if x != nil {
		return x.TransactFee
	}
	return nil
}

func (x *CICOTransact) GetTransactCommission() *Amount {
	if x != nil {
		return x.TransactCommission
	}
	return nil
}

func (x *CICOTransact) GetTransactionCompletedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionCompletedTime
	}
	return nil
}

var File_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDesc = []byte{
	0x0a, 0x33, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xde, 0x03, 0x0a, 0x12, 0x43, 0x69, 0x43, 0x6f, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x3a, 0x77, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x92, 0x41, 0x6e, 0x0a, 0x6c, 0xd2, 0x01, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0xd2, 0x01, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x10,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0xd2, 0x01, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x6e, 0x6f, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01,
	0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x6e, 0x6f, 0x22, 0xfb, 0x05, 0x0a, 0x11, 0x43, 0x69, 0x63, 0x6f, 0x49, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x10, 0x50, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x22, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x43, 0x69, 0x43, 0x6f, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74,
	0x2e, 0x43, 0x69, 0x63, 0x6f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x91,
	0x02, 0x0a, 0x12, 0x43, 0x69, 0x43, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x25, 0x0a,
	0x07, 0x54, 0x72, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x44, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0xd2, 0x01, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0xd2, 0x01, 0x08, 0x74,
	0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0xf9, 0x03, 0x0a, 0x11, 0x43, 0x69, 0x63, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x6e, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa9,
	0x01, 0x0a, 0x13, 0x43, 0x69, 0x43, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x63,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8f, 0x02, 0x0a, 0x10, 0x43,
	0x69, 0x43, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37,
	0x0a, 0x10, 0x50, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x44, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x3b, 0x0a, 0x39, 0xd2, 0x01, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0xd2, 0x01, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xbf, 0x04, 0x0a,
	0x0f, 0x43, 0x69, 0x63, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f,
	0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46,
	0x0a, 0x0a, 0x4f, 0x54, 0x50, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f,
	0x75, 0x74, 0x2e, 0x4f, 0x54, 0x50, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6f, 0x74, 0x70, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x7f,
	0x0a, 0x0a, 0x4f, 0x54, 0x50, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x21, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x18, 0x0a, 0x16, 0xd2, 0x01, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xa5, 0x01, 0x0a, 0x11, 0x43, 0x69, 0x43, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x63, 0x6f,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8e, 0x03, 0x0a, 0x15, 0x43, 0x69, 0x43, 0x6f,
	0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x37, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x03, 0x4f, 0x54, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x12, 0x46,
	0x0a, 0x0a, 0x4f, 0x54, 0x50, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f,
	0x75, 0x74, 0x2e, 0x4f, 0x54, 0x50, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6f, 0x74, 0x70, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x58,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0xd2, 0x01, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x11, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0xd2, 0x01,
	0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x03, 0x6f, 0x74, 0x70, 0xd2,
	0x01, 0x0b, 0x6f, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0xd2, 0x01, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xfc, 0x03, 0x0a, 0x14, 0x43, 0x69, 0x63,
	0x6f, 0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e,
	0x6f, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x35, 0x0a, 0x0f,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x43, 0x69, 0x43, 0x6f,
	0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x63, 0x6f, 0x4f, 0x54, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x81, 0x07, 0x0a, 0x14, 0x43, 0x69,
	0x63, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x42, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x0b, 0x43, 0x75, 0x72, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x09,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x42, 0x69, 0x72, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x6f,
	0x12, 0x23, 0x0a, 0x06, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0xdc,
	0x01, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0xd2, 0x01, 0x0a, 0xcf, 0x01, 0xd2, 0x01,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0xd2, 0x01, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x61, 0x79, 0xd2, 0x01, 0x09, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0xd2, 0x01, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0xd2, 0x01, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0xd2,
	0x01, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x0b, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0d, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0xd2, 0x01, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0xd2, 0x01, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0xd2, 0x01, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x97, 0x02,
	0x0a, 0x0f, 0x43, 0x69, 0x63, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x78, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x47,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0xd2, 0x01, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xd2, 0x01, 0x08, 0x74, 0x72, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x13, 0x43, 0x69, 0x43, 0x6f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c,
	0x0a, 0x03, 0x54, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x63, 0x6f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x78, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x74, 0x72, 0x78, 0x12, 0x4b, 0x0a, 0x08,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43,
	0x69, 0x63, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x3a, 0x2b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x92, 0x41, 0x22, 0x0a, 0x20, 0xd2, 0x01, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x03, 0x74, 0x72, 0x78, 0xd2, 0x01, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xf5, 0x03, 0x0a, 0x12, 0x43, 0x69, 0x63, 0x6f, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a,
	0x10, 0x50, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x07, 0x54, 0x72, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xab,
	0x01, 0x0a, 0x14, 0x43, 0x69, 0x43, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69,
	0x63, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xdd, 0x03, 0x0a,
	0x17, 0x43, 0x49, 0x43, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x43, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68,
	0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x10, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x3a, 0x14, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a,
	0x18, 0x43, 0x49, 0x43, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x43, 0x49, 0x43,
	0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74,
	0x2e, 0x43, 0x49, 0x43, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x69, 0x63, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x75, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x1f, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xbb, 0x03, 0x0a, 0x0c, 0x43, 0x49,
	0x43, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75,
	0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x2a, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a,
	0x02, 0x18, 0x00, 0x2a, 0xaf, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x10, 0x4f, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0b, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xcb, 0x16, 0x0a, 0x14, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e,
	0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa0,
	0x03, 0x0a, 0x0b, 0x43, 0x69, 0x43, 0x6f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x21,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43,
	0x69, 0x43, 0x6f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75,
	0x74, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41,
	0x97, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75,
	0x74, 0x12, 0x13, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x54, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x69, 0x43, 0x6f, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x6d, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x66, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b,
	0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x34, 0x2c, 0x20, 0x22, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0xe2, 0x80, 0x99, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61,
	0x73, 0x68, 0x6f, 0x75, 0x74, 0x2f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x28, 0x00, 0x30,
	0x00, 0x12, 0x87, 0x04, 0x0a, 0x0b, 0x43, 0x69, 0x43, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75,
	0x74, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0xfe, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x43, 0x61, 0x73,
	0x68, 0x4f, 0x75, 0x74, 0x12, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x5b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x54, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x69, 0x43, 0x6f, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x65, 0x0a,
	0x03, 0x34, 0x32, 0x32, 0x12, 0x5e, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x36, 0x0a, 0x34,
	0x4a, 0x32, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c,
	0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x43, 0x49, 0x43,
	0x4f, 0x20, 0x2d, 0x20, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x22, 0x20, 0x7d, 0x4a, 0x6d, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x66, 0x0a, 0x24, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x43, 0x49, 0x43, 0x4f, 0x20, 0x2d, 0x20, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2d, 0x20, 0x47, 0x43, 0x41, 0x53, 0x48,
	0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf9, 0x03, 0x0a, 0x09,
	0x43, 0x69, 0x43, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x63, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x03, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xf8, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x12, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79, 0x20,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x69, 0x43, 0x6f, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x65, 0x0a, 0x03, 0x34,
	0x32, 0x32, 0x12, 0x5e, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x36, 0x0a, 0x34, 0x4a, 0x32,
	0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x43, 0x49, 0x43, 0x4f, 0x20,
	0x2d, 0x20, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x22,
	0x20, 0x7d, 0x4a, 0x6d, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x66, 0x0a, 0x24, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a,
	0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x43, 0x49, 0x43, 0x4f, 0x20, 0x2d, 0x20, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45,
	0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x20, 0x2d, 0x20, 0x47, 0x43, 0x41, 0x53, 0x48, 0x22, 0x20,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa4, 0x03, 0x0a, 0x0e, 0x43, 0x69, 0x43, 0x6f,
	0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x24, 0x2e, 0x63, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x4f,
	0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74,
	0x2e, 0x43, 0x69, 0x43, 0x6f, 0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0x96, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x43, 0x61, 0x73, 0x68,
	0x4f, 0x75, 0x74, 0x12, 0x17, 0x4f, 0x54, 0x50, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x4f, 0x54,
	0x50, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75,
	0x74, 0x43, 0x69, 0x43, 0x6f, 0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x61, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x5a,
	0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x32, 0x0a, 0x30, 0x4a, 0x2e, 0x7b, 0x20, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x43, 0x49, 0x43, 0x4f, 0x20, 0x2d, 0x20, 0x4f, 0x54,
	0x50, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63,
	0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2f, 0x6f, 0x74, 0x70, 0x28, 0x00, 0x30, 0x00, 0x12, 0x96,
	0x04, 0x0a, 0x0c, 0x43, 0x69, 0x43, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e,
	0x43, 0x69, 0x43, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68,
	0x6f, 0x75, 0x74, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0x89, 0x03, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x43, 0x61, 0x73,
	0x68, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x4a, 0x5c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x55, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x33, 0x0a, 0x31, 0x1a,
	0x2f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x69, 0x43, 0x6f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12,
	0x3d, 0x0a, 0x3b, 0x4a, 0x39, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34,
	0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x54, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x77,
	0x61, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x22, 0x20, 0x7d, 0x4a, 0x6e,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x67, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x3f, 0x0a,
	0x3d, 0x4a, 0x3b, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30,
	0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x43, 0x49,
	0x43, 0x4f, 0x20, 0x2d, 0x20, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x20, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x20, 0x2d, 0x20, 0x47, 0x43, 0x41, 0x53, 0x48, 0x22, 0x20, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc4, 0x03, 0x0a, 0x10, 0x43, 0x49, 0x43, 0x4f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x63,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x49, 0x43,
	0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x49, 0x43, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb4, 0x02, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x43, 0x49, 0x2f, 0x43, 0x4f, 0x12, 0x22, 0x47, 0x65, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x43, 0x49, 0x2f, 0x43, 0x4f, 0x2e, 0x1a, 0x1f, 0x47, 0x65, 0x74, 0x20,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x43, 0x49, 0x2f, 0x43, 0x4f, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x60, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x49, 0x43, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x5d, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x56, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x12, 0x3a, 0x0a, 0x38, 0x4a, 0x36, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x43, 0x49, 0x43, 0x4f, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x2d, 0x63, 0x6f, 0x2f,
	0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03,
	0x88, 0x02, 0x00, 0x42, 0x52, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x37, 0x62, 0x72, 0x61, 0x6e, 0x6b,
	0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f,
	0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x3b, 0x63, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x6f,
	0x75, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01,
	0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 22)
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_goTypes   = []interface{}{
		(SortOrder)(0),                   // 0: cashincashout.SortOrder
		(SortByColumn)(0),                // 1: cashincashout.SortByColumn
		(*CiCoInquireRequest)(nil),       // 2: cashincashout.CiCoInquireRequest
		(*CicoInquireResult)(nil),        // 3: cashincashout.CicoInquireResult
		(*CiCoInquireResponse)(nil),      // 4: cashincashout.CiCoInquireResponse
		(*CiCoExecuteRequest)(nil),       // 5: cashincashout.CiCoExecuteRequest
		(*CicoExecuteResult)(nil),        // 6: cashincashout.CicoExecuteResult
		(*CiCoExecuteResponse)(nil),      // 7: cashincashout.CiCoExecuteResponse
		(*CiCoRetryRequest)(nil),         // 8: cashincashout.CiCoRetryRequest
		(*CicoRetryResult)(nil),          // 9: cashincashout.CicoRetryResult
		(*OTPPayload)(nil),               // 10: cashincashout.OTPPayload
		(*CiCoRetryResponse)(nil),        // 11: cashincashout.CiCoRetryResponse
		(*CiCoOTPConfirmRequest)(nil),    // 12: cashincashout.CiCoOTPConfirmRequest
		(*CicoOTPConfirmResult)(nil),     // 13: cashincashout.CicoOTPConfirmResult
		(*CiCoOTPConfirmResponse)(nil),   // 14: cashincashout.CiCoOTPConfirmResponse
		(*CicoValidateCustomer)(nil),     // 15: cashincashout.CicoValidateCustomer
		(*CicoValidateTrx)(nil),          // 16: cashincashout.CicoValidateTrx
		(*CiCoValidateRequest)(nil),      // 17: cashincashout.CiCoValidateRequest
		(*CicoValidateResult)(nil),       // 18: cashincashout.CicoValidateResult
		(*CiCoValidateResponse)(nil),     // 19: cashincashout.CiCoValidateResponse
		(*CICOTransactListRequest)(nil),  // 20: cashincashout.CICOTransactListRequest
		(*CICOTransactListResponse)(nil), // 21: cashincashout.CICOTransactListResponse
		(*Amount)(nil),                   // 22: cashincashout.Amount
		(*CICOTransact)(nil),             // 23: cashincashout.CICOTransact
		(*timestamppb.Timestamp)(nil),    // 24: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_depIdxs = []int32{
	3,  // 0: cashincashout.CiCoInquireResponse.Result:type_name -> cashincashout.CicoInquireResult
	6,  // 1: cashincashout.CiCoExecuteResponse.Result:type_name -> cashincashout.CicoExecuteResult
	10, // 2: cashincashout.CicoRetryResult.OTPPayload:type_name -> cashincashout.OTPPayload
	9,  // 3: cashincashout.CiCoRetryResponse.Result:type_name -> cashincashout.CicoRetryResult
	10, // 4: cashincashout.CiCoOTPConfirmRequest.OTPPayload:type_name -> cashincashout.OTPPayload
	13, // 5: cashincashout.CiCoOTPConfirmResponse.Result:type_name -> cashincashout.CicoOTPConfirmResult
	16, // 6: cashincashout.CiCoValidateRequest.Trx:type_name -> cashincashout.CicoValidateTrx
	15, // 7: cashincashout.CiCoValidateRequest.Customer:type_name -> cashincashout.CicoValidateCustomer
	18, // 8: cashincashout.CiCoValidateResponse.Result:type_name -> cashincashout.CicoValidateResult
	0,  // 9: cashincashout.CICOTransactListRequest.SortOrder:type_name -> cashincashout.SortOrder
	1,  // 10: cashincashout.CICOTransactListRequest.SortByColumn:type_name -> cashincashout.SortByColumn
	23, // 11: cashincashout.CICOTransactListResponse.CICOTransacts:type_name -> cashincashout.CICOTransact
	22, // 12: cashincashout.CICOTransact.TotalAmount:type_name -> cashincashout.Amount
	22, // 13: cashincashout.CICOTransact.TransactFee:type_name -> cashincashout.Amount
	22, // 14: cashincashout.CICOTransact.TransactCommission:type_name -> cashincashout.Amount
	24, // 15: cashincashout.CICOTransact.TransactionCompletedTime:type_name -> google.protobuf.Timestamp
	2,  // 16: cashincashout.CashInCashOutService.CiCoInquire:input_type -> cashincashout.CiCoInquireRequest
	5,  // 17: cashincashout.CashInCashOutService.CiCoExecute:input_type -> cashincashout.CiCoExecuteRequest
	8,  // 18: cashincashout.CashInCashOutService.CiCoRetry:input_type -> cashincashout.CiCoRetryRequest
	12, // 19: cashincashout.CashInCashOutService.CiCoOTPConfirm:input_type -> cashincashout.CiCoOTPConfirmRequest
	17, // 20: cashincashout.CashInCashOutService.CiCoValidate:input_type -> cashincashout.CiCoValidateRequest
	20, // 21: cashincashout.CashInCashOutService.CICOTransactList:input_type -> cashincashout.CICOTransactListRequest
	4,  // 22: cashincashout.CashInCashOutService.CiCoInquire:output_type -> cashincashout.CiCoInquireResponse
	7,  // 23: cashincashout.CashInCashOutService.CiCoExecute:output_type -> cashincashout.CiCoExecuteResponse
	11, // 24: cashincashout.CashInCashOutService.CiCoRetry:output_type -> cashincashout.CiCoRetryResponse
	14, // 25: cashincashout.CashInCashOutService.CiCoOTPConfirm:output_type -> cashincashout.CiCoOTPConfirmResponse
	19, // 26: cashincashout.CashInCashOutService.CiCoValidate:output_type -> cashincashout.CiCoValidateResponse
	21, // 27: cashincashout.CashInCashOutService.CICOTransactList:output_type -> cashincashout.CICOTransactListResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoInquireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CicoInquireResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoInquireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CicoExecuteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoRetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CicoRetryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTPPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoRetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoOTPConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CicoOTPConfirmResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoOTPConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CicoValidateCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CicoValidateTrx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CicoValidateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiCoValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CICOTransactListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CICOTransactListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CICOTransact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_cashincashout_all_proto_depIdxs = nil
}
