// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/rbac/gunk/v1/oauth2/all.proto

package oauth2

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientType int32

const (
	// ClientType_Private clients should be used for all authentications being processed
	// by a server backend, where a secret can be kept private.
	ClientType_Private ClientType = 0
	// ClientType_Public clients are best used for SPA and/or mobile frontends,
	// where client secret isn't able to be hidden.
	// PKCE is required for security purposes when using a public client.
	ClientType_Public ClientType = 1
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0: "Private",
		1: "Public",
	}
	ClientType_value = map[string]int32{
		"Private": 0,
		"Public":  1,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_enumTypes[0].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_brank_as_rbac_gunk_v1_oauth2_all_proto_enumTypes[0]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{0}
}

type CreateClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the friendly name of the service client to be created
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Audience is the target service for the requested authentication.
	Audience string `protobuf:"bytes,11,opt,name=Audience,json=audience,proto3" json:"audience,omitempty"`
	// Environment is the valid environment for the client.
	Env string `protobuf:"bytes,2,opt,name=Env,json=env,proto3" json:"env,omitempty"`
	// Role is the assigned permissions role.
	Role string `protobuf:"bytes,3,opt,name=Role,json=role,proto3" json:"role,omitempty"`
	// ClientType is the oauth2 client type.
	ClientType ClientType `protobuf:"varint,4,opt,name=ClientType,json=client_type,proto3,enum=brankas.rbac.v1.oauth2.ClientType" json:"client_type,omitempty"`
	// CORS lists the allowed CORS Origins.
	CORS []string `protobuf:"bytes,5,rep,name=CORS,json=cors,proto3" json:"cors,omitempty"`
	// Partner logo url for display on idp.
	LogoURL string `protobuf:"bytes,6,opt,name=LogoURL,json=logo_url,proto3" json:"logo_url,omitempty"`
	// Requested scopes for user consent.
	Scopes []string `protobuf:"bytes,7,rep,name=Scopes,json=scopes,proto3" json:"scopes,omitempty"`
	// Redirect URLs accepted by client.
	RedirectURL []string `protobuf:"bytes,8,rep,name=RedirectURL,json=redirect_url,proto3" json:"redirect_url,omitempty"`
	// URL to redirect user to once logout is complete.
	LogoutRedirectURL string `protobuf:"bytes,9,opt,name=LogoutRedirectURL,json=logout_redirect_url,proto3" json:"logout_redirect_url,omitempty"`
	// IdentitySource to use when authenticating user login.
	IdentitySource string `protobuf:"bytes,10,opt,name=IdentitySource,json=identity_source,proto3" json:"identity_source,omitempty"`
	// Configuration for auth flow.
	Config *ClientConfig `protobuf:"bytes,12,opt,name=Config,json=config,proto3" json:"config,omitempty"`
}

func (x *CreateClientRequest) Reset() {
	*x = CreateClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientRequest) ProtoMessage() {}

func (x *CreateClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientRequest.ProtoReflect.Descriptor instead.
func (*CreateClientRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{0}
}

func (x *CreateClientRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClientRequest) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *CreateClientRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CreateClientRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateClientRequest) GetClientType() ClientType {
	if x != nil {
		return x.ClientType
	}
	return ClientType_Private
}

func (x *CreateClientRequest) GetCORS() []string {
	if x != nil {
		return x.CORS
	}
	return nil
}

func (x *CreateClientRequest) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *CreateClientRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *CreateClientRequest) GetRedirectURL() []string {
	if x != nil {
		return x.RedirectURL
	}
	return nil
}

func (x *CreateClientRequest) GetLogoutRedirectURL() string {
	if x != nil {
		return x.LogoutRedirectURL
	}
	return ""
}

func (x *CreateClientRequest) GetIdentitySource() string {
	if x != nil {
		return x.IdentitySource
	}
	return ""
}

func (x *CreateClientRequest) GetConfig() *ClientConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginTemplate   string `protobuf:"bytes,1,opt,name=LoginTemplate,json=login_template,proto3" json:"login_template,omitempty"`
	OTPTemplate     string `protobuf:"bytes,2,opt,name=OTPTemplate,json=otp_template,proto3" json:"otp_template,omitempty"`
	ConsentTemplate string `protobuf:"bytes,3,opt,name=ConsentTemplate,json=consent_template,proto3" json:"consent_template,omitempty"`
	// Force the user to grant consent for each login.
	ForceConsent    bool                 `protobuf:"varint,4,opt,name=ForceConsent,json=force_consent,proto3" json:"force_consent,omitempty"`
	SessionDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=SessionDuration,json=session_duration,proto3" json:"session_duration,omitempty"`
	// IdentitySource to use when authenticating user login.
	IdentitySource string `protobuf:"bytes,6,opt,name=IdentitySource,json=identity_source,proto3" json:"identity_source,omitempty"`
}

func (x *ClientConfig) Reset() {
	*x = ClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfig) ProtoMessage() {}

func (x *ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfig.ProtoReflect.Descriptor instead.
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{1}
}

func (x *ClientConfig) GetLoginTemplate() string {
	if x != nil {
		return x.LoginTemplate
	}
	return ""
}

func (x *ClientConfig) GetOTPTemplate() string {
	if x != nil {
		return x.OTPTemplate
	}
	return ""
}

func (x *ClientConfig) GetConsentTemplate() string {
	if x != nil {
		return x.ConsentTemplate
	}
	return ""
}

func (x *ClientConfig) GetForceConsent() bool {
	if x != nil {
		return x.ForceConsent
	}
	return false
}

func (x *ClientConfig) GetSessionDuration() *durationpb.Duration {
	if x != nil {
		return x.SessionDuration
	}
	return nil
}

func (x *ClientConfig) GetIdentitySource() string {
	if x != nil {
		return x.IdentitySource
	}
	return ""
}

type CreateClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OAuth2 Client ID.
	ClientID string `protobuf:"bytes,1,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	// Client Secret for OAuth2 client.
	Secret string `protobuf:"bytes,2,opt,name=Secret,json=secret,proto3" json:"secret,omitempty"`
}

func (x *CreateClientResponse) Reset() {
	*x = CreateClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientResponse) ProtoMessage() {}

func (x *CreateClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientResponse.ProtoReflect.Descriptor instead.
func (*CreateClientResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{2}
}

func (x *CreateClientResponse) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CreateClientResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type UpdateClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClientID is the client identifier of the client to be updated
	ClientID string `protobuf:"bytes,1,opt,name=ClientID,json=clientID,proto3" json:"clientID,omitempty"`
	// Name is the friendly name of the client to be updated
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// CORS lists the allowed CORS Origins.
	CORS []string `protobuf:"bytes,3,rep,name=CORS,json=cors,proto3" json:"cors,omitempty"`
	// Partner logo url for display on idp.
	LogoURL string `protobuf:"bytes,4,opt,name=LogoURL,json=logo_url,proto3" json:"logo_url,omitempty"`
	// Requested scopes for user consent.
	Scopes []string `protobuf:"bytes,5,rep,name=Scopes,json=scopes,proto3" json:"scopes,omitempty"`
	// Redirect URLs accepted by client.
	RedirectURL []string `protobuf:"bytes,6,rep,name=RedirectURL,json=redirect_url,proto3" json:"redirect_url,omitempty"`
	// URL to redirect user to once logout is complete.
	LogoutRedirectURL string `protobuf:"bytes,7,opt,name=LogoutRedirectURL,json=logout_redirect_url,proto3" json:"logout_redirect_url,omitempty"`
	// Configuration for auth flow.
	Config *ClientConfig `protobuf:"bytes,8,opt,name=Config,json=config,proto3" json:"config,omitempty"`
}

func (x *UpdateClientRequest) Reset() {
	*x = UpdateClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientRequest) ProtoMessage() {}

func (x *UpdateClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientRequest.ProtoReflect.Descriptor instead.
func (*UpdateClientRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateClientRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *UpdateClientRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClientRequest) GetCORS() []string {
	if x != nil {
		return x.CORS
	}
	return nil
}

func (x *UpdateClientRequest) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *UpdateClientRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *UpdateClientRequest) GetRedirectURL() []string {
	if x != nil {
		return x.RedirectURL
	}
	return nil
}

func (x *UpdateClientRequest) GetLogoutRedirectURL() string {
	if x != nil {
		return x.LogoutRedirectURL
	}
	return ""
}

func (x *UpdateClientRequest) GetConfig() *ClientConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdateClientResponse) Reset() {
	*x = UpdateClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientResponse) ProtoMessage() {}

func (x *UpdateClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientResponse.ProtoReflect.Descriptor instead.
func (*UpdateClientResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateClientResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type ListClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID    string `protobuf:"bytes,1,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	Env         string `protobuf:"bytes,2,opt,name=Env,json=env,proto3" json:"env,omitempty"`
	OrgID       string `protobuf:"bytes,3,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	ListDisable bool   `protobuf:"varint,4,opt,name=ListDisable,json=list_disable,proto3" json:"list_disable,omitempty"`
}

func (x *ListClientsRequest) Reset() {
	*x = ListClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClientsRequest) ProtoMessage() {}

func (x *ListClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClientsRequest.ProtoReflect.Descriptor instead.
func (*ListClientsRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{5}
}

func (x *ListClientsRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *ListClientsRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *ListClientsRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ListClientsRequest) GetListDisable() bool {
	if x != nil {
		return x.ListDisable
	}
	return false
}

type Oauth2Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                 `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Env               string                 `protobuf:"bytes,2,opt,name=Env,json=env,proto3" json:"env,omitempty"`
	OrgID             string                 `protobuf:"bytes,12,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	ClientID          string                 `protobuf:"bytes,3,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	LogoURL           string                 `protobuf:"bytes,4,opt,name=LogoURL,json=logo_url,proto3" json:"logo_url,omitempty"`
	Scopes            []string               `protobuf:"bytes,5,rep,name=Scopes,json=scopes,proto3" json:"scopes,omitempty"`
	RedirectURL       []string               `protobuf:"bytes,6,rep,name=RedirectURL,json=redirect_url,proto3" json:"redirect_url,omitempty"`
	LogoutRedirectURL string                 `protobuf:"bytes,7,opt,name=LogoutRedirectURL,json=logout_redirect_url,proto3" json:"logout_redirect_url,omitempty"`
	Creator           string                 `protobuf:"bytes,8,opt,name=Creator,json=creator,proto3" json:"creator,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Disabled          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Disabled,json=disabled,proto3" json:"disabled,omitempty"`
	Config            *ClientConfig          `protobuf:"bytes,11,opt,name=Config,json=config,proto3" json:"config,omitempty"`
}

func (x *Oauth2Client) Reset() {
	*x = Oauth2Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oauth2Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oauth2Client) ProtoMessage() {}

func (x *Oauth2Client) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oauth2Client.ProtoReflect.Descriptor instead.
func (*Oauth2Client) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{6}
}

func (x *Oauth2Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Oauth2Client) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *Oauth2Client) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Oauth2Client) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *Oauth2Client) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *Oauth2Client) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Oauth2Client) GetRedirectURL() []string {
	if x != nil {
		return x.RedirectURL
	}
	return nil
}

func (x *Oauth2Client) GetLogoutRedirectURL() string {
	if x != nil {
		return x.LogoutRedirectURL
	}
	return ""
}

func (x *Oauth2Client) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Oauth2Client) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Oauth2Client) GetDisabled() *timestamppb.Timestamp {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *Oauth2Client) GetConfig() *ClientConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ListClientsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*Oauth2Client `protobuf:"bytes,1,rep,name=Clients,json=clients,proto3" json:"clients,omitempty"`
}

func (x *ListClientsResponse) Reset() {
	*x = ListClientsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClientsResponse) ProtoMessage() {}

func (x *ListClientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClientsResponse.ProtoReflect.Descriptor instead.
func (*ListClientsResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{7}
}

func (x *ListClientsResponse) GetClients() []*Oauth2Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

type DisableClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string `protobuf:"bytes,1,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
}

func (x *DisableClientRequest) Reset() {
	*x = DisableClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableClientRequest) ProtoMessage() {}

func (x *DisableClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableClientRequest.ProtoReflect.Descriptor instead.
func (*DisableClientRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{8}
}

func (x *DisableClientRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type DisableClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableClientResponse) Reset() {
	*x = DisableClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableClientResponse) ProtoMessage() {}

func (x *DisableClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableClientResponse.ProtoReflect.Descriptor instead.
func (*DisableClientResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP(), []int{9}
}

var File_brank_as_rbac_gunk_v1_oauth2_all_proto protoreflect.FileDescriptor

var file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDesc = []byte{
	0x0a, 0x26, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f,
	0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2f, 0x61,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61,
	0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc9, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1e, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x43, 0x4f, 0x52, 0x53, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x25,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x13, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x6e,
	0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe7, 0x02, 0x0a, 0x0c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x0b, 0x4f, 0x54, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x6b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x85, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x4f, 0x52, 0x53, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x11,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52,
	0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b,
	0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x32, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x60, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb5, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x03,
	0x45, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xcc, 0x04, 0x0a, 0x0c, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x48, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x69, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72,
	0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x47,
	0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x1f, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x31, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0x98, 0x0e, 0x0a, 0x11,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xa8, 0x03, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x93, 0x02, 0x0a, 0x0d, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x55, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb0, 0x03, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e,
	0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x72, 0x61,
	0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0x90, 0x02, 0x0a, 0x0d, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2c, 0x0a,
	0x2a, 0x1a, 0x28, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a,
	0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x7b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xaa, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2a, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x72,
	0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0x9b, 0x02, 0x0a, 0x0d, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x1a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4a, 0x54, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf2, 0x03, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62,
	0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xff, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd2, 0x02, 0x0a, 0x0d, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x1a,
	0x22, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x4a, 0x56, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2d, 0x0a, 0x2b,
	0x1a, 0x29, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a,
	0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x2a,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x7b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30,
	0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x3e, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x23, 0x62, 0x72,
	0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x75, 0x6e, 0x6b,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x3b, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x32, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00,
	0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescOnce sync.Once
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescData = file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDesc
)

func file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescGZIP() []byte {
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescOnce.Do(func() {
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescData)
	})
	return file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDescData
}

var (
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 10)
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_goTypes   = []interface{}{
		(ClientType)(0),               // 0: brankas.rbac.v1.oauth2.ClientType
		(*CreateClientRequest)(nil),   // 1: brankas.rbac.v1.oauth2.CreateClientRequest
		(*ClientConfig)(nil),          // 2: brankas.rbac.v1.oauth2.ClientConfig
		(*CreateClientResponse)(nil),  // 3: brankas.rbac.v1.oauth2.CreateClientResponse
		(*UpdateClientRequest)(nil),   // 4: brankas.rbac.v1.oauth2.UpdateClientRequest
		(*UpdateClientResponse)(nil),  // 5: brankas.rbac.v1.oauth2.UpdateClientResponse
		(*ListClientsRequest)(nil),    // 6: brankas.rbac.v1.oauth2.ListClientsRequest
		(*Oauth2Client)(nil),          // 7: brankas.rbac.v1.oauth2.Oauth2Client
		(*ListClientsResponse)(nil),   // 8: brankas.rbac.v1.oauth2.ListClientsResponse
		(*DisableClientRequest)(nil),  // 9: brankas.rbac.v1.oauth2.DisableClientRequest
		(*DisableClientResponse)(nil), // 10: brankas.rbac.v1.oauth2.DisableClientResponse
		(*durationpb.Duration)(nil),   // 11: google.protobuf.Duration
		(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	}
)

var file_brank_as_rbac_gunk_v1_oauth2_all_proto_depIdxs = []int32{
	0,  // 0: brankas.rbac.v1.oauth2.CreateClientRequest.ClientType:type_name -> brankas.rbac.v1.oauth2.ClientType
	2,  // 1: brankas.rbac.v1.oauth2.CreateClientRequest.Config:type_name -> brankas.rbac.v1.oauth2.ClientConfig
	11, // 2: brankas.rbac.v1.oauth2.ClientConfig.SessionDuration:type_name -> google.protobuf.Duration
	2,  // 3: brankas.rbac.v1.oauth2.UpdateClientRequest.Config:type_name -> brankas.rbac.v1.oauth2.ClientConfig
	12, // 4: brankas.rbac.v1.oauth2.UpdateClientResponse.Updated:type_name -> google.protobuf.Timestamp
	12, // 5: brankas.rbac.v1.oauth2.Oauth2Client.Created:type_name -> google.protobuf.Timestamp
	12, // 6: brankas.rbac.v1.oauth2.Oauth2Client.Disabled:type_name -> google.protobuf.Timestamp
	2,  // 7: brankas.rbac.v1.oauth2.Oauth2Client.Config:type_name -> brankas.rbac.v1.oauth2.ClientConfig
	7,  // 8: brankas.rbac.v1.oauth2.ListClientsResponse.Clients:type_name -> brankas.rbac.v1.oauth2.Oauth2Client
	1,  // 9: brankas.rbac.v1.oauth2.AuthClientService.CreateClient:input_type -> brankas.rbac.v1.oauth2.CreateClientRequest
	4,  // 10: brankas.rbac.v1.oauth2.AuthClientService.UpdateClient:input_type -> brankas.rbac.v1.oauth2.UpdateClientRequest
	6,  // 11: brankas.rbac.v1.oauth2.AuthClientService.ListClients:input_type -> brankas.rbac.v1.oauth2.ListClientsRequest
	9,  // 12: brankas.rbac.v1.oauth2.AuthClientService.DisableClient:input_type -> brankas.rbac.v1.oauth2.DisableClientRequest
	3,  // 13: brankas.rbac.v1.oauth2.AuthClientService.CreateClient:output_type -> brankas.rbac.v1.oauth2.CreateClientResponse
	5,  // 14: brankas.rbac.v1.oauth2.AuthClientService.UpdateClient:output_type -> brankas.rbac.v1.oauth2.UpdateClientResponse
	8,  // 15: brankas.rbac.v1.oauth2.AuthClientService.ListClients:output_type -> brankas.rbac.v1.oauth2.ListClientsResponse
	10, // 16: brankas.rbac.v1.oauth2.AuthClientService.DisableClient:output_type -> brankas.rbac.v1.oauth2.DisableClientResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_brank_as_rbac_gunk_v1_oauth2_all_proto_init() }
func file_brank_as_rbac_gunk_v1_oauth2_all_proto_init() {
	if File_brank_as_rbac_gunk_v1_oauth2_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oauth2Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClientsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_rbac_gunk_v1_oauth2_all_proto_goTypes,
		DependencyIndexes: file_brank_as_rbac_gunk_v1_oauth2_all_proto_depIdxs,
		EnumInfos:         file_brank_as_rbac_gunk_v1_oauth2_all_proto_enumTypes,
		MessageInfos:      file_brank_as_rbac_gunk_v1_oauth2_all_proto_msgTypes,
	}.Build()
	File_brank_as_rbac_gunk_v1_oauth2_all_proto = out.File
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_rawDesc = nil
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_goTypes = nil
	file_brank_as_rbac_gunk_v1_oauth2_all_proto_depIdxs = nil
}
