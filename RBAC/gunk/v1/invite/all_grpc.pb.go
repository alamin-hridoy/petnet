// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package invite

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InviteServiceClient is the client API for InviteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteServiceClient interface {
	// InviteUser creates a new user (developer) in our database.
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	// Resend the invite email.
	Resend(ctx context.Context, in *ResendRequest, opts ...grpc.CallOption) (*ResendResponse, error)
	// ListInvite gets a list of invite statuses.
	ListInvite(ctx context.Context, in *ListInviteRequest, opts ...grpc.CallOption) (*ListInviteResponse, error)
	// RetrieveInvite details from platform application.
	RetrieveInvite(ctx context.Context, in *RetrieveInviteRequest, opts ...grpc.CallOption) (*RetrieveInviteResponse, error)
	// CancelInvite revokes the invite from the platform.
	CancelInvite(ctx context.Context, in *CancelInviteRequest, opts ...grpc.CallOption) (*CancelInviteResponse, error)
	// Approve the platform application.
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	// Revoke the platform application. This operation
	// is valid at any point (even after the platform has been approved)
	Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error)
}

type inviteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteServiceClient(cc grpc.ClientConnInterface) InviteServiceClient {
	return &inviteServiceClient{cc}
}

func (c *inviteServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, "/brankas.rbac.v1.invite.InviteService/InviteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) Resend(ctx context.Context, in *ResendRequest, opts ...grpc.CallOption) (*ResendResponse, error) {
	out := new(ResendResponse)
	err := c.cc.Invoke(ctx, "/brankas.rbac.v1.invite.InviteService/Resend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) ListInvite(ctx context.Context, in *ListInviteRequest, opts ...grpc.CallOption) (*ListInviteResponse, error) {
	out := new(ListInviteResponse)
	err := c.cc.Invoke(ctx, "/brankas.rbac.v1.invite.InviteService/ListInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) RetrieveInvite(ctx context.Context, in *RetrieveInviteRequest, opts ...grpc.CallOption) (*RetrieveInviteResponse, error) {
	out := new(RetrieveInviteResponse)
	err := c.cc.Invoke(ctx, "/brankas.rbac.v1.invite.InviteService/RetrieveInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) CancelInvite(ctx context.Context, in *CancelInviteRequest, opts ...grpc.CallOption) (*CancelInviteResponse, error) {
	out := new(CancelInviteResponse)
	err := c.cc.Invoke(ctx, "/brankas.rbac.v1.invite.InviteService/CancelInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, "/brankas.rbac.v1.invite.InviteService/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error) {
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, "/brankas.rbac.v1.invite.InviteService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteServiceServer is the server API for InviteService service.
// All implementations must embed UnimplementedInviteServiceServer
// for forward compatibility
type InviteServiceServer interface {
	// InviteUser creates a new user (developer) in our database.
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	// Resend the invite email.
	Resend(context.Context, *ResendRequest) (*ResendResponse, error)
	// ListInvite gets a list of invite statuses.
	ListInvite(context.Context, *ListInviteRequest) (*ListInviteResponse, error)
	// RetrieveInvite details from platform application.
	RetrieveInvite(context.Context, *RetrieveInviteRequest) (*RetrieveInviteResponse, error)
	// CancelInvite revokes the invite from the platform.
	CancelInvite(context.Context, *CancelInviteRequest) (*CancelInviteResponse, error)
	// Approve the platform application.
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	// Revoke the platform application. This operation
	// is valid at any point (even after the platform has been approved)
	Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error)
	mustEmbedUnimplementedInviteServiceServer()
}

// UnimplementedInviteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInviteServiceServer struct{}

func (UnimplementedInviteServiceServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}

func (UnimplementedInviteServiceServer) Resend(context.Context, *ResendRequest) (*ResendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resend not implemented")
}

func (UnimplementedInviteServiceServer) ListInvite(context.Context, *ListInviteRequest) (*ListInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvite not implemented")
}

func (UnimplementedInviteServiceServer) RetrieveInvite(context.Context, *RetrieveInviteRequest) (*RetrieveInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvite not implemented")
}

func (UnimplementedInviteServiceServer) CancelInvite(context.Context, *CancelInviteRequest) (*CancelInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvite not implemented")
}

func (UnimplementedInviteServiceServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}

func (UnimplementedInviteServiceServer) Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedInviteServiceServer) mustEmbedUnimplementedInviteServiceServer() {}

// UnsafeInviteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteServiceServer will
// result in compilation errors.
type UnsafeInviteServiceServer interface {
	mustEmbedUnimplementedInviteServiceServer()
}

func RegisterInviteServiceServer(s grpc.ServiceRegistrar, srv InviteServiceServer) {
	s.RegisterService(&InviteService_ServiceDesc, srv)
}

func _InviteService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brankas.rbac.v1.invite.InviteService/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_Resend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).Resend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brankas.rbac.v1.invite.InviteService/Resend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).Resend(ctx, req.(*ResendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_ListInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).ListInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brankas.rbac.v1.invite.InviteService/ListInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).ListInvite(ctx, req.(*ListInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_RetrieveInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).RetrieveInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brankas.rbac.v1.invite.InviteService/RetrieveInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).RetrieveInvite(ctx, req.(*RetrieveInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_CancelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).CancelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brankas.rbac.v1.invite.InviteService/CancelInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).CancelInvite(ctx, req.(*CancelInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brankas.rbac.v1.invite.InviteService/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brankas.rbac.v1.invite.InviteService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).Revoke(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InviteService_ServiceDesc is the grpc.ServiceDesc for InviteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InviteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brankas.rbac.v1.invite.InviteService",
	HandlerType: (*InviteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteUser",
			Handler:    _InviteService_InviteUser_Handler,
		},
		{
			MethodName: "Resend",
			Handler:    _InviteService_Resend_Handler,
		},
		{
			MethodName: "ListInvite",
			Handler:    _InviteService_ListInvite_Handler,
		},
		{
			MethodName: "RetrieveInvite",
			Handler:    _InviteService_RetrieveInvite_Handler,
		},
		{
			MethodName: "CancelInvite",
			Handler:    _InviteService_CancelInvite_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _InviteService_Approve_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _InviteService_Revoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/rbac/gunk/v1/invite/all.proto",
}
