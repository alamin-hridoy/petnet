package profile // proto "petnet.v2.profile"

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

type Status int

const (
	UnknownStatus Status = iota
	Accepted
	Completed
	Pending
	Rejected
	PendingDocuments
	Incomplete
)

type RiskScore int

const (
	UnknownRiskScore RiskScore = iota
	Low
	Medium
	High
)

type Currency int

const (
	UnknownCurrency Currency = iota
	PHP
	USD
	EURO
	SGD
)

// To avoid overrides of boolean on upsert
type Boolean int

const (
	UnknownBoolean Boolean = iota
	True
	False
)

type OrgType int

const (
	UnknownOrgType OrgType = iota
	PetNet
	DSA
)

type SortBy int

const (
	DESC SortBy = iota
	ASC
)

type SortByColumn int

const (
	DateApplied SortByColumn = iota
	CompanyName
)

type SubmittedDocument int

const (
	UnknownSubmittedDocument SubmittedDocument = iota
	Submitted
	NotSubmitted
)

type UpsertProfileRequest struct {
	Profile OrgProfile `pb:"1" json:"profile"`
}

type UpsertProfileResponse struct {
	ID string `pb:"1" json:"id"`
}

type GetProfileRequest struct {
	OrgID string `pb:"1" json:"id"`
}

type GetProfileResponse struct {
	Profile OrgProfile `pb:"1" json:"profile"`
}

type GetProfileByDsaCodeRequest struct {
	DsaCode string `pb:"1" json:"dsa_code"`
}

type GetProfileByDsaCodeResponse struct {
	Profile OrgProfile `pb:"1" json:"profile"`
}

type ListProfilesRequest struct {
	Limit             int32             `pb:"1" json:"limit"`
	Offset            int32             `pb:"2" json:"offset"`
	CompanyName       string            `pb:"3" json:"company_name"`
	SortBy            SortBy            `pb:"4" json:"sort_by"`
	SortByColumn      SortByColumn      `pb:"5" json:"sort_by_column"`
	RiskScore         []RiskScore       `pb:"6" json:"risk_score"`
	Status            []Status          `pb:"7" json:"status"`
	SubmittedDocument SubmittedDocument `pb:"8" json:"submitted_document"`
	OrgType           OrgType           `pb:"9" json:"orgtype"`
	IsProvider        bool              `pb:"10" json:"is_provider"`
}

type ListProfilesResponse struct {
	Profiles []OrgProfile `pb:"1" json:"profiles"`
	Next     int32        `pb:"2" json:"next"`
	Total    int32        `pb:"3" json:"total"`
}

type OrgProfile struct {
	ID                string       `pb:"1" json:"id"`
	OrgID             string       `pb:"2" json:"org_id"`
	UserID            string       `pb:"3" json:"user_id"`
	OrgType           OrgType      `pb:"4" json:"org_type"`
	Status            Status       `pb:"5" json:"status"`
	BusinessInfo      BusinessInfo `pb:"7" json:"business_info"`
	AccountInfo       AccountInfo  `pb:"8" json:"account_info"`
	DateApplied       time.Time    `pb:"9" json:"date_applied"`
	RiskScore         RiskScore    `pb:"10" json:"risk_score"`
	ReminderSent      Boolean      `pb:"11" json:"reminder_sent"`
	Created           time.Time    `pb:"12" json:"created"`
	Updated           time.Time    `pb:"13" json:"updated"`
	Deleted           time.Time    `pb:"14" json:"deleted"`
	TransactionTypes  string       `pb:"15" json:"transaction_types"`
	DsaCode           string       `pb:"16" json:"dsa_code"`
	TerminalIdOtc     string       `pb:"17" json:"terminal_id_otc"`
	TerminalIdDigital string       `pb:"18" json:"terminal_id_digital"`
	IsProvider        bool         `pb:"19" json:"is_provider"`
	Partner           string       `pb:"20" json:"partner"`
}

type BusinessInfo struct {
	CompanyName   string  `pb:"1" json:"company_name"`
	StoreName     string  `pb:"2" json:"store_name"`
	PhoneNumber   string  `pb:"3" json:"phone_number"`
	FaxNumber     string  `pb:"4" json:"fax_number"`
	Website       string  `pb:"5" json:"website"`
	CompanyEmail  string  `pb:"6" json:"company_email"`
	ContactPerson string  `pb:"7" json:"contact_person"`
	Position      string  `pb:"8" json:"position"`
	Address       Address `pb:"9" json:"address"`
}

type AccountInfo struct {
	Bank                    string   `pb:"1" json:"bank"`
	BankAccountNumber       string   `pb:"2" json:"bank_account_number"`
	BankAccountHolder       string   `pb:"3" json:"bank_account_holder"`
	AgreeTermsConditions    Boolean  `pb:"4" json:"agree_terms_conditions"`
	AgreeOnlineSupplierForm Boolean  `pb:"5" json:"agree_online_supplier_form"`
	Currency                Currency `pb:"6" json:"currency"`
}

type Address struct {
	Address1   string `pb:"1" json:"address1"`
	City       string `pb:"2" json:"city"`
	State      string `pb:"3" json:"state"`
	PostalCode string `pb:"4" json:"postal_code"`
}

type UpdateOrgProfileUserIDRequest struct {
	OldOrgID string `pb:"1" json:"oldOrgID"`
	NewOrgID string `pb:"2" json:"newOrgID"`
	UserID   string `pb:"3" json:"user_id"`
}

type UpdateOrgProfileUserIDResponse struct {
	ID string `pb:"1" json:"id"`
}

type OrgProfileService interface {
	// Upsert org profile.
	//
	// +gunk http.Match{
	//         Method: "PUT",
	//         Path:   "/v2/orgprofile/{Profile.OrgID}",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Org Profile"},
	//         Description: "Create or update an org profile.",
	//         Summary:     "Upsert org profile.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/orgProfileUpsertProfileResponse",
	//                                 },
	//                         },
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                 },
	//         },
	// }
	UpsertProfile(UpsertProfileRequest) UpsertProfileResponse

	// Get org profile by org ID.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v2/orgprofile/{OrgID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Org Profile"},
	//         Description: "Get created org profile from org ID.",
	//         Summary:     "Get org profile.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/orgProfileGetProfileResponse",
	//                                 },
	//                         },
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                 },
	//         },
	// }
	GetProfile(GetProfileRequest) GetProfileResponse

	// Get org profile by DsaCode.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v2/orgprofile/{DsaCode}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Org Profile"},
	//         Description: "Get created org profile from DsaCode.",
	//         Summary:     "Get org profile.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/orgProfileGetProfileByDsaCodeResponse",
	//                                 },
	//                         },
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                 },
	//         },
	// }
	GetProfileByDsaCode(GetProfileByDsaCodeRequest) GetProfileByDsaCodeResponse

	// List org profiles.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v2/orgprofile",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Org Profile"},
	//         Description: "List all created org profiles.",
	//         Summary:     "List org profiles.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/orgProfileGetProfileResponse",
	//                                 },
	//                         },
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                 },
	//         },
	// }
	ListProfiles(ListProfilesRequest) ListProfilesResponse

	// Update org profile UserID.
	//
	// +gunk http.Match{
	//         Method: "PUT",
	//         Path:   "/v2/orgprofile/{OldOrgID}",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Org Profile"},
	//         Description: "Create or update an org profile.",
	//         Summary:     "Upsert org profile.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/orgProfileUpdateOrgProfileUserIDResponse",
	//                                 },
	//                         },
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                 },
	//         },
	// }
	UpdateOrgProfileUserID(UpdateOrgProfileUserIDRequest) UpdateOrgProfileUserIDResponse
}
