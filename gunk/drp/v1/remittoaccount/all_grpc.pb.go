// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package remittoaccount

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemitToAccountServiceClient is the client API for RemitToAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemitToAccountServiceClient interface {
	// RTA Inquire.
	RTAInquire(ctx context.Context, in *RTAInquireRequest, opts ...grpc.CallOption) (*RTAInquireResponse, error)
	// RTA Payment.
	RTAPayment(ctx context.Context, in *RTAPaymentRequest, opts ...grpc.CallOption) (*RTAPaymentResponse, error)
	// RTA Retry.
	RTARetry(ctx context.Context, in *RTARetryRequest, opts ...grpc.CallOption) (*RTARetryResponse, error)
}

type remitToAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemitToAccountServiceClient(cc grpc.ClientConnInterface) RemitToAccountServiceClient {
	return &remitToAccountServiceClient{cc}
}

func (c *remitToAccountServiceClient) RTAInquire(ctx context.Context, in *RTAInquireRequest, opts ...grpc.CallOption) (*RTAInquireResponse, error) {
	out := new(RTAInquireResponse)
	err := c.cc.Invoke(ctx, "/remittoaccount.RemitToAccountService/RTAInquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remitToAccountServiceClient) RTAPayment(ctx context.Context, in *RTAPaymentRequest, opts ...grpc.CallOption) (*RTAPaymentResponse, error) {
	out := new(RTAPaymentResponse)
	err := c.cc.Invoke(ctx, "/remittoaccount.RemitToAccountService/RTAPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remitToAccountServiceClient) RTARetry(ctx context.Context, in *RTARetryRequest, opts ...grpc.CallOption) (*RTARetryResponse, error) {
	out := new(RTARetryResponse)
	err := c.cc.Invoke(ctx, "/remittoaccount.RemitToAccountService/RTARetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemitToAccountServiceServer is the server API for RemitToAccountService service.
// All implementations must embed UnimplementedRemitToAccountServiceServer
// for forward compatibility
type RemitToAccountServiceServer interface {
	// RTA Inquire.
	RTAInquire(context.Context, *RTAInquireRequest) (*RTAInquireResponse, error)
	// RTA Payment.
	RTAPayment(context.Context, *RTAPaymentRequest) (*RTAPaymentResponse, error)
	// RTA Retry.
	RTARetry(context.Context, *RTARetryRequest) (*RTARetryResponse, error)
	mustEmbedUnimplementedRemitToAccountServiceServer()
}

// UnimplementedRemitToAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemitToAccountServiceServer struct{}

func (UnimplementedRemitToAccountServiceServer) RTAInquire(context.Context, *RTAInquireRequest) (*RTAInquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RTAInquire not implemented")
}

func (UnimplementedRemitToAccountServiceServer) RTAPayment(context.Context, *RTAPaymentRequest) (*RTAPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RTAPayment not implemented")
}

func (UnimplementedRemitToAccountServiceServer) RTARetry(context.Context, *RTARetryRequest) (*RTARetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RTARetry not implemented")
}
func (UnimplementedRemitToAccountServiceServer) mustEmbedUnimplementedRemitToAccountServiceServer() {}

// UnsafeRemitToAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemitToAccountServiceServer will
// result in compilation errors.
type UnsafeRemitToAccountServiceServer interface {
	mustEmbedUnimplementedRemitToAccountServiceServer()
}

func RegisterRemitToAccountServiceServer(s grpc.ServiceRegistrar, srv RemitToAccountServiceServer) {
	s.RegisterService(&RemitToAccountService_ServiceDesc, srv)
}

func _RemitToAccountService_RTAInquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RTAInquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemitToAccountServiceServer).RTAInquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittoaccount.RemitToAccountService/RTAInquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemitToAccountServiceServer).RTAInquire(ctx, req.(*RTAInquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemitToAccountService_RTAPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RTAPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemitToAccountServiceServer).RTAPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittoaccount.RemitToAccountService/RTAPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemitToAccountServiceServer).RTAPayment(ctx, req.(*RTAPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemitToAccountService_RTARetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RTARetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemitToAccountServiceServer).RTARetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittoaccount.RemitToAccountService/RTARetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemitToAccountServiceServer).RTARetry(ctx, req.(*RTARetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemitToAccountService_ServiceDesc is the grpc.ServiceDesc for RemitToAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemitToAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remittoaccount.RemitToAccountService",
	HandlerType: (*RemitToAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RTAInquire",
			Handler:    _RemitToAccountService_RTAInquire_Handler,
		},
		{
			MethodName: "RTAPayment",
			Handler:    _RemitToAccountService_RTAPayment_Handler,
		},
		{
			MethodName: "RTARetry",
			Handler:    _RemitToAccountService_RTARetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/remittoaccount/all.proto",
}
