// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dsa

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DSAServiceClient is the client API for DSAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DSAServiceClient interface {
	// CreateDSA Creates DSA record.
	CreateDSA(ctx context.Context, in *CreateDSARequest, opts ...grpc.CallOption) (*DSA, error)
	// UpdateDSA Updates DSA record by id.
	UpdateDSA(ctx context.Context, in *UpdateDSARequest, opts ...grpc.CallOption) (*DSA, error)
	// GetDSAByID Gets DSA record by ID.
	GetDSAByID(ctx context.Context, in *GetDSAByIDRequest, opts ...grpc.CallOption) (*DSA, error)
	// ListDSA Gets all DSA records
	ListDSA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSAResponse, error)
	// DeleteDSAByID Deletes DSA record by ID.
	DeleteDSAByID(ctx context.Context, in *DeleteDSAByIDRequest, opts ...grpc.CallOption) (*DSA, error)
}

type dSAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDSAServiceClient(cc grpc.ClientConnInterface) DSAServiceClient {
	return &dSAServiceClient{cc}
}

func (c *dSAServiceClient) CreateDSA(ctx context.Context, in *CreateDSARequest, opts ...grpc.CallOption) (*DSA, error) {
	out := new(DSA)
	err := c.cc.Invoke(ctx, "/dsa.DSAService/CreateDSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSAServiceClient) UpdateDSA(ctx context.Context, in *UpdateDSARequest, opts ...grpc.CallOption) (*DSA, error) {
	out := new(DSA)
	err := c.cc.Invoke(ctx, "/dsa.DSAService/UpdateDSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSAServiceClient) GetDSAByID(ctx context.Context, in *GetDSAByIDRequest, opts ...grpc.CallOption) (*DSA, error) {
	out := new(DSA)
	err := c.cc.Invoke(ctx, "/dsa.DSAService/GetDSAByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSAServiceClient) ListDSA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSAResponse, error) {
	out := new(ListDSAResponse)
	err := c.cc.Invoke(ctx, "/dsa.DSAService/ListDSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSAServiceClient) DeleteDSAByID(ctx context.Context, in *DeleteDSAByIDRequest, opts ...grpc.CallOption) (*DSA, error) {
	out := new(DSA)
	err := c.cc.Invoke(ctx, "/dsa.DSAService/DeleteDSAByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSAServiceServer is the server API for DSAService service.
// All implementations must embed UnimplementedDSAServiceServer
// for forward compatibility
type DSAServiceServer interface {
	// CreateDSA Creates DSA record.
	CreateDSA(context.Context, *CreateDSARequest) (*DSA, error)
	// UpdateDSA Updates DSA record by id.
	UpdateDSA(context.Context, *UpdateDSARequest) (*DSA, error)
	// GetDSAByID Gets DSA record by ID.
	GetDSAByID(context.Context, *GetDSAByIDRequest) (*DSA, error)
	// ListDSA Gets all DSA records
	ListDSA(context.Context, *emptypb.Empty) (*ListDSAResponse, error)
	// DeleteDSAByID Deletes DSA record by ID.
	DeleteDSAByID(context.Context, *DeleteDSAByIDRequest) (*DSA, error)
	mustEmbedUnimplementedDSAServiceServer()
}

// UnimplementedDSAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDSAServiceServer struct{}

func (UnimplementedDSAServiceServer) CreateDSA(context.Context, *CreateDSARequest) (*DSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDSA not implemented")
}

func (UnimplementedDSAServiceServer) UpdateDSA(context.Context, *UpdateDSARequest) (*DSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDSA not implemented")
}

func (UnimplementedDSAServiceServer) GetDSAByID(context.Context, *GetDSAByIDRequest) (*DSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSAByID not implemented")
}

func (UnimplementedDSAServiceServer) ListDSA(context.Context, *emptypb.Empty) (*ListDSAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDSA not implemented")
}

func (UnimplementedDSAServiceServer) DeleteDSAByID(context.Context, *DeleteDSAByIDRequest) (*DSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDSAByID not implemented")
}
func (UnimplementedDSAServiceServer) mustEmbedUnimplementedDSAServiceServer() {}

// UnsafeDSAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DSAServiceServer will
// result in compilation errors.
type UnsafeDSAServiceServer interface {
	mustEmbedUnimplementedDSAServiceServer()
}

func RegisterDSAServiceServer(s grpc.ServiceRegistrar, srv DSAServiceServer) {
	s.RegisterService(&DSAService_ServiceDesc, srv)
}

func _DSAService_CreateDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSAServiceServer).CreateDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsa.DSAService/CreateDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSAServiceServer).CreateDSA(ctx, req.(*CreateDSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSAService_UpdateDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSAServiceServer).UpdateDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsa.DSAService/UpdateDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSAServiceServer).UpdateDSA(ctx, req.(*UpdateDSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSAService_GetDSAByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSAByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSAServiceServer).GetDSAByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsa.DSAService/GetDSAByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSAServiceServer).GetDSAByID(ctx, req.(*GetDSAByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSAService_ListDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSAServiceServer).ListDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsa.DSAService/ListDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSAServiceServer).ListDSA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSAService_DeleteDSAByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDSAByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSAServiceServer).DeleteDSAByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsa.DSAService/DeleteDSAByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSAServiceServer).DeleteDSAByID(ctx, req.(*DeleteDSAByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DSAService_ServiceDesc is the grpc.ServiceDesc for DSAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DSAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dsa.DSAService",
	HandlerType: (*DSAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDSA",
			Handler:    _DSAService_CreateDSA_Handler,
		},
		{
			MethodName: "UpdateDSA",
			Handler:    _DSAService_UpdateDSA_Handler,
		},
		{
			MethodName: "GetDSAByID",
			Handler:    _DSAService_GetDSAByID_Handler,
		},
		{
			MethodName: "ListDSA",
			Handler:    _DSAService_ListDSA_Handler,
		},
		{
			MethodName: "DeleteDSAByID",
			Handler:    _DSAService_DeleteDSAByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/dsa/all.proto",
}
