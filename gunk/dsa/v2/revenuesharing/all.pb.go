// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v2/revenuesharing/all.proto

package revenuesharing

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RemitType are types of remittance services. Ex. REMITTANCE, BILLSPAYMENT etc.
type RemitType int32

const (
	RemitType_EMPTYSERVICETYPE RemitType = 0
	RemitType_REMITTANCE       RemitType = 1
	RemitType_BILLSPAYMENT     RemitType = 2
	RemitType_CASHINCASHOUT    RemitType = 3
	RemitType_MICROINSURANCE   RemitType = 4
)

// Enum value maps for RemitType.
var (
	RemitType_name = map[int32]string{
		0: "EMPTYSERVICETYPE",
		1: "REMITTANCE",
		2: "BILLSPAYMENT",
		3: "CASHINCASHOUT",
		4: "MICROINSURANCE",
	}
	RemitType_value = map[string]int32{
		"EMPTYSERVICETYPE": 0,
		"REMITTANCE":       1,
		"BILLSPAYMENT":     2,
		"CASHINCASHOUT":    3,
		"MICROINSURANCE":   4,
	}
)

func (x RemitType) Enum() *RemitType {
	p := new(RemitType)
	*p = x
	return p
}

func (x RemitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemitType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[0].Descriptor()
}

func (RemitType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[0]
}

func (x RemitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemitType.Descriptor instead.
func (RemitType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{0}
}

// BoundType can be either inbound or outbound
type BoundType int32

const (
	BoundType_EMPTYBOUNDTYPE BoundType = 0
	BoundType_INBOUND        BoundType = 1
	BoundType_OUTBOUND       BoundType = 2
	BoundType_OTHERS         BoundType = 3
)

// Enum value maps for BoundType.
var (
	BoundType_name = map[int32]string{
		0: "EMPTYBOUNDTYPE",
		1: "INBOUND",
		2: "OUTBOUND",
		3: "OTHERS",
	}
	BoundType_value = map[string]int32{
		"EMPTYBOUNDTYPE": 0,
		"INBOUND":        1,
		"OUTBOUND":       2,
		"OTHERS":         3,
	}
)

func (x BoundType) Enum() *BoundType {
	p := new(BoundType)
	*p = x
	return p
}

func (x BoundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoundType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[1].Descriptor()
}

func (BoundType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[1]
}

func (x BoundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoundType.Descriptor instead.
func (BoundType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{1}
}

// TierType denotes whether commission is in fixed tier ot range tier
type TierType int32

const (
	TierType_EMPTYTIERTYPE  TierType = 0
	TierType_PERCENTAGE     TierType = 1
	TierType_TIERPERCENTAGE TierType = 2
)

// Enum value maps for TierType.
var (
	TierType_name = map[int32]string{
		0: "EMPTYTIERTYPE",
		1: "PERCENTAGE",
		2: "TIERPERCENTAGE",
	}
	TierType_value = map[string]int32{
		"EMPTYTIERTYPE":  0,
		"PERCENTAGE":     1,
		"TIERPERCENTAGE": 2,
	}
)

func (x TierType) Enum() *TierType {
	p := new(TierType)
	*p = x
	return p
}

func (x TierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TierType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[2].Descriptor()
}

func (TierType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[2]
}

func (x TierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TierType.Descriptor instead.
func (TierType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{2}
}

// TransactionType is type of transaction
type TransactionType int32

const (
	TransactionType_EMPTYTRANSACTIONTYPE TransactionType = 0
	TransactionType_DIGITAL              TransactionType = 1
	TransactionType_OTC                  TransactionType = 2
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "EMPTYTRANSACTIONTYPE",
		1: "DIGITAL",
		2: "OTC",
	}
	TransactionType_value = map[string]int32{
		"EMPTYTRANSACTIONTYPE": 0,
		"DIGITAL":              1,
		"OTC":                  2,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[3].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes[3]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{3}
}

type RevenueSharing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count     int32                  `protobuf:"varint,14,opt,name=Count,json=count,proto3" json:"count,omitempty"`
}

func (x *RevenueSharing) Reset() {
	*x = RevenueSharing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevenueSharing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueSharing) ProtoMessage() {}

func (x *RevenueSharing) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueSharing.ProtoReflect.Descriptor instead.
func (*RevenueSharing) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{0}
}

func (x *RevenueSharing) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RevenueSharing) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RevenueSharing) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RevenueSharing) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *RevenueSharing) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *RevenueSharing) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *RevenueSharing) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *RevenueSharing) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *RevenueSharing) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RevenueSharing) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *RevenueSharing) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *RevenueSharing) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RevenueSharing) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *RevenueSharing) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RevenueSharingTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *RevenueSharingTier) Reset() {
	*x = RevenueSharingTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevenueSharingTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueSharingTier) ProtoMessage() {}

func (x *RevenueSharingTier) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueSharingTier.ProtoReflect.Descriptor instead.
func (*RevenueSharingTier) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{1}
}

func (x *RevenueSharingTier) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RevenueSharingTier) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *RevenueSharingTier) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *RevenueSharingTier) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *RevenueSharingTier) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreateRevenueSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID   string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,3,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,4,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,5,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,6,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,7,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,8,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,9,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Created,json=created,proto3" json:"created,omitempty"`
}

func (x *CreateRevenueSharingRequest) Reset() {
	*x = CreateRevenueSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueSharingRequest) ProtoMessage() {}

func (x *CreateRevenueSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueSharingRequest.ProtoReflect.Descriptor instead.
func (*CreateRevenueSharingRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRevenueSharingRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *CreateRevenueSharingRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateRevenueSharingRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *CreateRevenueSharingRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *CreateRevenueSharingRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *CreateRevenueSharingRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *CreateRevenueSharingRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *CreateRevenueSharingRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreateRevenueSharingRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateRevenueSharingRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type CreateRevenueSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *CreateRevenueSharingResponse) Reset() {
	*x = CreateRevenueSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueSharingResponse) ProtoMessage() {}

func (x *CreateRevenueSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueSharingResponse.ProtoReflect.Descriptor instead.
func (*CreateRevenueSharingResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRevenueSharingResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CreateRevenueSharingResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *CreateRevenueSharingResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateRevenueSharingResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *CreateRevenueSharingResponse) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *CreateRevenueSharingResponse) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *CreateRevenueSharingResponse) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *CreateRevenueSharingResponse) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *CreateRevenueSharingResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreateRevenueSharingResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateRevenueSharingResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateRevenueSharingResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CreateRevenueSharingResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type UpdateRevenueSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Created,json=created,proto3" json:"created,omitempty"`
}

func (x *UpdateRevenueSharingRequest) Reset() {
	*x = UpdateRevenueSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueSharingRequest) ProtoMessage() {}

func (x *UpdateRevenueSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueSharingRequest.ProtoReflect.Descriptor instead.
func (*UpdateRevenueSharingRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRevenueSharingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRevenueSharingRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpdateRevenueSharingRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateRevenueSharingRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpdateRevenueSharingRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *UpdateRevenueSharingRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *UpdateRevenueSharingRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *UpdateRevenueSharingRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *UpdateRevenueSharingRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpdateRevenueSharingRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdateRevenueSharingRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpdateRevenueSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdateRevenueSharingResponse) Reset() {
	*x = UpdateRevenueSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueSharingResponse) ProtoMessage() {}

func (x *UpdateRevenueSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueSharingResponse.ProtoReflect.Descriptor instead.
func (*UpdateRevenueSharingResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRevenueSharingResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRevenueSharingResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpdateRevenueSharingResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateRevenueSharingResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpdateRevenueSharingResponse) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *UpdateRevenueSharingResponse) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *UpdateRevenueSharingResponse) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *UpdateRevenueSharingResponse) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *UpdateRevenueSharingResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpdateRevenueSharingResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdateRevenueSharingResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateRevenueSharingResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UpdateRevenueSharingResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type CreateRevenueSharingTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevenueSharingID string `protobuf:"bytes,1,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,2,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,3,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,4,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *CreateRevenueSharingTierRequest) Reset() {
	*x = CreateRevenueSharingTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueSharingTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueSharingTierRequest) ProtoMessage() {}

func (x *CreateRevenueSharingTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueSharingTierRequest.ProtoReflect.Descriptor instead.
func (*CreateRevenueSharingTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRevenueSharingTierRequest) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *CreateRevenueSharingTierRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *CreateRevenueSharingTierRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *CreateRevenueSharingTierRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreateRevenueSharingTierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *CreateRevenueSharingTierResponse) Reset() {
	*x = CreateRevenueSharingTierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueSharingTierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueSharingTierResponse) ProtoMessage() {}

func (x *CreateRevenueSharingTierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueSharingTierResponse.ProtoReflect.Descriptor instead.
func (*CreateRevenueSharingTierResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRevenueSharingTierResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CreateRevenueSharingTierResponse) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *CreateRevenueSharingTierResponse) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *CreateRevenueSharingTierResponse) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *CreateRevenueSharingTierResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UpdateRevenueSharingTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *UpdateRevenueSharingTierRequest) Reset() {
	*x = UpdateRevenueSharingTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueSharingTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueSharingTierRequest) ProtoMessage() {}

func (x *UpdateRevenueSharingTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueSharingTierRequest.ProtoReflect.Descriptor instead.
func (*UpdateRevenueSharingTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRevenueSharingTierRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRevenueSharingTierRequest) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *UpdateRevenueSharingTierRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *UpdateRevenueSharingTierRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *UpdateRevenueSharingTierRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UpdateRevenueSharingTierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *UpdateRevenueSharingTierResponse) Reset() {
	*x = UpdateRevenueSharingTierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueSharingTierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueSharingTierResponse) ProtoMessage() {}

func (x *UpdateRevenueSharingTierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueSharingTierResponse.ProtoReflect.Descriptor instead.
func (*UpdateRevenueSharingTierResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRevenueSharingTierResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRevenueSharingTierResponse) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *UpdateRevenueSharingTierResponse) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *UpdateRevenueSharingTierResponse) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *UpdateRevenueSharingTierResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetRevenueSharingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count     int32                  `protobuf:"varint,14,opt,name=Count,json=count,proto3" json:"count,omitempty"`
}

func (x *GetRevenueSharingListRequest) Reset() {
	*x = GetRevenueSharingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueSharingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueSharingListRequest) ProtoMessage() {}

func (x *GetRevenueSharingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueSharingListRequest.ProtoReflect.Descriptor instead.
func (*GetRevenueSharingListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{10}
}

func (x *GetRevenueSharingListRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetRevenueSharingListRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *GetRevenueSharingListRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetRevenueSharingListRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *GetRevenueSharingListRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *GetRevenueSharingListRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *GetRevenueSharingListRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *GetRevenueSharingListRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *GetRevenueSharingListRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetRevenueSharingListRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetRevenueSharingListRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *GetRevenueSharingListRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetRevenueSharingListRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *GetRevenueSharingListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRevenueSharingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RevenueSharing `protobuf:"bytes,1,rep,name=Results,json=results,proto3" json:"results,omitempty"`
}

func (x *GetRevenueSharingListResponse) Reset() {
	*x = GetRevenueSharingListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueSharingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueSharingListResponse) ProtoMessage() {}

func (x *GetRevenueSharingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueSharingListResponse.ProtoReflect.Descriptor instead.
func (*GetRevenueSharingListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{11}
}

func (x *GetRevenueSharingListResponse) GetResults() []*RevenueSharing {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetRevenueSharingTierListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *GetRevenueSharingTierListRequest) Reset() {
	*x = GetRevenueSharingTierListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueSharingTierListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueSharingTierListRequest) ProtoMessage() {}

func (x *GetRevenueSharingTierListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueSharingTierListRequest.ProtoReflect.Descriptor instead.
func (*GetRevenueSharingTierListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{12}
}

func (x *GetRevenueSharingTierListRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetRevenueSharingTierListRequest) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *GetRevenueSharingTierListRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *GetRevenueSharingTierListRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *GetRevenueSharingTierListRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetRevenueSharingTierListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RevenueSharingTier `protobuf:"bytes,1,rep,name=Results,json=results,proto3" json:"results,omitempty"`
}

func (x *GetRevenueSharingTierListResponse) Reset() {
	*x = GetRevenueSharingTierListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueSharingTierListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueSharingTierListResponse) ProtoMessage() {}

func (x *GetRevenueSharingTierListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueSharingTierListResponse.ProtoReflect.Descriptor instead.
func (*GetRevenueSharingTierListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{13}
}

func (x *GetRevenueSharingTierListResponse) GetResults() []*RevenueSharingTier {
	if x != nil {
		return x.Results
	}
	return nil
}

type DeleteRevenueSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count     int32                  `protobuf:"varint,14,opt,name=Count,json=count,proto3" json:"count,omitempty"`
}

func (x *DeleteRevenueSharingRequest) Reset() {
	*x = DeleteRevenueSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRevenueSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRevenueSharingRequest) ProtoMessage() {}

func (x *DeleteRevenueSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRevenueSharingRequest.ProtoReflect.Descriptor instead.
func (*DeleteRevenueSharingRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRevenueSharingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteRevenueSharingRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *DeleteRevenueSharingRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DeleteRevenueSharingRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *DeleteRevenueSharingRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *DeleteRevenueSharingRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *DeleteRevenueSharingRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *DeleteRevenueSharingRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *DeleteRevenueSharingRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DeleteRevenueSharingRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *DeleteRevenueSharingRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *DeleteRevenueSharingRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DeleteRevenueSharingRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *DeleteRevenueSharingRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeleteRevenueSharingTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *DeleteRevenueSharingTierRequest) Reset() {
	*x = DeleteRevenueSharingTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRevenueSharingTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRevenueSharingTierRequest) ProtoMessage() {}

func (x *DeleteRevenueSharingTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRevenueSharingTierRequest.ProtoReflect.Descriptor instead.
func (*DeleteRevenueSharingTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteRevenueSharingTierRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteRevenueSharingTierRequest) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *DeleteRevenueSharingTierRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *DeleteRevenueSharingTierRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *DeleteRevenueSharingTierRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type DeleteRevenueSharingTierByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	PartnerCommissionID string `protobuf:"bytes,2,opt,name=PartnerCommissionID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue            string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue            string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount              string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *DeleteRevenueSharingTierByIdRequest) Reset() {
	*x = DeleteRevenueSharingTierByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRevenueSharingTierByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRevenueSharingTierByIdRequest) ProtoMessage() {}

func (x *DeleteRevenueSharingTierByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRevenueSharingTierByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteRevenueSharingTierByIdRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRevenueSharingTierByIdRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteRevenueSharingTierByIdRequest) GetPartnerCommissionID() string {
	if x != nil {
		return x.PartnerCommissionID
	}
	return ""
}

func (x *DeleteRevenueSharingTierByIdRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *DeleteRevenueSharingTierByIdRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *DeleteRevenueSharingTierByIdRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UpsertRevenueSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Created,json=created,proto3" json:"created,omitempty"`
}

func (x *UpsertRevenueSharingRequest) Reset() {
	*x = UpsertRevenueSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRevenueSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRevenueSharingRequest) ProtoMessage() {}

func (x *UpsertRevenueSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRevenueSharingRequest.ProtoReflect.Descriptor instead.
func (*UpsertRevenueSharingRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{17}
}

func (x *UpsertRevenueSharingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpsertRevenueSharingRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpsertRevenueSharingRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpsertRevenueSharingRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpsertRevenueSharingRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *UpsertRevenueSharingRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *UpsertRevenueSharingRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *UpsertRevenueSharingRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *UpsertRevenueSharingRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpsertRevenueSharingRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpsertRevenueSharingRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpsertRevenueSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID  string `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Partner string `protobuf:"bytes,4,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,5,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.revenuesharing.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,6,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.revenuesharing.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,7,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.revenuesharing.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,8,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.revenuesharing.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *UpsertRevenueSharingResponse) Reset() {
	*x = UpsertRevenueSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRevenueSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRevenueSharingResponse) ProtoMessage() {}

func (x *UpsertRevenueSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRevenueSharingResponse.ProtoReflect.Descriptor instead.
func (*UpsertRevenueSharingResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertRevenueSharingResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpsertRevenueSharingResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpsertRevenueSharingResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpsertRevenueSharingResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpsertRevenueSharingResponse) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *UpsertRevenueSharingResponse) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *UpsertRevenueSharingResponse) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *UpsertRevenueSharingResponse) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *UpsertRevenueSharingResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpsertRevenueSharingResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpsertRevenueSharingResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpsertRevenueSharingResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UpsertRevenueSharingResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type UpsertRevenueSharingTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *UpsertRevenueSharingTierRequest) Reset() {
	*x = UpsertRevenueSharingTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRevenueSharingTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRevenueSharingTierRequest) ProtoMessage() {}

func (x *UpsertRevenueSharingTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRevenueSharingTierRequest.ProtoReflect.Descriptor instead.
func (*UpsertRevenueSharingTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{19}
}

func (x *UpsertRevenueSharingTierRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpsertRevenueSharingTierRequest) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *UpsertRevenueSharingTierRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *UpsertRevenueSharingTierRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *UpsertRevenueSharingTierRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UpsertRevenueSharingTierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	RevenueSharingID string `protobuf:"bytes,2,opt,name=RevenueSharingID,json=revenue_sharing_id,proto3" json:"revenue_sharing_id,omitempty"`
	MinValue         string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue         string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount           string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *UpsertRevenueSharingTierResponse) Reset() {
	*x = UpsertRevenueSharingTierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRevenueSharingTierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRevenueSharingTierResponse) ProtoMessage() {}

func (x *UpsertRevenueSharingTierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRevenueSharingTierResponse.ProtoReflect.Descriptor instead.
func (*UpsertRevenueSharingTierResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{20}
}

func (x *UpsertRevenueSharingTierResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpsertRevenueSharingTierResponse) GetRevenueSharingID() string {
	if x != nil {
		return x.RevenueSharingID
	}
	return ""
}

func (x *UpsertRevenueSharingTierResponse) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *UpsertRevenueSharingTierResponse) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *UpsertRevenueSharingTierResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetPartnerTransactionTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partners string `protobuf:"bytes,2,opt,name=Partners,json=partners,proto3" json:"partners,omitempty"`
}

func (x *GetPartnerTransactionTypeRequest) Reset() {
	*x = GetPartnerTransactionTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerTransactionTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerTransactionTypeRequest) ProtoMessage() {}

func (x *GetPartnerTransactionTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerTransactionTypeRequest.ProtoReflect.Descriptor instead.
func (*GetPartnerTransactionTypeRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{21}
}

func (x *GetPartnerTransactionTypeRequest) GetPartners() string {
	if x != nil {
		return x.Partners
	}
	return ""
}

type PartnerDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Stype            string                 `protobuf:"bytes,2,opt,name=Stype,json=stype,proto3" json:"stype,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	TransactionTypes []string               `protobuf:"bytes,4,rep,name=TransactionTypes,json=transaction_types,proto3" json:"transaction_types,omitempty"`
	Created          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Status           string                 `protobuf:"bytes,7,opt,name=Status,json=status,proto3" json:"status,omitempty"`
}

func (x *PartnerDetail) Reset() {
	*x = PartnerDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerDetail) ProtoMessage() {}

func (x *PartnerDetail) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerDetail.ProtoReflect.Descriptor instead.
func (*PartnerDetail) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{22}
}

func (x *PartnerDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PartnerDetail) GetStype() string {
	if x != nil {
		return x.Stype
	}
	return ""
}

func (x *PartnerDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartnerDetail) GetTransactionTypes() []string {
	if x != nil {
		return x.TransactionTypes
	}
	return nil
}

func (x *PartnerDetail) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PartnerDetail) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *PartnerDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetPartnerTransactionTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerDetails []*PartnerDetail `protobuf:"bytes,1,rep,name=PartnerDetails,json=partner_details,proto3" json:"partner_details,omitempty"`
}

func (x *GetPartnerTransactionTypeResponse) Reset() {
	*x = GetPartnerTransactionTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerTransactionTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerTransactionTypeResponse) ProtoMessage() {}

func (x *GetPartnerTransactionTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerTransactionTypeResponse.ProtoReflect.Descriptor instead.
func (*GetPartnerTransactionTypeResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP(), []int{23}
}

func (x *GetPartnerTransactionTypeResponse) GetPartnerDetails() []*PartnerDetail {
	if x != nil {
		return x.PartnerDetails
	}
	return nil
}

var File_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDesc = []byte{
	0x0a, 0x34, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x06, 0x0a,
	0x0e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x54,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xe8, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xce, 0x05, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x54,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x61, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x92, 0x41, 0x58, 0x0a, 0x56, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfd, 0x05, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x54, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe3, 0x05, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x5a, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x51, 0x0a, 0x4f, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xfd, 0x05, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x94, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x41, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x38, 0x0a, 0x36, 0xd2, 0x01, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xb5, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08,
	0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x46, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0xd2,
	0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xd1, 0x06, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4b, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x38, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a,
	0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x90, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x4d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x3a, 0x20, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x17, 0x0a, 0x15, 0xd2, 0x01,
	0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xed, 0x06, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4b, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x55, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0xd2, 0x01, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x17, 0x0a,
	0x15, 0xd2, 0x01, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x10, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22,
	0xea, 0x05, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x54,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x61, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x92, 0x41, 0x58, 0x0a, 0x56, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfd, 0x05, 0x0a,
	0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x54, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb5, 0x02, 0x0a,
	0x1f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x46, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01,
	0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2,
	0x01, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x62, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x16, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0xd2, 0x01, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0xd6, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x89, 0x01, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x82, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12,
	0x0a, 0x0a, 0x52, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x43, 0x41, 0x53, 0x48,
	0x49, 0x4e, 0x43, 0x41, 0x53, 0x48, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x16, 0x0a, 0x0e, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x5a, 0x0a, 0x09, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0f, 0x0a, 0x07, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x10, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x03, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x51, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x0d, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x54, 0x49, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16,
	0x0a, 0x0e, 0x54, 0x49, 0x45, 0x52, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x51, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x14, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x44,
	0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03,
	0x4f, 0x54, 0x43, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xd3, 0x2a,
	0x0a, 0x15, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd8, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcc, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x02, 0x0a, 0x0f, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x1a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x6c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x65, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x43, 0x0a, 0x41, 0x1a, 0x3f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xd8, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x02, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x1a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x4a, 0x6c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x65, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x43, 0x0a, 0x41,
	0x1a, 0x3f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf7, 0x03,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xdf, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb2, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x15, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x54, 0x69, 0x65, 0x72, 0x2e, 0x1a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x69, 0x65, 0x72, 0x2e, 0x4a, 0x70, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x69, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x47, 0x0a,
	0x45, 0x1a, 0x43, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x74,
	0x69, 0x65, 0x72, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf7, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb2, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x69, 0x65, 0x72, 0x2e,
	0x1a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x4a, 0x70,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x69, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x47, 0x0a, 0x45, 0x1a, 0x43, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x1a, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xe8, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb4, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x1a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x6d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x66, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x44, 0x0a,
	0x42, 0x1a, 0x40, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x00, 0x30, 0x00, 0x12, 0x87, 0x04, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xec, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc2, 0x02,
	0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x1a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x69, 0x65, 0x72, 0x2e, 0x4a, 0x71, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x6a, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x48,
	0x0a, 0x46, 0x1a, 0x44, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69,
	0x65, 0x72, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb2, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x35, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc8,
	0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa3, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x1a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5e,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x00, 0x12, 0xc4, 0x02, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd2, 0x01, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa8, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x1a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x69, 0x65, 0x72, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x5e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69, 0x65, 0x72,
	0x28, 0x00, 0x12, 0xd2, 0x02, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x3d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd8, 0x01, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0xa8, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x1a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x69, 0x65, 0x72, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a,
	0x5e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x2d,
	0x62, 0x79, 0x2d, 0x69, 0x64, 0x28, 0x00, 0x12, 0xdf, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd3, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x02, 0x0a, 0x0f, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x1a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x6c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x65, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x43, 0x0a, 0x41, 0x1a, 0x3f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x75,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xfe, 0x03, 0x0a, 0x18, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb2, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x69, 0x65,
	0x72, 0x2e, 0x1a, 0x1c, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2e,
	0x4a, 0x70, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x69, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x47, 0x0a, 0x45, 0x1a, 0x43, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x2d,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xe1, 0x03, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc6, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x11, 0x67, 0x65, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x1a, 0x11, 0x67, 0x65, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x4a, 0x71, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x6a, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x48,
	0x0a, 0x46, 0x1a, 0x44, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03,
	0x88, 0x02, 0x00, 0x42, 0x54, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x39, 0x62, 0x72, 0x61, 0x6e, 0x6b,
	0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f,
	0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00,
	0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 24)
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_goTypes   = []interface{}{
		(RemitType)(0),                              // 0: petnet.v2.revenuesharing.RemitType
		(BoundType)(0),                              // 1: petnet.v2.revenuesharing.BoundType
		(TierType)(0),                               // 2: petnet.v2.revenuesharing.TierType
		(TransactionType)(0),                        // 3: petnet.v2.revenuesharing.TransactionType
		(*RevenueSharing)(nil),                      // 4: petnet.v2.revenuesharing.RevenueSharing
		(*RevenueSharingTier)(nil),                  // 5: petnet.v2.revenuesharing.RevenueSharingTier
		(*CreateRevenueSharingRequest)(nil),         // 6: petnet.v2.revenuesharing.CreateRevenueSharingRequest
		(*CreateRevenueSharingResponse)(nil),        // 7: petnet.v2.revenuesharing.CreateRevenueSharingResponse
		(*UpdateRevenueSharingRequest)(nil),         // 8: petnet.v2.revenuesharing.UpdateRevenueSharingRequest
		(*UpdateRevenueSharingResponse)(nil),        // 9: petnet.v2.revenuesharing.UpdateRevenueSharingResponse
		(*CreateRevenueSharingTierRequest)(nil),     // 10: petnet.v2.revenuesharing.CreateRevenueSharingTierRequest
		(*CreateRevenueSharingTierResponse)(nil),    // 11: petnet.v2.revenuesharing.CreateRevenueSharingTierResponse
		(*UpdateRevenueSharingTierRequest)(nil),     // 12: petnet.v2.revenuesharing.UpdateRevenueSharingTierRequest
		(*UpdateRevenueSharingTierResponse)(nil),    // 13: petnet.v2.revenuesharing.UpdateRevenueSharingTierResponse
		(*GetRevenueSharingListRequest)(nil),        // 14: petnet.v2.revenuesharing.GetRevenueSharingListRequest
		(*GetRevenueSharingListResponse)(nil),       // 15: petnet.v2.revenuesharing.GetRevenueSharingListResponse
		(*GetRevenueSharingTierListRequest)(nil),    // 16: petnet.v2.revenuesharing.GetRevenueSharingTierListRequest
		(*GetRevenueSharingTierListResponse)(nil),   // 17: petnet.v2.revenuesharing.GetRevenueSharingTierListResponse
		(*DeleteRevenueSharingRequest)(nil),         // 18: petnet.v2.revenuesharing.DeleteRevenueSharingRequest
		(*DeleteRevenueSharingTierRequest)(nil),     // 19: petnet.v2.revenuesharing.DeleteRevenueSharingTierRequest
		(*DeleteRevenueSharingTierByIdRequest)(nil), // 20: petnet.v2.revenuesharing.DeleteRevenueSharingTierByIdRequest
		(*UpsertRevenueSharingRequest)(nil),         // 21: petnet.v2.revenuesharing.UpsertRevenueSharingRequest
		(*UpsertRevenueSharingResponse)(nil),        // 22: petnet.v2.revenuesharing.UpsertRevenueSharingResponse
		(*UpsertRevenueSharingTierRequest)(nil),     // 23: petnet.v2.revenuesharing.UpsertRevenueSharingTierRequest
		(*UpsertRevenueSharingTierResponse)(nil),    // 24: petnet.v2.revenuesharing.UpsertRevenueSharingTierResponse
		(*GetPartnerTransactionTypeRequest)(nil),    // 25: petnet.v2.revenuesharing.GetPartnerTransactionTypeRequest
		(*PartnerDetail)(nil),                       // 26: petnet.v2.revenuesharing.PartnerDetail
		(*GetPartnerTransactionTypeResponse)(nil),   // 27: petnet.v2.revenuesharing.GetPartnerTransactionTypeResponse
		(*timestamppb.Timestamp)(nil),               // 28: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),                       // 29: google.protobuf.Empty
	}
)

var file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_depIdxs = []int32{
	1,  // 0: petnet.v2.revenuesharing.RevenueSharing.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 1: petnet.v2.revenuesharing.RevenueSharing.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 2: petnet.v2.revenuesharing.RevenueSharing.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 3: petnet.v2.revenuesharing.RevenueSharing.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 4: petnet.v2.revenuesharing.RevenueSharing.Created:type_name -> google.protobuf.Timestamp
	28, // 5: petnet.v2.revenuesharing.RevenueSharing.Updated:type_name -> google.protobuf.Timestamp
	1,  // 6: petnet.v2.revenuesharing.CreateRevenueSharingRequest.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 7: petnet.v2.revenuesharing.CreateRevenueSharingRequest.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 8: petnet.v2.revenuesharing.CreateRevenueSharingRequest.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 9: petnet.v2.revenuesharing.CreateRevenueSharingRequest.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 10: petnet.v2.revenuesharing.CreateRevenueSharingRequest.Created:type_name -> google.protobuf.Timestamp
	1,  // 11: petnet.v2.revenuesharing.CreateRevenueSharingResponse.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 12: petnet.v2.revenuesharing.CreateRevenueSharingResponse.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 13: petnet.v2.revenuesharing.CreateRevenueSharingResponse.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 14: petnet.v2.revenuesharing.CreateRevenueSharingResponse.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 15: petnet.v2.revenuesharing.CreateRevenueSharingResponse.Created:type_name -> google.protobuf.Timestamp
	28, // 16: petnet.v2.revenuesharing.CreateRevenueSharingResponse.Updated:type_name -> google.protobuf.Timestamp
	1,  // 17: petnet.v2.revenuesharing.UpdateRevenueSharingRequest.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 18: petnet.v2.revenuesharing.UpdateRevenueSharingRequest.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 19: petnet.v2.revenuesharing.UpdateRevenueSharingRequest.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 20: petnet.v2.revenuesharing.UpdateRevenueSharingRequest.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 21: petnet.v2.revenuesharing.UpdateRevenueSharingRequest.Created:type_name -> google.protobuf.Timestamp
	1,  // 22: petnet.v2.revenuesharing.UpdateRevenueSharingResponse.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 23: petnet.v2.revenuesharing.UpdateRevenueSharingResponse.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 24: petnet.v2.revenuesharing.UpdateRevenueSharingResponse.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 25: petnet.v2.revenuesharing.UpdateRevenueSharingResponse.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 26: petnet.v2.revenuesharing.UpdateRevenueSharingResponse.Created:type_name -> google.protobuf.Timestamp
	28, // 27: petnet.v2.revenuesharing.UpdateRevenueSharingResponse.Updated:type_name -> google.protobuf.Timestamp
	1,  // 28: petnet.v2.revenuesharing.GetRevenueSharingListRequest.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 29: petnet.v2.revenuesharing.GetRevenueSharingListRequest.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 30: petnet.v2.revenuesharing.GetRevenueSharingListRequest.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 31: petnet.v2.revenuesharing.GetRevenueSharingListRequest.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 32: petnet.v2.revenuesharing.GetRevenueSharingListRequest.Created:type_name -> google.protobuf.Timestamp
	28, // 33: petnet.v2.revenuesharing.GetRevenueSharingListRequest.Updated:type_name -> google.protobuf.Timestamp
	4,  // 34: petnet.v2.revenuesharing.GetRevenueSharingListResponse.Results:type_name -> petnet.v2.revenuesharing.RevenueSharing
	5,  // 35: petnet.v2.revenuesharing.GetRevenueSharingTierListResponse.Results:type_name -> petnet.v2.revenuesharing.RevenueSharingTier
	1,  // 36: petnet.v2.revenuesharing.DeleteRevenueSharingRequest.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 37: petnet.v2.revenuesharing.DeleteRevenueSharingRequest.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 38: petnet.v2.revenuesharing.DeleteRevenueSharingRequest.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 39: petnet.v2.revenuesharing.DeleteRevenueSharingRequest.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 40: petnet.v2.revenuesharing.DeleteRevenueSharingRequest.Created:type_name -> google.protobuf.Timestamp
	28, // 41: petnet.v2.revenuesharing.DeleteRevenueSharingRequest.Updated:type_name -> google.protobuf.Timestamp
	1,  // 42: petnet.v2.revenuesharing.UpsertRevenueSharingRequest.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 43: petnet.v2.revenuesharing.UpsertRevenueSharingRequest.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 44: petnet.v2.revenuesharing.UpsertRevenueSharingRequest.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 45: petnet.v2.revenuesharing.UpsertRevenueSharingRequest.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 46: petnet.v2.revenuesharing.UpsertRevenueSharingRequest.Created:type_name -> google.protobuf.Timestamp
	1,  // 47: petnet.v2.revenuesharing.UpsertRevenueSharingResponse.BoundType:type_name -> petnet.v2.revenuesharing.BoundType
	0,  // 48: petnet.v2.revenuesharing.UpsertRevenueSharingResponse.RemitType:type_name -> petnet.v2.revenuesharing.RemitType
	3,  // 49: petnet.v2.revenuesharing.UpsertRevenueSharingResponse.TransactionType:type_name -> petnet.v2.revenuesharing.TransactionType
	2,  // 50: petnet.v2.revenuesharing.UpsertRevenueSharingResponse.TierType:type_name -> petnet.v2.revenuesharing.TierType
	28, // 51: petnet.v2.revenuesharing.UpsertRevenueSharingResponse.Created:type_name -> google.protobuf.Timestamp
	28, // 52: petnet.v2.revenuesharing.UpsertRevenueSharingResponse.Updated:type_name -> google.protobuf.Timestamp
	28, // 53: petnet.v2.revenuesharing.PartnerDetail.Created:type_name -> google.protobuf.Timestamp
	28, // 54: petnet.v2.revenuesharing.PartnerDetail.Updated:type_name -> google.protobuf.Timestamp
	26, // 55: petnet.v2.revenuesharing.GetPartnerTransactionTypeResponse.PartnerDetails:type_name -> petnet.v2.revenuesharing.PartnerDetail
	6,  // 56: petnet.v2.revenuesharing.RevenueSharingService.CreateRevenueSharing:input_type -> petnet.v2.revenuesharing.CreateRevenueSharingRequest
	8,  // 57: petnet.v2.revenuesharing.RevenueSharingService.UpdateRevenueSharing:input_type -> petnet.v2.revenuesharing.UpdateRevenueSharingRequest
	10, // 58: petnet.v2.revenuesharing.RevenueSharingService.CreateRevenueSharingTier:input_type -> petnet.v2.revenuesharing.CreateRevenueSharingTierRequest
	12, // 59: petnet.v2.revenuesharing.RevenueSharingService.UpdateRevenueSharingTier:input_type -> petnet.v2.revenuesharing.UpdateRevenueSharingTierRequest
	14, // 60: petnet.v2.revenuesharing.RevenueSharingService.GetRevenueSharingList:input_type -> petnet.v2.revenuesharing.GetRevenueSharingListRequest
	16, // 61: petnet.v2.revenuesharing.RevenueSharingService.GetRevenueSharingTierList:input_type -> petnet.v2.revenuesharing.GetRevenueSharingTierListRequest
	18, // 62: petnet.v2.revenuesharing.RevenueSharingService.DeleteRevenueSharing:input_type -> petnet.v2.revenuesharing.DeleteRevenueSharingRequest
	19, // 63: petnet.v2.revenuesharing.RevenueSharingService.DeleteRevenueSharingTier:input_type -> petnet.v2.revenuesharing.DeleteRevenueSharingTierRequest
	20, // 64: petnet.v2.revenuesharing.RevenueSharingService.DeleteRevenueSharingTierById:input_type -> petnet.v2.revenuesharing.DeleteRevenueSharingTierByIdRequest
	21, // 65: petnet.v2.revenuesharing.RevenueSharingService.UpsertRevenueSharing:input_type -> petnet.v2.revenuesharing.UpsertRevenueSharingRequest
	23, // 66: petnet.v2.revenuesharing.RevenueSharingService.UpsertRevenueSharingTier:input_type -> petnet.v2.revenuesharing.UpsertRevenueSharingTierRequest
	25, // 67: petnet.v2.revenuesharing.RevenueSharingService.GetPartnerTransactionType:input_type -> petnet.v2.revenuesharing.GetPartnerTransactionTypeRequest
	7,  // 68: petnet.v2.revenuesharing.RevenueSharingService.CreateRevenueSharing:output_type -> petnet.v2.revenuesharing.CreateRevenueSharingResponse
	9,  // 69: petnet.v2.revenuesharing.RevenueSharingService.UpdateRevenueSharing:output_type -> petnet.v2.revenuesharing.UpdateRevenueSharingResponse
	11, // 70: petnet.v2.revenuesharing.RevenueSharingService.CreateRevenueSharingTier:output_type -> petnet.v2.revenuesharing.CreateRevenueSharingTierResponse
	13, // 71: petnet.v2.revenuesharing.RevenueSharingService.UpdateRevenueSharingTier:output_type -> petnet.v2.revenuesharing.UpdateRevenueSharingTierResponse
	15, // 72: petnet.v2.revenuesharing.RevenueSharingService.GetRevenueSharingList:output_type -> petnet.v2.revenuesharing.GetRevenueSharingListResponse
	17, // 73: petnet.v2.revenuesharing.RevenueSharingService.GetRevenueSharingTierList:output_type -> petnet.v2.revenuesharing.GetRevenueSharingTierListResponse
	29, // 74: petnet.v2.revenuesharing.RevenueSharingService.DeleteRevenueSharing:output_type -> google.protobuf.Empty
	29, // 75: petnet.v2.revenuesharing.RevenueSharingService.DeleteRevenueSharingTier:output_type -> google.protobuf.Empty
	29, // 76: petnet.v2.revenuesharing.RevenueSharingService.DeleteRevenueSharingTierById:output_type -> google.protobuf.Empty
	22, // 77: petnet.v2.revenuesharing.RevenueSharingService.UpsertRevenueSharing:output_type -> petnet.v2.revenuesharing.UpsertRevenueSharingResponse
	24, // 78: petnet.v2.revenuesharing.RevenueSharingService.UpsertRevenueSharingTier:output_type -> petnet.v2.revenuesharing.UpsertRevenueSharingTierResponse
	27, // 79: petnet.v2.revenuesharing.RevenueSharingService.GetPartnerTransactionType:output_type -> petnet.v2.revenuesharing.GetPartnerTransactionTypeResponse
	68, // [68:80] is the sub-list for method output_type
	56, // [56:68] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevenueSharing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevenueSharingTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueSharingTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueSharingTierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueSharingTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueSharingTierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueSharingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueSharingListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueSharingTierListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueSharingTierListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRevenueSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRevenueSharingTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRevenueSharingTierByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRevenueSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRevenueSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRevenueSharingTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRevenueSharingTierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerTransactionTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerTransactionTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v2_revenuesharing_all_proto_depIdxs = nil
}
