// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package email

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	// Send onboarding reminder email.
	SendOnboardingReminder(ctx context.Context, in *SendOnboardingReminderRequest, opts ...grpc.CallOption) (*SendOnboardingReminderResponse, error)
	// Send service request status reminder email.
	SendDsaServiceRequestNotification(ctx context.Context, in *SendDsaServiceRequestNotificationRequest, opts ...grpc.CallOption) (*SendDsaServiceRequestNotificationResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendOnboardingReminder(ctx context.Context, in *SendOnboardingReminderRequest, opts ...grpc.CallOption) (*SendOnboardingReminderResponse, error) {
	out := new(SendOnboardingReminderResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.email.EmailService/SendOnboardingReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendDsaServiceRequestNotification(ctx context.Context, in *SendDsaServiceRequestNotificationRequest, opts ...grpc.CallOption) (*SendDsaServiceRequestNotificationResponse, error) {
	out := new(SendDsaServiceRequestNotificationResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.email.EmailService/SendDsaServiceRequestNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility
type EmailServiceServer interface {
	// Send onboarding reminder email.
	SendOnboardingReminder(context.Context, *SendOnboardingReminderRequest) (*SendOnboardingReminderResponse, error)
	// Send service request status reminder email.
	SendDsaServiceRequestNotification(context.Context, *SendDsaServiceRequestNotificationRequest) (*SendDsaServiceRequestNotificationResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailServiceServer struct{}

func (UnimplementedEmailServiceServer) SendOnboardingReminder(context.Context, *SendOnboardingReminderRequest) (*SendOnboardingReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOnboardingReminder not implemented")
}

func (UnimplementedEmailServiceServer) SendDsaServiceRequestNotification(context.Context, *SendDsaServiceRequestNotificationRequest) (*SendDsaServiceRequestNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDsaServiceRequestNotification not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_SendOnboardingReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOnboardingReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendOnboardingReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.email.EmailService/SendOnboardingReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendOnboardingReminder(ctx, req.(*SendOnboardingReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendDsaServiceRequestNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDsaServiceRequestNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendDsaServiceRequestNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.email.EmailService/SendDsaServiceRequestNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendDsaServiceRequestNotification(ctx, req.(*SendDsaServiceRequestNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v1.email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOnboardingReminder",
			Handler:    _EmailService_SendOnboardingReminder_Handler,
		},
		{
			MethodName: "SendDsaServiceRequestNotification",
			Handler:    _EmailService_SendDsaServiceRequestNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v1/email/all.proto",
}
