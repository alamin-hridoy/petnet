// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package profile

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	// Register a remittance user to the perahub DRP platform.
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// Create user profile.
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	// Get user profile by email.
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	// Create recipient.
	CreateRecipient(ctx context.Context, in *CreateRecipientRequest, opts ...grpc.CallOption) (*CreateRecipientResponse, error)
	// Get user's recipients.
	GetRecipients(ctx context.Context, in *GetRecipientsRequest, opts ...grpc.CallOption) (*GetRecipientsResponse, error)
	// Delete recipient.
	DeleteRecipient(ctx context.Context, in *DeleteRecipientRequest, opts ...grpc.CallOption) (*DeleteRecipientResponse, error)
	// Update recipient.
	UpdateRecipient(ctx context.Context, in *UpdateRecipientRequest, opts ...grpc.CallOption) (*UpdateRecipientResponse, error)
	// Get user.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateRecipient(ctx context.Context, in *CreateRecipientRequest, opts ...grpc.CallOption) (*CreateRecipientResponse, error) {
	out := new(CreateRecipientResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/CreateRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetRecipients(ctx context.Context, in *GetRecipientsRequest, opts ...grpc.CallOption) (*GetRecipientsResponse, error) {
	out := new(GetRecipientsResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/GetRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteRecipient(ctx context.Context, in *DeleteRecipientRequest, opts ...grpc.CallOption) (*DeleteRecipientResponse, error) {
	out := new(DeleteRecipientResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/DeleteRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateRecipient(ctx context.Context, in *UpdateRecipientRequest, opts ...grpc.CallOption) (*UpdateRecipientResponse, error) {
	out := new(UpdateRecipientResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/UpdateRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	// Register a remittance user to the perahub DRP platform.
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// Create user profile.
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	// Get user profile by email.
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	// Create recipient.
	CreateRecipient(context.Context, *CreateRecipientRequest) (*CreateRecipientResponse, error)
	// Get user's recipients.
	GetRecipients(context.Context, *GetRecipientsRequest) (*GetRecipientsResponse, error)
	// Delete recipient.
	DeleteRecipient(context.Context, *DeleteRecipientRequest) (*DeleteRecipientResponse, error)
	// Update recipient.
	UpdateRecipient(context.Context, *UpdateRecipientRequest) (*UpdateRecipientResponse, error)
	// Get user.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct{}

func (UnimplementedProfileServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}

func (UnimplementedProfileServiceServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}

func (UnimplementedProfileServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}

func (UnimplementedProfileServiceServer) CreateRecipient(context.Context, *CreateRecipientRequest) (*CreateRecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipient not implemented")
}

func (UnimplementedProfileServiceServer) GetRecipients(context.Context, *GetRecipientsRequest) (*GetRecipientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipients not implemented")
}

func (UnimplementedProfileServiceServer) DeleteRecipient(context.Context, *DeleteRecipientRequest) (*DeleteRecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipient not implemented")
}

func (UnimplementedProfileServiceServer) UpdateRecipient(context.Context, *UpdateRecipientRequest) (*UpdateRecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipient not implemented")
}

func (UnimplementedProfileServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/CreateRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateRecipient(ctx, req.(*CreateRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/GetRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetRecipients(ctx, req.(*GetRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/DeleteRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteRecipient(ctx, req.(*DeleteRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/UpdateRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateRecipient(ctx, req.(*UpdateRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _ProfileService_RegisterUser_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _ProfileService_CreateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ProfileService_GetProfile_Handler,
		},
		{
			MethodName: "CreateRecipient",
			Handler:    _ProfileService_CreateRecipient_Handler,
		},
		{
			MethodName: "GetRecipients",
			Handler:    _ProfileService_GetRecipients_Handler,
		},
		{
			MethodName: "DeleteRecipient",
			Handler:    _ProfileService_DeleteRecipient_Handler,
		},
		{
			MethodName: "UpdateRecipient",
			Handler:    _ProfileService_UpdateRecipient_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ProfileService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/profile/all.proto",
}
