// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package revenue_commission

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RevenueCommissionServiceClient is the client API for RevenueCommissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevenueCommissionServiceClient interface {
	// CreateRemcoCommissionFee Creates Remco Commission Fee record.
	CreateRemcoCommissionFee(ctx context.Context, in *CreateRemcoCommissionFeeRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error)
	// UpdateRemcoCommissionFee Updates Remco Commission Fee record.
	UpdateRemcoCommissionFee(ctx context.Context, in *UpdateRemcoCommissionFeeRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error)
	// GetRemcoCommissionFeeByID Gets Remco Commission Fee record by ID.
	GetRemcoCommissionFeeByID(ctx context.Context, in *GetRemcoCommissionFeeByIDRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error)
	// ListRemcoCommissionFee Gets List Of All Remco Commission Fee records.
	ListRemcoCommissionFee(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRemcoCommissionFeeResponse, error)
	// DeleteRemcoCommissionFee Deletes Remco Commission Fee record by ID.
	DeleteRemcoCommissionFee(ctx context.Context, in *DeleteRemcoCommissionFeeRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error)
	// CreateDSACommissionTier Creates DSA Commission Tier record.
	CreateDSACommissionTier(ctx context.Context, in *CreateDSACommissionTierRequest, opts ...grpc.CallOption) (*DSACommissionTier, error)
	// UpdateDSACommissionTier Update DSA Commission Tier record by ID.
	UpdateDSACommissionTier(ctx context.Context, in *UpdateDSACommissionTierRequest, opts ...grpc.CallOption) (*DSACommissionTier, error)
	// GetDSACommissionTierByID Gets DSA Commission Tier record by ID.
	GetDSACommissionTierByID(ctx context.Context, in *GetDSACommissionTierByIDRequest, opts ...grpc.CallOption) (*DSACommissionTier, error)
	// ListDSACommissionTier List all DSA Commission Tier records.
	ListDSACommissionTier(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSACommissionTierResponse, error)
	// DeleteDSACommissionTier Deletes DSA Commission Tier record by ID.
	DeleteDSACommissionTier(ctx context.Context, in *DeleteDSACommissionTierRequest, opts ...grpc.CallOption) (*DSACommissionTier, error)
	// CreateDSACommission Creates DSA Commission record.
	CreateDSACommission(ctx context.Context, in *CreateDSACommissionRequest, opts ...grpc.CallOption) (*DSACommission, error)
	// UpdateDSACommission Update DSA Commission record by ID.
	UpdateDSACommission(ctx context.Context, in *UpdateDSACommissionRequest, opts ...grpc.CallOption) (*DSACommission, error)
	// GetDSACommissionByID Gets DSA Commission record by ID.
	GetDSACommissionByID(ctx context.Context, in *GetDSACommissionByIDRequest, opts ...grpc.CallOption) (*DSACommission, error)
	// ListDSACommission List DSA Commission records.
	ListDSACommission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSACommissionResponse, error)
	// DeleteDSACommission Deletes DSA Commission record by ID.
	DeleteDSACommission(ctx context.Context, in *DeleteDSACommissionRequest, opts ...grpc.CallOption) (*DSACommission, error)
	// CreateDSATransactionCount Creates DSA Transaction Count record.
	CreateDSATransactionCount(ctx context.Context, in *CreateDSATransactionCountRequest, opts ...grpc.CallOption) (*DSATransactionCount, error)
	// UpdateDSATransactionCount Updates DSA Transaction Count record.
	UpdateDSATransactionCount(ctx context.Context, in *UpdateDSATransactionCountRequest, opts ...grpc.CallOption) (*DSATransactionCount, error)
	// GetDSATransactionCountByID Gets DSA Transaction Count record by transaction count ID.
	GetDSATransactionCountByID(ctx context.Context, in *GetDSATransactionCountByIDRequest, opts ...grpc.CallOption) (*DSATransactionCount, error)
	// DeleteDSATransactionCount Deletes DSA Transaction Count record by transaction count ID.
	DeleteDSATransactionCount(ctx context.Context, in *DeleteDSATransactionCountRequest, opts ...grpc.CallOption) (*DSATransactionCount, error)
	// ListDSATransactionCountAll List all DSA Transaction Count records.
	ListDSATransactionCountAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSATransactionCountResponse, error)
	// ListDSATransactionCountByYearMonth List DSA Transaction Count records by year and month.
	ListDSATransactionCountByYearMonth(ctx context.Context, in *ListDSATransactionCountByYearMonthRequest, opts ...grpc.CallOption) (*ListDSATransactionCountResponse, error)
	// Send Transaction Report
	SendTransactionReport(ctx context.Context, in *SendTransactionReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type revenueCommissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRevenueCommissionServiceClient(cc grpc.ClientConnInterface) RevenueCommissionServiceClient {
	return &revenueCommissionServiceClient{cc}
}

func (c *revenueCommissionServiceClient) CreateRemcoCommissionFee(ctx context.Context, in *CreateRemcoCommissionFeeRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error) {
	out := new(RemcoCommissionFee)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/CreateRemcoCommissionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) UpdateRemcoCommissionFee(ctx context.Context, in *UpdateRemcoCommissionFeeRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error) {
	out := new(RemcoCommissionFee)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/UpdateRemcoCommissionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) GetRemcoCommissionFeeByID(ctx context.Context, in *GetRemcoCommissionFeeByIDRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error) {
	out := new(RemcoCommissionFee)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/GetRemcoCommissionFeeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) ListRemcoCommissionFee(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRemcoCommissionFeeResponse, error) {
	out := new(ListRemcoCommissionFeeResponse)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/ListRemcoCommissionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) DeleteRemcoCommissionFee(ctx context.Context, in *DeleteRemcoCommissionFeeRequest, opts ...grpc.CallOption) (*RemcoCommissionFee, error) {
	out := new(RemcoCommissionFee)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/DeleteRemcoCommissionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) CreateDSACommissionTier(ctx context.Context, in *CreateDSACommissionTierRequest, opts ...grpc.CallOption) (*DSACommissionTier, error) {
	out := new(DSACommissionTier)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/CreateDSACommissionTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) UpdateDSACommissionTier(ctx context.Context, in *UpdateDSACommissionTierRequest, opts ...grpc.CallOption) (*DSACommissionTier, error) {
	out := new(DSACommissionTier)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/UpdateDSACommissionTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) GetDSACommissionTierByID(ctx context.Context, in *GetDSACommissionTierByIDRequest, opts ...grpc.CallOption) (*DSACommissionTier, error) {
	out := new(DSACommissionTier)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/GetDSACommissionTierByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) ListDSACommissionTier(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSACommissionTierResponse, error) {
	out := new(ListDSACommissionTierResponse)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/ListDSACommissionTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) DeleteDSACommissionTier(ctx context.Context, in *DeleteDSACommissionTierRequest, opts ...grpc.CallOption) (*DSACommissionTier, error) {
	out := new(DSACommissionTier)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/DeleteDSACommissionTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) CreateDSACommission(ctx context.Context, in *CreateDSACommissionRequest, opts ...grpc.CallOption) (*DSACommission, error) {
	out := new(DSACommission)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/CreateDSACommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) UpdateDSACommission(ctx context.Context, in *UpdateDSACommissionRequest, opts ...grpc.CallOption) (*DSACommission, error) {
	out := new(DSACommission)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/UpdateDSACommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) GetDSACommissionByID(ctx context.Context, in *GetDSACommissionByIDRequest, opts ...grpc.CallOption) (*DSACommission, error) {
	out := new(DSACommission)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/GetDSACommissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) ListDSACommission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSACommissionResponse, error) {
	out := new(ListDSACommissionResponse)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/ListDSACommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) DeleteDSACommission(ctx context.Context, in *DeleteDSACommissionRequest, opts ...grpc.CallOption) (*DSACommission, error) {
	out := new(DSACommission)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/DeleteDSACommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) CreateDSATransactionCount(ctx context.Context, in *CreateDSATransactionCountRequest, opts ...grpc.CallOption) (*DSATransactionCount, error) {
	out := new(DSATransactionCount)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/CreateDSATransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) UpdateDSATransactionCount(ctx context.Context, in *UpdateDSATransactionCountRequest, opts ...grpc.CallOption) (*DSATransactionCount, error) {
	out := new(DSATransactionCount)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/UpdateDSATransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) GetDSATransactionCountByID(ctx context.Context, in *GetDSATransactionCountByIDRequest, opts ...grpc.CallOption) (*DSATransactionCount, error) {
	out := new(DSATransactionCount)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/GetDSATransactionCountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) DeleteDSATransactionCount(ctx context.Context, in *DeleteDSATransactionCountRequest, opts ...grpc.CallOption) (*DSATransactionCount, error) {
	out := new(DSATransactionCount)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/DeleteDSATransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) ListDSATransactionCountAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDSATransactionCountResponse, error) {
	out := new(ListDSATransactionCountResponse)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/ListDSATransactionCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) ListDSATransactionCountByYearMonth(ctx context.Context, in *ListDSATransactionCountByYearMonthRequest, opts ...grpc.CallOption) (*ListDSATransactionCountResponse, error) {
	out := new(ListDSATransactionCountResponse)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/ListDSATransactionCountByYearMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueCommissionServiceClient) SendTransactionReport(ctx context.Context, in *SendTransactionReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/revenue_commission.RevenueCommissionService/SendTransactionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevenueCommissionServiceServer is the server API for RevenueCommissionService service.
// All implementations must embed UnimplementedRevenueCommissionServiceServer
// for forward compatibility
type RevenueCommissionServiceServer interface {
	// CreateRemcoCommissionFee Creates Remco Commission Fee record.
	CreateRemcoCommissionFee(context.Context, *CreateRemcoCommissionFeeRequest) (*RemcoCommissionFee, error)
	// UpdateRemcoCommissionFee Updates Remco Commission Fee record.
	UpdateRemcoCommissionFee(context.Context, *UpdateRemcoCommissionFeeRequest) (*RemcoCommissionFee, error)
	// GetRemcoCommissionFeeByID Gets Remco Commission Fee record by ID.
	GetRemcoCommissionFeeByID(context.Context, *GetRemcoCommissionFeeByIDRequest) (*RemcoCommissionFee, error)
	// ListRemcoCommissionFee Gets List Of All Remco Commission Fee records.
	ListRemcoCommissionFee(context.Context, *emptypb.Empty) (*ListRemcoCommissionFeeResponse, error)
	// DeleteRemcoCommissionFee Deletes Remco Commission Fee record by ID.
	DeleteRemcoCommissionFee(context.Context, *DeleteRemcoCommissionFeeRequest) (*RemcoCommissionFee, error)
	// CreateDSACommissionTier Creates DSA Commission Tier record.
	CreateDSACommissionTier(context.Context, *CreateDSACommissionTierRequest) (*DSACommissionTier, error)
	// UpdateDSACommissionTier Update DSA Commission Tier record by ID.
	UpdateDSACommissionTier(context.Context, *UpdateDSACommissionTierRequest) (*DSACommissionTier, error)
	// GetDSACommissionTierByID Gets DSA Commission Tier record by ID.
	GetDSACommissionTierByID(context.Context, *GetDSACommissionTierByIDRequest) (*DSACommissionTier, error)
	// ListDSACommissionTier List all DSA Commission Tier records.
	ListDSACommissionTier(context.Context, *emptypb.Empty) (*ListDSACommissionTierResponse, error)
	// DeleteDSACommissionTier Deletes DSA Commission Tier record by ID.
	DeleteDSACommissionTier(context.Context, *DeleteDSACommissionTierRequest) (*DSACommissionTier, error)
	// CreateDSACommission Creates DSA Commission record.
	CreateDSACommission(context.Context, *CreateDSACommissionRequest) (*DSACommission, error)
	// UpdateDSACommission Update DSA Commission record by ID.
	UpdateDSACommission(context.Context, *UpdateDSACommissionRequest) (*DSACommission, error)
	// GetDSACommissionByID Gets DSA Commission record by ID.
	GetDSACommissionByID(context.Context, *GetDSACommissionByIDRequest) (*DSACommission, error)
	// ListDSACommission List DSA Commission records.
	ListDSACommission(context.Context, *emptypb.Empty) (*ListDSACommissionResponse, error)
	// DeleteDSACommission Deletes DSA Commission record by ID.
	DeleteDSACommission(context.Context, *DeleteDSACommissionRequest) (*DSACommission, error)
	// CreateDSATransactionCount Creates DSA Transaction Count record.
	CreateDSATransactionCount(context.Context, *CreateDSATransactionCountRequest) (*DSATransactionCount, error)
	// UpdateDSATransactionCount Updates DSA Transaction Count record.
	UpdateDSATransactionCount(context.Context, *UpdateDSATransactionCountRequest) (*DSATransactionCount, error)
	// GetDSATransactionCountByID Gets DSA Transaction Count record by transaction count ID.
	GetDSATransactionCountByID(context.Context, *GetDSATransactionCountByIDRequest) (*DSATransactionCount, error)
	// DeleteDSATransactionCount Deletes DSA Transaction Count record by transaction count ID.
	DeleteDSATransactionCount(context.Context, *DeleteDSATransactionCountRequest) (*DSATransactionCount, error)
	// ListDSATransactionCountAll List all DSA Transaction Count records.
	ListDSATransactionCountAll(context.Context, *emptypb.Empty) (*ListDSATransactionCountResponse, error)
	// ListDSATransactionCountByYearMonth List DSA Transaction Count records by year and month.
	ListDSATransactionCountByYearMonth(context.Context, *ListDSATransactionCountByYearMonthRequest) (*ListDSATransactionCountResponse, error)
	// Send Transaction Report
	SendTransactionReport(context.Context, *SendTransactionReportRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRevenueCommissionServiceServer()
}

// UnimplementedRevenueCommissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRevenueCommissionServiceServer struct{}

func (UnimplementedRevenueCommissionServiceServer) CreateRemcoCommissionFee(context.Context, *CreateRemcoCommissionFeeRequest) (*RemcoCommissionFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemcoCommissionFee not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) UpdateRemcoCommissionFee(context.Context, *UpdateRemcoCommissionFeeRequest) (*RemcoCommissionFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemcoCommissionFee not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) GetRemcoCommissionFeeByID(context.Context, *GetRemcoCommissionFeeByIDRequest) (*RemcoCommissionFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemcoCommissionFeeByID not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) ListRemcoCommissionFee(context.Context, *emptypb.Empty) (*ListRemcoCommissionFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemcoCommissionFee not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) DeleteRemcoCommissionFee(context.Context, *DeleteRemcoCommissionFeeRequest) (*RemcoCommissionFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemcoCommissionFee not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) CreateDSACommissionTier(context.Context, *CreateDSACommissionTierRequest) (*DSACommissionTier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDSACommissionTier not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) UpdateDSACommissionTier(context.Context, *UpdateDSACommissionTierRequest) (*DSACommissionTier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDSACommissionTier not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) GetDSACommissionTierByID(context.Context, *GetDSACommissionTierByIDRequest) (*DSACommissionTier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSACommissionTierByID not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) ListDSACommissionTier(context.Context, *emptypb.Empty) (*ListDSACommissionTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDSACommissionTier not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) DeleteDSACommissionTier(context.Context, *DeleteDSACommissionTierRequest) (*DSACommissionTier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDSACommissionTier not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) CreateDSACommission(context.Context, *CreateDSACommissionRequest) (*DSACommission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDSACommission not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) UpdateDSACommission(context.Context, *UpdateDSACommissionRequest) (*DSACommission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDSACommission not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) GetDSACommissionByID(context.Context, *GetDSACommissionByIDRequest) (*DSACommission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSACommissionByID not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) ListDSACommission(context.Context, *emptypb.Empty) (*ListDSACommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDSACommission not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) DeleteDSACommission(context.Context, *DeleteDSACommissionRequest) (*DSACommission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDSACommission not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) CreateDSATransactionCount(context.Context, *CreateDSATransactionCountRequest) (*DSATransactionCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDSATransactionCount not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) UpdateDSATransactionCount(context.Context, *UpdateDSATransactionCountRequest) (*DSATransactionCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDSATransactionCount not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) GetDSATransactionCountByID(context.Context, *GetDSATransactionCountByIDRequest) (*DSATransactionCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSATransactionCountByID not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) DeleteDSATransactionCount(context.Context, *DeleteDSATransactionCountRequest) (*DSATransactionCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDSATransactionCount not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) ListDSATransactionCountAll(context.Context, *emptypb.Empty) (*ListDSATransactionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDSATransactionCountAll not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) ListDSATransactionCountByYearMonth(context.Context, *ListDSATransactionCountByYearMonthRequest) (*ListDSATransactionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDSATransactionCountByYearMonth not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) SendTransactionReport(context.Context, *SendTransactionReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionReport not implemented")
}

func (UnimplementedRevenueCommissionServiceServer) mustEmbedUnimplementedRevenueCommissionServiceServer() {
}

// UnsafeRevenueCommissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevenueCommissionServiceServer will
// result in compilation errors.
type UnsafeRevenueCommissionServiceServer interface {
	mustEmbedUnimplementedRevenueCommissionServiceServer()
}

func RegisterRevenueCommissionServiceServer(s grpc.ServiceRegistrar, srv RevenueCommissionServiceServer) {
	s.RegisterService(&RevenueCommissionService_ServiceDesc, srv)
}

func _RevenueCommissionService_CreateRemcoCommissionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemcoCommissionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).CreateRemcoCommissionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/CreateRemcoCommissionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).CreateRemcoCommissionFee(ctx, req.(*CreateRemcoCommissionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_UpdateRemcoCommissionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemcoCommissionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).UpdateRemcoCommissionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/UpdateRemcoCommissionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).UpdateRemcoCommissionFee(ctx, req.(*UpdateRemcoCommissionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_GetRemcoCommissionFeeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemcoCommissionFeeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).GetRemcoCommissionFeeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/GetRemcoCommissionFeeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).GetRemcoCommissionFeeByID(ctx, req.(*GetRemcoCommissionFeeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_ListRemcoCommissionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).ListRemcoCommissionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/ListRemcoCommissionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).ListRemcoCommissionFee(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_DeleteRemcoCommissionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemcoCommissionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).DeleteRemcoCommissionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/DeleteRemcoCommissionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).DeleteRemcoCommissionFee(ctx, req.(*DeleteRemcoCommissionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_CreateDSACommissionTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDSACommissionTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).CreateDSACommissionTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/CreateDSACommissionTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).CreateDSACommissionTier(ctx, req.(*CreateDSACommissionTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_UpdateDSACommissionTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDSACommissionTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).UpdateDSACommissionTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/UpdateDSACommissionTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).UpdateDSACommissionTier(ctx, req.(*UpdateDSACommissionTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_GetDSACommissionTierByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSACommissionTierByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).GetDSACommissionTierByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/GetDSACommissionTierByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).GetDSACommissionTierByID(ctx, req.(*GetDSACommissionTierByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_ListDSACommissionTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).ListDSACommissionTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/ListDSACommissionTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).ListDSACommissionTier(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_DeleteDSACommissionTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDSACommissionTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).DeleteDSACommissionTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/DeleteDSACommissionTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).DeleteDSACommissionTier(ctx, req.(*DeleteDSACommissionTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_CreateDSACommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDSACommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).CreateDSACommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/CreateDSACommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).CreateDSACommission(ctx, req.(*CreateDSACommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_UpdateDSACommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDSACommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).UpdateDSACommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/UpdateDSACommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).UpdateDSACommission(ctx, req.(*UpdateDSACommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_GetDSACommissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSACommissionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).GetDSACommissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/GetDSACommissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).GetDSACommissionByID(ctx, req.(*GetDSACommissionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_ListDSACommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).ListDSACommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/ListDSACommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).ListDSACommission(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_DeleteDSACommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDSACommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).DeleteDSACommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/DeleteDSACommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).DeleteDSACommission(ctx, req.(*DeleteDSACommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_CreateDSATransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDSATransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).CreateDSATransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/CreateDSATransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).CreateDSATransactionCount(ctx, req.(*CreateDSATransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_UpdateDSATransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDSATransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).UpdateDSATransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/UpdateDSATransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).UpdateDSATransactionCount(ctx, req.(*UpdateDSATransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_GetDSATransactionCountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSATransactionCountByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).GetDSATransactionCountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/GetDSATransactionCountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).GetDSATransactionCountByID(ctx, req.(*GetDSATransactionCountByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_DeleteDSATransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDSATransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).DeleteDSATransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/DeleteDSATransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).DeleteDSATransactionCount(ctx, req.(*DeleteDSATransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_ListDSATransactionCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).ListDSATransactionCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/ListDSATransactionCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).ListDSATransactionCountAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_ListDSATransactionCountByYearMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDSATransactionCountByYearMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).ListDSATransactionCountByYearMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/ListDSATransactionCountByYearMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).ListDSATransactionCountByYearMonth(ctx, req.(*ListDSATransactionCountByYearMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueCommissionService_SendTransactionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueCommissionServiceServer).SendTransactionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revenue_commission.RevenueCommissionService/SendTransactionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueCommissionServiceServer).SendTransactionReport(ctx, req.(*SendTransactionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RevenueCommissionService_ServiceDesc is the grpc.ServiceDesc for RevenueCommissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RevenueCommissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "revenue_commission.RevenueCommissionService",
	HandlerType: (*RevenueCommissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRemcoCommissionFee",
			Handler:    _RevenueCommissionService_CreateRemcoCommissionFee_Handler,
		},
		{
			MethodName: "UpdateRemcoCommissionFee",
			Handler:    _RevenueCommissionService_UpdateRemcoCommissionFee_Handler,
		},
		{
			MethodName: "GetRemcoCommissionFeeByID",
			Handler:    _RevenueCommissionService_GetRemcoCommissionFeeByID_Handler,
		},
		{
			MethodName: "ListRemcoCommissionFee",
			Handler:    _RevenueCommissionService_ListRemcoCommissionFee_Handler,
		},
		{
			MethodName: "DeleteRemcoCommissionFee",
			Handler:    _RevenueCommissionService_DeleteRemcoCommissionFee_Handler,
		},
		{
			MethodName: "CreateDSACommissionTier",
			Handler:    _RevenueCommissionService_CreateDSACommissionTier_Handler,
		},
		{
			MethodName: "UpdateDSACommissionTier",
			Handler:    _RevenueCommissionService_UpdateDSACommissionTier_Handler,
		},
		{
			MethodName: "GetDSACommissionTierByID",
			Handler:    _RevenueCommissionService_GetDSACommissionTierByID_Handler,
		},
		{
			MethodName: "ListDSACommissionTier",
			Handler:    _RevenueCommissionService_ListDSACommissionTier_Handler,
		},
		{
			MethodName: "DeleteDSACommissionTier",
			Handler:    _RevenueCommissionService_DeleteDSACommissionTier_Handler,
		},
		{
			MethodName: "CreateDSACommission",
			Handler:    _RevenueCommissionService_CreateDSACommission_Handler,
		},
		{
			MethodName: "UpdateDSACommission",
			Handler:    _RevenueCommissionService_UpdateDSACommission_Handler,
		},
		{
			MethodName: "GetDSACommissionByID",
			Handler:    _RevenueCommissionService_GetDSACommissionByID_Handler,
		},
		{
			MethodName: "ListDSACommission",
			Handler:    _RevenueCommissionService_ListDSACommission_Handler,
		},
		{
			MethodName: "DeleteDSACommission",
			Handler:    _RevenueCommissionService_DeleteDSACommission_Handler,
		},
		{
			MethodName: "CreateDSATransactionCount",
			Handler:    _RevenueCommissionService_CreateDSATransactionCount_Handler,
		},
		{
			MethodName: "UpdateDSATransactionCount",
			Handler:    _RevenueCommissionService_UpdateDSATransactionCount_Handler,
		},
		{
			MethodName: "GetDSATransactionCountByID",
			Handler:    _RevenueCommissionService_GetDSATransactionCountByID_Handler,
		},
		{
			MethodName: "DeleteDSATransactionCount",
			Handler:    _RevenueCommissionService_DeleteDSATransactionCount_Handler,
		},
		{
			MethodName: "ListDSATransactionCountAll",
			Handler:    _RevenueCommissionService_ListDSATransactionCountAll_Handler,
		},
		{
			MethodName: "ListDSATransactionCountByYearMonth",
			Handler:    _RevenueCommissionService_ListDSATransactionCountByYearMonth_Handler,
		},
		{
			MethodName: "SendTransactionReport",
			Handler:    _RevenueCommissionService_SendTransactionReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/revenue-commission/all.proto",
}
