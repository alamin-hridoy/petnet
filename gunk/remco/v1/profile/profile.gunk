package profile // proto "petnet.v1.profile"

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

type GetProfileRequest struct {
	ID string `pb:"1" json:"id"`
}

type GetProfileResponse struct {
	Profile UserProfile `pb:"1" json:"account"`
}

type UserProfile struct {
	ID               string `pb:"1" json:"id"`
	OrgID            string `pb:"2" json:"org_id"`
	OrgName          string `pb:"3" json:"org_name"`
	Status           string `pb:"4" json:"status"`
	Name             string `pb:"5" json:"name"`
	FirstName        string `pb:"6" json:"first_name"`
	LastName         string `pb:"7" json:"last_name"`
	Email            string `pb:"8" json:"email"`
	PhoneNumber      string `pb:"9" json:"phone_number"`
	PhoneCountryCode string `pb:"10" json:"phone_country_code"`

	Created time.Time `pb:"11" json:"created"`
	Updated time.Time `pb:"12" json:"updated"`
}

type ListProfilesRequest struct {
	OrgID string `pb:"1" json:"org_id"`
}

type ListProfilesResponse struct {
	Profiles []UserProfile `pb:"1" json:"accounts"`
}

type UserProfileService interface {
	// Get user profile by ID.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/userprofile/{ID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"User Profile"},
	//         Description: "Get all created user profile from user ID.",
	//         Summary:     "Get user profile.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/userProfileGetAccountResponse",
	//                                 },
	//                         },
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                 },
	//         },
	// }
	GetProfile(GetProfileRequest) GetProfileResponse

	// Get user profiles associated with the org.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/userprofile",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"User Profile"},
	//         Description: "Get all created user profile from user ID.",
	//         Summary:     "Get user profile.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/userProfileListprofilesResponse",
	//                                 },
	//                         },
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                 },
	//         },
	// }
	ListProfiles(ListProfilesRequest) ListProfilesResponse
}
