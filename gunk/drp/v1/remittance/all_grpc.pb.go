// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package remittance

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemittanceServiceClient is the client API for RemittanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemittanceServiceClient interface {
	// Validate Send Money
	ValidateSendMoney(ctx context.Context, in *ValidateSendMoneyRequest, opts ...grpc.CallOption) (*ValidateSendMoneyResponse, error)
	// Confirm Send Money
	ConfirmSendMoney(ctx context.Context, in *ConfirmSendMoneyRequest, opts ...grpc.CallOption) (*ConfirmSendMoneyResponse, error)
	// Cancel Send Money
	CancelSendMoney(ctx context.Context, in *CancelSendMoneyRequest, opts ...grpc.CallOption) (*CancelSendMoneyResponse, error)
	// Validate Receive Money
	ValidateReceiveMoney(ctx context.Context, in *ValidateReceiveMoneyRequest, opts ...grpc.CallOption) (*ValidateReceiveMoneyResponse, error)
	// Remitance Inquire
	Inquire(ctx context.Context, in *InquireRequest, opts ...grpc.CallOption) (*InquireResponse, error)
	// Confirm Receive Money
	ConfirmReceiveMoney(ctx context.Context, in *ConfirmReceiveMoneyRequest, opts ...grpc.CallOption) (*ConfirmReceiveMoneyResponse, error)
	// Remitance Partner Grid
	PartnersGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PartnersGridResponse, error)
	// Purpose Of Remittance Grid
	PurposeOfRemittanceGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PurposeOfRemittanceGridResponse, error)
	// Purpose Of Remittance Get
	PurposeOfRemittanceGet(ctx context.Context, in *PurposeOfRemittanceGetRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceGetResponse, error)
	// Update Purpose of Remittance
	PurposeOfRemittanceUpdate(ctx context.Context, in *PurposeOfRemittanceUpdateRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceUpdateResponse, error)
	// Create Purpose of Remittance
	PurposeOfRemittanceCreate(ctx context.Context, in *PurposeOfRemittanceCreateRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceCreateResponse, error)
	// Remitance Partner Create
	PartnersCreate(ctx context.Context, in *PartnersCreateRequest, opts ...grpc.CallOption) (*PartnersCreateResponse, error)
	// Source Of Fund Grid
	SourceOfFundGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SourceOfFundGridResponse, error)
	// Create Source Of Fund
	SourceOfFundCreate(ctx context.Context, in *SourceOfFundCreateRequest, opts ...grpc.CallOption) (*SourceOfFundCreateResponse, error)
	// Source Of Fund Get
	SourceOfFundGet(ctx context.Context, in *SourceOfFundGetRequest, opts ...grpc.CallOption) (*SourceOfFundGetResponse, error)
	// Remittance Employment Grid
	EmploymentGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EmploymentGridResponse, error)
	// Remittance Employment Get
	EmploymentGet(ctx context.Context, in *EmploymentGetRequest, opts ...grpc.CallOption) (*EmploymentGetResponse, error)
	// Create Partners employment of Remittance
	RemittanceEmploymentCreate(ctx context.Context, in *RemittanceEmploymentCreateRequest, opts ...grpc.CallOption) (*RemittanceEmploymentCreateResponse, error)
	// Update Employment Remittance
	RemittanceEmploymentUpdate(ctx context.Context, in *RemittanceEmploymentUpdateRequest, opts ...grpc.CallOption) (*RemittanceEmploymentUpdateResponse, error)
	// Occupation Grid
	OccupationGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OccupationGridResponse, error)
	// Occupation Get
	OccupationGet(ctx context.Context, in *OccupationGetRequest, opts ...grpc.CallOption) (*OccupationGetResponse, error)
	// Create Occupation
	OccupationCreate(ctx context.Context, in *OccupationCreateRequest, opts ...grpc.CallOption) (*OccupationCreateResponse, error)
	// Update Occupation
	OccupationUpdate(ctx context.Context, in *OccupationUpdateRequest, opts ...grpc.CallOption) (*OccupationUpdateResponse, error)
	// Occupation Delete
	OccupationDelete(ctx context.Context, in *OccupationDeleteRequest, opts ...grpc.CallOption) (*OccupationDeleteResponse, error)
	// Relationship Get
	RelationshipGet(ctx context.Context, in *RelationshipGetRequest, opts ...grpc.CallOption) (*RelationshipGetResponse, error)
	// Update Source Of Fund
	SourceOfFundUpdate(ctx context.Context, in *SourceOfFundUpdateRequest, opts ...grpc.CallOption) (*SourceOfFundUpdateResponse, error)
	// Source Of Fund Delete
	SourceOfFundDelete(ctx context.Context, in *SourceOfFundDeleteRequest, opts ...grpc.CallOption) (*SourceOfFundDeleteResponse, error)
	// Purpose Of Remittance Delete
	PurposeOfRemittanceDelete(ctx context.Context, in *PurposeOfRemittanceDeleteRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceDeleteResponse, error)
	// Relationship Delete
	RelationshipDelete(ctx context.Context, in *RelationshipDeleteRequest, opts ...grpc.CallOption) (*RelationshipDeleteResponse, error)
	// Remittance Employment Delete
	RemittanceEmploymentDelete(ctx context.Context, in *RemittanceEmploymentDeleteRequest, opts ...grpc.CallOption) (*RemittanceEmploymentDeleteResponse, error)
	// Relationship Grid
	RelationshipGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RelationshipGridResponse, error)
	// Update Relationship
	RelationshipUpdate(ctx context.Context, in *RelationshipUpdateRequest, opts ...grpc.CallOption) (*RelationshipUpdateResponse, error)
	// Partners Delete
	PartnersDelete(ctx context.Context, in *PartnersDeleteRequest, opts ...grpc.CallOption) (*PartnersDeleteResponse, error)
	// Remitance Partner Get
	PartnersGet(ctx context.Context, in *PartnersGetRequest, opts ...grpc.CallOption) (*PartnersGetResponse, error)
	// Remitance Partner Update
	PartnersUpdate(ctx context.Context, in *PartnersUpdateRequest, opts ...grpc.CallOption) (*PartnersUpdateResponse, error)
	// Remitance Relationship Create
	RelationshipCreate(ctx context.Context, in *RelationshipCreateRequest, opts ...grpc.CallOption) (*RelationshipCreateResponse, error)
}

type remittanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemittanceServiceClient(cc grpc.ClientConnInterface) RemittanceServiceClient {
	return &remittanceServiceClient{cc}
}

func (c *remittanceServiceClient) ValidateSendMoney(ctx context.Context, in *ValidateSendMoneyRequest, opts ...grpc.CallOption) (*ValidateSendMoneyResponse, error) {
	out := new(ValidateSendMoneyResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/ValidateSendMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) ConfirmSendMoney(ctx context.Context, in *ConfirmSendMoneyRequest, opts ...grpc.CallOption) (*ConfirmSendMoneyResponse, error) {
	out := new(ConfirmSendMoneyResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/ConfirmSendMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) CancelSendMoney(ctx context.Context, in *CancelSendMoneyRequest, opts ...grpc.CallOption) (*CancelSendMoneyResponse, error) {
	out := new(CancelSendMoneyResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/CancelSendMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) ValidateReceiveMoney(ctx context.Context, in *ValidateReceiveMoneyRequest, opts ...grpc.CallOption) (*ValidateReceiveMoneyResponse, error) {
	out := new(ValidateReceiveMoneyResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/ValidateReceiveMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) Inquire(ctx context.Context, in *InquireRequest, opts ...grpc.CallOption) (*InquireResponse, error) {
	out := new(InquireResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/Inquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) ConfirmReceiveMoney(ctx context.Context, in *ConfirmReceiveMoneyRequest, opts ...grpc.CallOption) (*ConfirmReceiveMoneyResponse, error) {
	out := new(ConfirmReceiveMoneyResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/ConfirmReceiveMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PartnersGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PartnersGridResponse, error) {
	out := new(PartnersGridResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PartnersGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PurposeOfRemittanceGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PurposeOfRemittanceGridResponse, error) {
	out := new(PurposeOfRemittanceGridResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PurposeOfRemittanceGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PurposeOfRemittanceGet(ctx context.Context, in *PurposeOfRemittanceGetRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceGetResponse, error) {
	out := new(PurposeOfRemittanceGetResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PurposeOfRemittanceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PurposeOfRemittanceUpdate(ctx context.Context, in *PurposeOfRemittanceUpdateRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceUpdateResponse, error) {
	out := new(PurposeOfRemittanceUpdateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PurposeOfRemittanceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PurposeOfRemittanceCreate(ctx context.Context, in *PurposeOfRemittanceCreateRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceCreateResponse, error) {
	out := new(PurposeOfRemittanceCreateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PurposeOfRemittanceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PartnersCreate(ctx context.Context, in *PartnersCreateRequest, opts ...grpc.CallOption) (*PartnersCreateResponse, error) {
	out := new(PartnersCreateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PartnersCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) SourceOfFundGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SourceOfFundGridResponse, error) {
	out := new(SourceOfFundGridResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/SourceOfFundGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) SourceOfFundCreate(ctx context.Context, in *SourceOfFundCreateRequest, opts ...grpc.CallOption) (*SourceOfFundCreateResponse, error) {
	out := new(SourceOfFundCreateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/SourceOfFundCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) SourceOfFundGet(ctx context.Context, in *SourceOfFundGetRequest, opts ...grpc.CallOption) (*SourceOfFundGetResponse, error) {
	out := new(SourceOfFundGetResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/SourceOfFundGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) EmploymentGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EmploymentGridResponse, error) {
	out := new(EmploymentGridResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/EmploymentGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) EmploymentGet(ctx context.Context, in *EmploymentGetRequest, opts ...grpc.CallOption) (*EmploymentGetResponse, error) {
	out := new(EmploymentGetResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/EmploymentGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RemittanceEmploymentCreate(ctx context.Context, in *RemittanceEmploymentCreateRequest, opts ...grpc.CallOption) (*RemittanceEmploymentCreateResponse, error) {
	out := new(RemittanceEmploymentCreateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RemittanceEmploymentCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RemittanceEmploymentUpdate(ctx context.Context, in *RemittanceEmploymentUpdateRequest, opts ...grpc.CallOption) (*RemittanceEmploymentUpdateResponse, error) {
	out := new(RemittanceEmploymentUpdateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RemittanceEmploymentUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) OccupationGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OccupationGridResponse, error) {
	out := new(OccupationGridResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/OccupationGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) OccupationGet(ctx context.Context, in *OccupationGetRequest, opts ...grpc.CallOption) (*OccupationGetResponse, error) {
	out := new(OccupationGetResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/OccupationGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) OccupationCreate(ctx context.Context, in *OccupationCreateRequest, opts ...grpc.CallOption) (*OccupationCreateResponse, error) {
	out := new(OccupationCreateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/OccupationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) OccupationUpdate(ctx context.Context, in *OccupationUpdateRequest, opts ...grpc.CallOption) (*OccupationUpdateResponse, error) {
	out := new(OccupationUpdateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/OccupationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) OccupationDelete(ctx context.Context, in *OccupationDeleteRequest, opts ...grpc.CallOption) (*OccupationDeleteResponse, error) {
	out := new(OccupationDeleteResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/OccupationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RelationshipGet(ctx context.Context, in *RelationshipGetRequest, opts ...grpc.CallOption) (*RelationshipGetResponse, error) {
	out := new(RelationshipGetResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RelationshipGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) SourceOfFundUpdate(ctx context.Context, in *SourceOfFundUpdateRequest, opts ...grpc.CallOption) (*SourceOfFundUpdateResponse, error) {
	out := new(SourceOfFundUpdateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/SourceOfFundUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) SourceOfFundDelete(ctx context.Context, in *SourceOfFundDeleteRequest, opts ...grpc.CallOption) (*SourceOfFundDeleteResponse, error) {
	out := new(SourceOfFundDeleteResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/SourceOfFundDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PurposeOfRemittanceDelete(ctx context.Context, in *PurposeOfRemittanceDeleteRequest, opts ...grpc.CallOption) (*PurposeOfRemittanceDeleteResponse, error) {
	out := new(PurposeOfRemittanceDeleteResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PurposeOfRemittanceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RelationshipDelete(ctx context.Context, in *RelationshipDeleteRequest, opts ...grpc.CallOption) (*RelationshipDeleteResponse, error) {
	out := new(RelationshipDeleteResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RelationshipDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RemittanceEmploymentDelete(ctx context.Context, in *RemittanceEmploymentDeleteRequest, opts ...grpc.CallOption) (*RemittanceEmploymentDeleteResponse, error) {
	out := new(RemittanceEmploymentDeleteResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RemittanceEmploymentDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RelationshipGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RelationshipGridResponse, error) {
	out := new(RelationshipGridResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RelationshipGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RelationshipUpdate(ctx context.Context, in *RelationshipUpdateRequest, opts ...grpc.CallOption) (*RelationshipUpdateResponse, error) {
	out := new(RelationshipUpdateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RelationshipUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PartnersDelete(ctx context.Context, in *PartnersDeleteRequest, opts ...grpc.CallOption) (*PartnersDeleteResponse, error) {
	out := new(PartnersDeleteResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PartnersDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PartnersGet(ctx context.Context, in *PartnersGetRequest, opts ...grpc.CallOption) (*PartnersGetResponse, error) {
	out := new(PartnersGetResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PartnersGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) PartnersUpdate(ctx context.Context, in *PartnersUpdateRequest, opts ...grpc.CallOption) (*PartnersUpdateResponse, error) {
	out := new(PartnersUpdateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/PartnersUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remittanceServiceClient) RelationshipCreate(ctx context.Context, in *RelationshipCreateRequest, opts ...grpc.CallOption) (*RelationshipCreateResponse, error) {
	out := new(RelationshipCreateResponse)
	err := c.cc.Invoke(ctx, "/remittance.RemittanceService/RelationshipCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemittanceServiceServer is the server API for RemittanceService service.
// All implementations must embed UnimplementedRemittanceServiceServer
// for forward compatibility
type RemittanceServiceServer interface {
	// Validate Send Money
	ValidateSendMoney(context.Context, *ValidateSendMoneyRequest) (*ValidateSendMoneyResponse, error)
	// Confirm Send Money
	ConfirmSendMoney(context.Context, *ConfirmSendMoneyRequest) (*ConfirmSendMoneyResponse, error)
	// Cancel Send Money
	CancelSendMoney(context.Context, *CancelSendMoneyRequest) (*CancelSendMoneyResponse, error)
	// Validate Receive Money
	ValidateReceiveMoney(context.Context, *ValidateReceiveMoneyRequest) (*ValidateReceiveMoneyResponse, error)
	// Remitance Inquire
	Inquire(context.Context, *InquireRequest) (*InquireResponse, error)
	// Confirm Receive Money
	ConfirmReceiveMoney(context.Context, *ConfirmReceiveMoneyRequest) (*ConfirmReceiveMoneyResponse, error)
	// Remitance Partner Grid
	PartnersGrid(context.Context, *emptypb.Empty) (*PartnersGridResponse, error)
	// Purpose Of Remittance Grid
	PurposeOfRemittanceGrid(context.Context, *emptypb.Empty) (*PurposeOfRemittanceGridResponse, error)
	// Purpose Of Remittance Get
	PurposeOfRemittanceGet(context.Context, *PurposeOfRemittanceGetRequest) (*PurposeOfRemittanceGetResponse, error)
	// Update Purpose of Remittance
	PurposeOfRemittanceUpdate(context.Context, *PurposeOfRemittanceUpdateRequest) (*PurposeOfRemittanceUpdateResponse, error)
	// Create Purpose of Remittance
	PurposeOfRemittanceCreate(context.Context, *PurposeOfRemittanceCreateRequest) (*PurposeOfRemittanceCreateResponse, error)
	// Remitance Partner Create
	PartnersCreate(context.Context, *PartnersCreateRequest) (*PartnersCreateResponse, error)
	// Source Of Fund Grid
	SourceOfFundGrid(context.Context, *emptypb.Empty) (*SourceOfFundGridResponse, error)
	// Create Source Of Fund
	SourceOfFundCreate(context.Context, *SourceOfFundCreateRequest) (*SourceOfFundCreateResponse, error)
	// Source Of Fund Get
	SourceOfFundGet(context.Context, *SourceOfFundGetRequest) (*SourceOfFundGetResponse, error)
	// Remittance Employment Grid
	EmploymentGrid(context.Context, *emptypb.Empty) (*EmploymentGridResponse, error)
	// Remittance Employment Get
	EmploymentGet(context.Context, *EmploymentGetRequest) (*EmploymentGetResponse, error)
	// Create Partners employment of Remittance
	RemittanceEmploymentCreate(context.Context, *RemittanceEmploymentCreateRequest) (*RemittanceEmploymentCreateResponse, error)
	// Update Employment Remittance
	RemittanceEmploymentUpdate(context.Context, *RemittanceEmploymentUpdateRequest) (*RemittanceEmploymentUpdateResponse, error)
	// Occupation Grid
	OccupationGrid(context.Context, *emptypb.Empty) (*OccupationGridResponse, error)
	// Occupation Get
	OccupationGet(context.Context, *OccupationGetRequest) (*OccupationGetResponse, error)
	// Create Occupation
	OccupationCreate(context.Context, *OccupationCreateRequest) (*OccupationCreateResponse, error)
	// Update Occupation
	OccupationUpdate(context.Context, *OccupationUpdateRequest) (*OccupationUpdateResponse, error)
	// Occupation Delete
	OccupationDelete(context.Context, *OccupationDeleteRequest) (*OccupationDeleteResponse, error)
	// Relationship Get
	RelationshipGet(context.Context, *RelationshipGetRequest) (*RelationshipGetResponse, error)
	// Update Source Of Fund
	SourceOfFundUpdate(context.Context, *SourceOfFundUpdateRequest) (*SourceOfFundUpdateResponse, error)
	// Source Of Fund Delete
	SourceOfFundDelete(context.Context, *SourceOfFundDeleteRequest) (*SourceOfFundDeleteResponse, error)
	// Purpose Of Remittance Delete
	PurposeOfRemittanceDelete(context.Context, *PurposeOfRemittanceDeleteRequest) (*PurposeOfRemittanceDeleteResponse, error)
	// Relationship Delete
	RelationshipDelete(context.Context, *RelationshipDeleteRequest) (*RelationshipDeleteResponse, error)
	// Remittance Employment Delete
	RemittanceEmploymentDelete(context.Context, *RemittanceEmploymentDeleteRequest) (*RemittanceEmploymentDeleteResponse, error)
	// Relationship Grid
	RelationshipGrid(context.Context, *emptypb.Empty) (*RelationshipGridResponse, error)
	// Update Relationship
	RelationshipUpdate(context.Context, *RelationshipUpdateRequest) (*RelationshipUpdateResponse, error)
	// Partners Delete
	PartnersDelete(context.Context, *PartnersDeleteRequest) (*PartnersDeleteResponse, error)
	// Remitance Partner Get
	PartnersGet(context.Context, *PartnersGetRequest) (*PartnersGetResponse, error)
	// Remitance Partner Update
	PartnersUpdate(context.Context, *PartnersUpdateRequest) (*PartnersUpdateResponse, error)
	// Remitance Relationship Create
	RelationshipCreate(context.Context, *RelationshipCreateRequest) (*RelationshipCreateResponse, error)
	mustEmbedUnimplementedRemittanceServiceServer()
}

// UnimplementedRemittanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemittanceServiceServer struct{}

func (UnimplementedRemittanceServiceServer) ValidateSendMoney(context.Context, *ValidateSendMoneyRequest) (*ValidateSendMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSendMoney not implemented")
}

func (UnimplementedRemittanceServiceServer) ConfirmSendMoney(context.Context, *ConfirmSendMoneyRequest) (*ConfirmSendMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSendMoney not implemented")
}

func (UnimplementedRemittanceServiceServer) CancelSendMoney(context.Context, *CancelSendMoneyRequest) (*CancelSendMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendMoney not implemented")
}

func (UnimplementedRemittanceServiceServer) ValidateReceiveMoney(context.Context, *ValidateReceiveMoneyRequest) (*ValidateReceiveMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateReceiveMoney not implemented")
}

func (UnimplementedRemittanceServiceServer) Inquire(context.Context, *InquireRequest) (*InquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inquire not implemented")
}

func (UnimplementedRemittanceServiceServer) ConfirmReceiveMoney(context.Context, *ConfirmReceiveMoneyRequest) (*ConfirmReceiveMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReceiveMoney not implemented")
}

func (UnimplementedRemittanceServiceServer) PartnersGrid(context.Context, *emptypb.Empty) (*PartnersGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnersGrid not implemented")
}

func (UnimplementedRemittanceServiceServer) PurposeOfRemittanceGrid(context.Context, *emptypb.Empty) (*PurposeOfRemittanceGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurposeOfRemittanceGrid not implemented")
}

func (UnimplementedRemittanceServiceServer) PurposeOfRemittanceGet(context.Context, *PurposeOfRemittanceGetRequest) (*PurposeOfRemittanceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurposeOfRemittanceGet not implemented")
}

func (UnimplementedRemittanceServiceServer) PurposeOfRemittanceUpdate(context.Context, *PurposeOfRemittanceUpdateRequest) (*PurposeOfRemittanceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurposeOfRemittanceUpdate not implemented")
}

func (UnimplementedRemittanceServiceServer) PurposeOfRemittanceCreate(context.Context, *PurposeOfRemittanceCreateRequest) (*PurposeOfRemittanceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurposeOfRemittanceCreate not implemented")
}

func (UnimplementedRemittanceServiceServer) PartnersCreate(context.Context, *PartnersCreateRequest) (*PartnersCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnersCreate not implemented")
}

func (UnimplementedRemittanceServiceServer) SourceOfFundGrid(context.Context, *emptypb.Empty) (*SourceOfFundGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceOfFundGrid not implemented")
}

func (UnimplementedRemittanceServiceServer) SourceOfFundCreate(context.Context, *SourceOfFundCreateRequest) (*SourceOfFundCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceOfFundCreate not implemented")
}

func (UnimplementedRemittanceServiceServer) SourceOfFundGet(context.Context, *SourceOfFundGetRequest) (*SourceOfFundGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceOfFundGet not implemented")
}

func (UnimplementedRemittanceServiceServer) EmploymentGrid(context.Context, *emptypb.Empty) (*EmploymentGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmploymentGrid not implemented")
}

func (UnimplementedRemittanceServiceServer) EmploymentGet(context.Context, *EmploymentGetRequest) (*EmploymentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmploymentGet not implemented")
}

func (UnimplementedRemittanceServiceServer) RemittanceEmploymentCreate(context.Context, *RemittanceEmploymentCreateRequest) (*RemittanceEmploymentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemittanceEmploymentCreate not implemented")
}

func (UnimplementedRemittanceServiceServer) RemittanceEmploymentUpdate(context.Context, *RemittanceEmploymentUpdateRequest) (*RemittanceEmploymentUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemittanceEmploymentUpdate not implemented")
}

func (UnimplementedRemittanceServiceServer) OccupationGrid(context.Context, *emptypb.Empty) (*OccupationGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OccupationGrid not implemented")
}

func (UnimplementedRemittanceServiceServer) OccupationGet(context.Context, *OccupationGetRequest) (*OccupationGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OccupationGet not implemented")
}

func (UnimplementedRemittanceServiceServer) OccupationCreate(context.Context, *OccupationCreateRequest) (*OccupationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OccupationCreate not implemented")
}

func (UnimplementedRemittanceServiceServer) OccupationUpdate(context.Context, *OccupationUpdateRequest) (*OccupationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OccupationUpdate not implemented")
}

func (UnimplementedRemittanceServiceServer) OccupationDelete(context.Context, *OccupationDeleteRequest) (*OccupationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OccupationDelete not implemented")
}

func (UnimplementedRemittanceServiceServer) RelationshipGet(context.Context, *RelationshipGetRequest) (*RelationshipGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationshipGet not implemented")
}

func (UnimplementedRemittanceServiceServer) SourceOfFundUpdate(context.Context, *SourceOfFundUpdateRequest) (*SourceOfFundUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceOfFundUpdate not implemented")
}

func (UnimplementedRemittanceServiceServer) SourceOfFundDelete(context.Context, *SourceOfFundDeleteRequest) (*SourceOfFundDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceOfFundDelete not implemented")
}

func (UnimplementedRemittanceServiceServer) PurposeOfRemittanceDelete(context.Context, *PurposeOfRemittanceDeleteRequest) (*PurposeOfRemittanceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurposeOfRemittanceDelete not implemented")
}

func (UnimplementedRemittanceServiceServer) RelationshipDelete(context.Context, *RelationshipDeleteRequest) (*RelationshipDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationshipDelete not implemented")
}

func (UnimplementedRemittanceServiceServer) RemittanceEmploymentDelete(context.Context, *RemittanceEmploymentDeleteRequest) (*RemittanceEmploymentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemittanceEmploymentDelete not implemented")
}

func (UnimplementedRemittanceServiceServer) RelationshipGrid(context.Context, *emptypb.Empty) (*RelationshipGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationshipGrid not implemented")
}

func (UnimplementedRemittanceServiceServer) RelationshipUpdate(context.Context, *RelationshipUpdateRequest) (*RelationshipUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationshipUpdate not implemented")
}

func (UnimplementedRemittanceServiceServer) PartnersDelete(context.Context, *PartnersDeleteRequest) (*PartnersDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnersDelete not implemented")
}

func (UnimplementedRemittanceServiceServer) PartnersGet(context.Context, *PartnersGetRequest) (*PartnersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnersGet not implemented")
}

func (UnimplementedRemittanceServiceServer) PartnersUpdate(context.Context, *PartnersUpdateRequest) (*PartnersUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnersUpdate not implemented")
}

func (UnimplementedRemittanceServiceServer) RelationshipCreate(context.Context, *RelationshipCreateRequest) (*RelationshipCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationshipCreate not implemented")
}
func (UnimplementedRemittanceServiceServer) mustEmbedUnimplementedRemittanceServiceServer() {}

// UnsafeRemittanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemittanceServiceServer will
// result in compilation errors.
type UnsafeRemittanceServiceServer interface {
	mustEmbedUnimplementedRemittanceServiceServer()
}

func RegisterRemittanceServiceServer(s grpc.ServiceRegistrar, srv RemittanceServiceServer) {
	s.RegisterService(&RemittanceService_ServiceDesc, srv)
}

func _RemittanceService_ValidateSendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSendMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).ValidateSendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/ValidateSendMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).ValidateSendMoney(ctx, req.(*ValidateSendMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_ConfirmSendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmSendMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).ConfirmSendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/ConfirmSendMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).ConfirmSendMoney(ctx, req.(*ConfirmSendMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_CancelSendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSendMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).CancelSendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/CancelSendMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).CancelSendMoney(ctx, req.(*CancelSendMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_ValidateReceiveMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateReceiveMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).ValidateReceiveMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/ValidateReceiveMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).ValidateReceiveMoney(ctx, req.(*ValidateReceiveMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_Inquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).Inquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/Inquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).Inquire(ctx, req.(*InquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_ConfirmReceiveMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReceiveMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).ConfirmReceiveMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/ConfirmReceiveMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).ConfirmReceiveMoney(ctx, req.(*ConfirmReceiveMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PartnersGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PartnersGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PartnersGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PartnersGrid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PurposeOfRemittanceGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PurposeOfRemittanceGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceGrid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PurposeOfRemittanceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurposeOfRemittanceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PurposeOfRemittanceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceGet(ctx, req.(*PurposeOfRemittanceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PurposeOfRemittanceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurposeOfRemittanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PurposeOfRemittanceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceUpdate(ctx, req.(*PurposeOfRemittanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PurposeOfRemittanceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurposeOfRemittanceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PurposeOfRemittanceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceCreate(ctx, req.(*PurposeOfRemittanceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PartnersCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnersCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PartnersCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PartnersCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PartnersCreate(ctx, req.(*PartnersCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_SourceOfFundGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).SourceOfFundGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/SourceOfFundGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).SourceOfFundGrid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_SourceOfFundCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceOfFundCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).SourceOfFundCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/SourceOfFundCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).SourceOfFundCreate(ctx, req.(*SourceOfFundCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_SourceOfFundGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceOfFundGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).SourceOfFundGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/SourceOfFundGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).SourceOfFundGet(ctx, req.(*SourceOfFundGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_EmploymentGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).EmploymentGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/EmploymentGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).EmploymentGrid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_EmploymentGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmploymentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).EmploymentGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/EmploymentGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).EmploymentGet(ctx, req.(*EmploymentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RemittanceEmploymentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemittanceEmploymentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RemittanceEmploymentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RemittanceEmploymentCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RemittanceEmploymentCreate(ctx, req.(*RemittanceEmploymentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RemittanceEmploymentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemittanceEmploymentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RemittanceEmploymentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RemittanceEmploymentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RemittanceEmploymentUpdate(ctx, req.(*RemittanceEmploymentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_OccupationGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).OccupationGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/OccupationGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).OccupationGrid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_OccupationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OccupationGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).OccupationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/OccupationGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).OccupationGet(ctx, req.(*OccupationGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_OccupationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OccupationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).OccupationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/OccupationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).OccupationCreate(ctx, req.(*OccupationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_OccupationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OccupationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).OccupationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/OccupationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).OccupationUpdate(ctx, req.(*OccupationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_OccupationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OccupationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).OccupationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/OccupationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).OccupationDelete(ctx, req.(*OccupationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RelationshipGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RelationshipGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RelationshipGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RelationshipGet(ctx, req.(*RelationshipGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_SourceOfFundUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceOfFundUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).SourceOfFundUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/SourceOfFundUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).SourceOfFundUpdate(ctx, req.(*SourceOfFundUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_SourceOfFundDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceOfFundDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).SourceOfFundDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/SourceOfFundDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).SourceOfFundDelete(ctx, req.(*SourceOfFundDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PurposeOfRemittanceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurposeOfRemittanceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PurposeOfRemittanceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PurposeOfRemittanceDelete(ctx, req.(*PurposeOfRemittanceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RelationshipDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RelationshipDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RelationshipDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RelationshipDelete(ctx, req.(*RelationshipDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RemittanceEmploymentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemittanceEmploymentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RemittanceEmploymentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RemittanceEmploymentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RemittanceEmploymentDelete(ctx, req.(*RemittanceEmploymentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RelationshipGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RelationshipGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RelationshipGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RelationshipGrid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RelationshipUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RelationshipUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RelationshipUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RelationshipUpdate(ctx, req.(*RelationshipUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PartnersDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnersDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PartnersDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PartnersDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PartnersDelete(ctx, req.(*PartnersDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PartnersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PartnersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PartnersGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PartnersGet(ctx, req.(*PartnersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_PartnersUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnersUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).PartnersUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/PartnersUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).PartnersUpdate(ctx, req.(*PartnersUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemittanceService_RelationshipCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemittanceServiceServer).RelationshipCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remittance.RemittanceService/RelationshipCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemittanceServiceServer).RelationshipCreate(ctx, req.(*RelationshipCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemittanceService_ServiceDesc is the grpc.ServiceDesc for RemittanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemittanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remittance.RemittanceService",
	HandlerType: (*RemittanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateSendMoney",
			Handler:    _RemittanceService_ValidateSendMoney_Handler,
		},
		{
			MethodName: "ConfirmSendMoney",
			Handler:    _RemittanceService_ConfirmSendMoney_Handler,
		},
		{
			MethodName: "CancelSendMoney",
			Handler:    _RemittanceService_CancelSendMoney_Handler,
		},
		{
			MethodName: "ValidateReceiveMoney",
			Handler:    _RemittanceService_ValidateReceiveMoney_Handler,
		},
		{
			MethodName: "Inquire",
			Handler:    _RemittanceService_Inquire_Handler,
		},
		{
			MethodName: "ConfirmReceiveMoney",
			Handler:    _RemittanceService_ConfirmReceiveMoney_Handler,
		},
		{
			MethodName: "PartnersGrid",
			Handler:    _RemittanceService_PartnersGrid_Handler,
		},
		{
			MethodName: "PurposeOfRemittanceGrid",
			Handler:    _RemittanceService_PurposeOfRemittanceGrid_Handler,
		},
		{
			MethodName: "PurposeOfRemittanceGet",
			Handler:    _RemittanceService_PurposeOfRemittanceGet_Handler,
		},
		{
			MethodName: "PurposeOfRemittanceUpdate",
			Handler:    _RemittanceService_PurposeOfRemittanceUpdate_Handler,
		},
		{
			MethodName: "PurposeOfRemittanceCreate",
			Handler:    _RemittanceService_PurposeOfRemittanceCreate_Handler,
		},
		{
			MethodName: "PartnersCreate",
			Handler:    _RemittanceService_PartnersCreate_Handler,
		},
		{
			MethodName: "SourceOfFundGrid",
			Handler:    _RemittanceService_SourceOfFundGrid_Handler,
		},
		{
			MethodName: "SourceOfFundCreate",
			Handler:    _RemittanceService_SourceOfFundCreate_Handler,
		},
		{
			MethodName: "SourceOfFundGet",
			Handler:    _RemittanceService_SourceOfFundGet_Handler,
		},
		{
			MethodName: "EmploymentGrid",
			Handler:    _RemittanceService_EmploymentGrid_Handler,
		},
		{
			MethodName: "EmploymentGet",
			Handler:    _RemittanceService_EmploymentGet_Handler,
		},
		{
			MethodName: "RemittanceEmploymentCreate",
			Handler:    _RemittanceService_RemittanceEmploymentCreate_Handler,
		},
		{
			MethodName: "RemittanceEmploymentUpdate",
			Handler:    _RemittanceService_RemittanceEmploymentUpdate_Handler,
		},
		{
			MethodName: "OccupationGrid",
			Handler:    _RemittanceService_OccupationGrid_Handler,
		},
		{
			MethodName: "OccupationGet",
			Handler:    _RemittanceService_OccupationGet_Handler,
		},
		{
			MethodName: "OccupationCreate",
			Handler:    _RemittanceService_OccupationCreate_Handler,
		},
		{
			MethodName: "OccupationUpdate",
			Handler:    _RemittanceService_OccupationUpdate_Handler,
		},
		{
			MethodName: "OccupationDelete",
			Handler:    _RemittanceService_OccupationDelete_Handler,
		},
		{
			MethodName: "RelationshipGet",
			Handler:    _RemittanceService_RelationshipGet_Handler,
		},
		{
			MethodName: "SourceOfFundUpdate",
			Handler:    _RemittanceService_SourceOfFundUpdate_Handler,
		},
		{
			MethodName: "SourceOfFundDelete",
			Handler:    _RemittanceService_SourceOfFundDelete_Handler,
		},
		{
			MethodName: "PurposeOfRemittanceDelete",
			Handler:    _RemittanceService_PurposeOfRemittanceDelete_Handler,
		},
		{
			MethodName: "RelationshipDelete",
			Handler:    _RemittanceService_RelationshipDelete_Handler,
		},
		{
			MethodName: "RemittanceEmploymentDelete",
			Handler:    _RemittanceService_RemittanceEmploymentDelete_Handler,
		},
		{
			MethodName: "RelationshipGrid",
			Handler:    _RemittanceService_RelationshipGrid_Handler,
		},
		{
			MethodName: "RelationshipUpdate",
			Handler:    _RemittanceService_RelationshipUpdate_Handler,
		},
		{
			MethodName: "PartnersDelete",
			Handler:    _RemittanceService_PartnersDelete_Handler,
		},
		{
			MethodName: "PartnersGet",
			Handler:    _RemittanceService_PartnersGet_Handler,
		},
		{
			MethodName: "PartnersUpdate",
			Handler:    _RemittanceService_PartnersUpdate_Handler,
		},
		{
			MethodName: "RelationshipCreate",
			Handler:    _RemittanceService_RelationshipCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/drp/v1/remittance/all.proto",
}
