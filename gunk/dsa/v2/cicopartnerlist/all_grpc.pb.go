// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cicopartnerlist

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CICOPartnerListServiceClient is the client API for CICOPartnerListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CICOPartnerListServiceClient interface {
	// Create cicoPartnerList.
	CreateCICOPartnerList(ctx context.Context, in *CreateCICOPartnerListRequest, opts ...grpc.CallOption) (*CreateCICOPartnerListResponse, error)
	// Update cicopartnerlist.
	UpdateCICOPartnerList(ctx context.Context, in *UpdateCICOPartnerListRequest, opts ...grpc.CallOption) (*UpdateCICOPartnerListResponse, error)
	// Get cicopartnerlist by org ID.
	GetCICOPartnerList(ctx context.Context, in *GetCICOPartnerListRequest, opts ...grpc.CallOption) (*GetCICOPartnerListResponse, error)
	// Delete cicopartnerlist by ID.
	DeleteCICOPartnerList(ctx context.Context, in *DeleteCICOPartnerListRequest, opts ...grpc.CallOption) (*DeleteCICOPartnerListResponse, error)
	// Enable cicopartnerlist.
	EnableCICOPartnerList(ctx context.Context, in *EnableCICOPartnerListRequest, opts ...grpc.CallOption) (*EnableCICOPartnerListResponse, error)
	// Disable cicopartnerlist.
	DisableCICOPartnerList(ctx context.Context, in *DisableCICOPartnerListRequest, opts ...grpc.CallOption) (*DisableCICOPartnerListResponse, error)
}

type cICOPartnerListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCICOPartnerListServiceClient(cc grpc.ClientConnInterface) CICOPartnerListServiceClient {
	return &cICOPartnerListServiceClient{cc}
}

func (c *cICOPartnerListServiceClient) CreateCICOPartnerList(ctx context.Context, in *CreateCICOPartnerListRequest, opts ...grpc.CallOption) (*CreateCICOPartnerListResponse, error) {
	out := new(CreateCICOPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.cicopartnerlist.CICOPartnerListService/CreateCICOPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICOPartnerListServiceClient) UpdateCICOPartnerList(ctx context.Context, in *UpdateCICOPartnerListRequest, opts ...grpc.CallOption) (*UpdateCICOPartnerListResponse, error) {
	out := new(UpdateCICOPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.cicopartnerlist.CICOPartnerListService/UpdateCICOPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICOPartnerListServiceClient) GetCICOPartnerList(ctx context.Context, in *GetCICOPartnerListRequest, opts ...grpc.CallOption) (*GetCICOPartnerListResponse, error) {
	out := new(GetCICOPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.cicopartnerlist.CICOPartnerListService/GetCICOPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICOPartnerListServiceClient) DeleteCICOPartnerList(ctx context.Context, in *DeleteCICOPartnerListRequest, opts ...grpc.CallOption) (*DeleteCICOPartnerListResponse, error) {
	out := new(DeleteCICOPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.cicopartnerlist.CICOPartnerListService/DeleteCICOPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICOPartnerListServiceClient) EnableCICOPartnerList(ctx context.Context, in *EnableCICOPartnerListRequest, opts ...grpc.CallOption) (*EnableCICOPartnerListResponse, error) {
	out := new(EnableCICOPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.cicopartnerlist.CICOPartnerListService/EnableCICOPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICOPartnerListServiceClient) DisableCICOPartnerList(ctx context.Context, in *DisableCICOPartnerListRequest, opts ...grpc.CallOption) (*DisableCICOPartnerListResponse, error) {
	out := new(DisableCICOPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.cicopartnerlist.CICOPartnerListService/DisableCICOPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CICOPartnerListServiceServer is the server API for CICOPartnerListService service.
// All implementations must embed UnimplementedCICOPartnerListServiceServer
// for forward compatibility
type CICOPartnerListServiceServer interface {
	// Create cicoPartnerList.
	CreateCICOPartnerList(context.Context, *CreateCICOPartnerListRequest) (*CreateCICOPartnerListResponse, error)
	// Update cicopartnerlist.
	UpdateCICOPartnerList(context.Context, *UpdateCICOPartnerListRequest) (*UpdateCICOPartnerListResponse, error)
	// Get cicopartnerlist by org ID.
	GetCICOPartnerList(context.Context, *GetCICOPartnerListRequest) (*GetCICOPartnerListResponse, error)
	// Delete cicopartnerlist by ID.
	DeleteCICOPartnerList(context.Context, *DeleteCICOPartnerListRequest) (*DeleteCICOPartnerListResponse, error)
	// Enable cicopartnerlist.
	EnableCICOPartnerList(context.Context, *EnableCICOPartnerListRequest) (*EnableCICOPartnerListResponse, error)
	// Disable cicopartnerlist.
	DisableCICOPartnerList(context.Context, *DisableCICOPartnerListRequest) (*DisableCICOPartnerListResponse, error)
	mustEmbedUnimplementedCICOPartnerListServiceServer()
}

// UnimplementedCICOPartnerListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCICOPartnerListServiceServer struct{}

func (UnimplementedCICOPartnerListServiceServer) CreateCICOPartnerList(context.Context, *CreateCICOPartnerListRequest) (*CreateCICOPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCICOPartnerList not implemented")
}

func (UnimplementedCICOPartnerListServiceServer) UpdateCICOPartnerList(context.Context, *UpdateCICOPartnerListRequest) (*UpdateCICOPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCICOPartnerList not implemented")
}

func (UnimplementedCICOPartnerListServiceServer) GetCICOPartnerList(context.Context, *GetCICOPartnerListRequest) (*GetCICOPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCICOPartnerList not implemented")
}

func (UnimplementedCICOPartnerListServiceServer) DeleteCICOPartnerList(context.Context, *DeleteCICOPartnerListRequest) (*DeleteCICOPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCICOPartnerList not implemented")
}

func (UnimplementedCICOPartnerListServiceServer) EnableCICOPartnerList(context.Context, *EnableCICOPartnerListRequest) (*EnableCICOPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCICOPartnerList not implemented")
}

func (UnimplementedCICOPartnerListServiceServer) DisableCICOPartnerList(context.Context, *DisableCICOPartnerListRequest) (*DisableCICOPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCICOPartnerList not implemented")
}

func (UnimplementedCICOPartnerListServiceServer) mustEmbedUnimplementedCICOPartnerListServiceServer() {
}

// UnsafeCICOPartnerListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CICOPartnerListServiceServer will
// result in compilation errors.
type UnsafeCICOPartnerListServiceServer interface {
	mustEmbedUnimplementedCICOPartnerListServiceServer()
}

func RegisterCICOPartnerListServiceServer(s grpc.ServiceRegistrar, srv CICOPartnerListServiceServer) {
	s.RegisterService(&CICOPartnerListService_ServiceDesc, srv)
}

func _CICOPartnerListService_CreateCICOPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCICOPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICOPartnerListServiceServer).CreateCICOPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.cicopartnerlist.CICOPartnerListService/CreateCICOPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICOPartnerListServiceServer).CreateCICOPartnerList(ctx, req.(*CreateCICOPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICOPartnerListService_UpdateCICOPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCICOPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICOPartnerListServiceServer).UpdateCICOPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.cicopartnerlist.CICOPartnerListService/UpdateCICOPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICOPartnerListServiceServer).UpdateCICOPartnerList(ctx, req.(*UpdateCICOPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICOPartnerListService_GetCICOPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCICOPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICOPartnerListServiceServer).GetCICOPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.cicopartnerlist.CICOPartnerListService/GetCICOPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICOPartnerListServiceServer).GetCICOPartnerList(ctx, req.(*GetCICOPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICOPartnerListService_DeleteCICOPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCICOPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICOPartnerListServiceServer).DeleteCICOPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.cicopartnerlist.CICOPartnerListService/DeleteCICOPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICOPartnerListServiceServer).DeleteCICOPartnerList(ctx, req.(*DeleteCICOPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICOPartnerListService_EnableCICOPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCICOPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICOPartnerListServiceServer).EnableCICOPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.cicopartnerlist.CICOPartnerListService/EnableCICOPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICOPartnerListServiceServer).EnableCICOPartnerList(ctx, req.(*EnableCICOPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICOPartnerListService_DisableCICOPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableCICOPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICOPartnerListServiceServer).DisableCICOPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.cicopartnerlist.CICOPartnerListService/DisableCICOPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICOPartnerListServiceServer).DisableCICOPartnerList(ctx, req.(*DisableCICOPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CICOPartnerListService_ServiceDesc is the grpc.ServiceDesc for CICOPartnerListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CICOPartnerListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v2.cicopartnerlist.CICOPartnerListService",
	HandlerType: (*CICOPartnerListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCICOPartnerList",
			Handler:    _CICOPartnerListService_CreateCICOPartnerList_Handler,
		},
		{
			MethodName: "UpdateCICOPartnerList",
			Handler:    _CICOPartnerListService_UpdateCICOPartnerList_Handler,
		},
		{
			MethodName: "GetCICOPartnerList",
			Handler:    _CICOPartnerListService_GetCICOPartnerList_Handler,
		},
		{
			MethodName: "DeleteCICOPartnerList",
			Handler:    _CICOPartnerListService_DeleteCICOPartnerList_Handler,
		},
		{
			MethodName: "EnableCICOPartnerList",
			Handler:    _CICOPartnerListService_EnableCICOPartnerList_Handler,
		},
		{
			MethodName: "DisableCICOPartnerList",
			Handler:    _CICOPartnerListService_DisableCICOPartnerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v2/cicopartnerlist/all.proto",
}
