// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v2/service/all.proto

package service

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortBy int32

const (
	SortBy_DESC SortBy = 0
	SortBy_ASC  SortBy = 1
)

// Enum value maps for SortBy.
var (
	SortBy_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	SortBy_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x SortBy) Enum() *SortBy {
	p := new(SortBy)
	*p = x
	return p
}

func (x SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[0].Descriptor()
}

func (SortBy) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[0]
}

func (x SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortBy.Descriptor instead.
func (SortBy) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{0}
}

type ServiceSort int32

const (
	ServiceSort_CREATED     ServiceSort = 0
	ServiceSort_COMPANYNAME ServiceSort = 1
	ServiceSort_SERVICENAME ServiceSort = 2
	ServiceSort_STATUS      ServiceSort = 3
	ServiceSort_PARTNER     ServiceSort = 4
	ServiceSort_LASTUPDATED ServiceSort = 5
	ServiceSort_UPDATEDBY   ServiceSort = 6
	ServiceSort_APPLIED     ServiceSort = 7
)

// Enum value maps for ServiceSort.
var (
	ServiceSort_name = map[int32]string{
		0: "CREATED",
		1: "COMPANYNAME",
		2: "SERVICENAME",
		3: "STATUS",
		4: "PARTNER",
		5: "LASTUPDATED",
		6: "UPDATEDBY",
		7: "APPLIED",
	}
	ServiceSort_value = map[string]int32{
		"CREATED":     0,
		"COMPANYNAME": 1,
		"SERVICENAME": 2,
		"STATUS":      3,
		"PARTNER":     4,
		"LASTUPDATED": 5,
		"UPDATEDBY":   6,
		"APPLIED":     7,
	}
)

func (x ServiceSort) Enum() *ServiceSort {
	p := new(ServiceSort)
	*p = x
	return p
}

func (x ServiceSort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceSort) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[1].Descriptor()
}

func (ServiceSort) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[1]
}

func (x ServiceSort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceSort.Descriptor instead.
func (ServiceSort) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{1}
}

type RemittancePartner int32

const (
	RemittancePartner_WU   RemittancePartner = 0
	RemittancePartner_IR   RemittancePartner = 1
	RemittancePartner_TF   RemittancePartner = 2
	RemittancePartner_RM   RemittancePartner = 3
	RemittancePartner_RIA  RemittancePartner = 4
	RemittancePartner_MB   RemittancePartner = 5
	RemittancePartner_BPI  RemittancePartner = 6
	RemittancePartner_USSC RemittancePartner = 7
	RemittancePartner_JPR  RemittancePartner = 8
	RemittancePartner_IC   RemittancePartner = 9
	RemittancePartner_UNT  RemittancePartner = 10
	RemittancePartner_CEB  RemittancePartner = 11
	RemittancePartner_WISE RemittancePartner = 12
	RemittancePartner_CEBI RemittancePartner = 13
	RemittancePartner_AYA  RemittancePartner = 14
	RemittancePartner_IE   RemittancePartner = 15
)

// Enum value maps for RemittancePartner.
var (
	RemittancePartner_name = map[int32]string{
		0:  "WU",
		1:  "IR",
		2:  "TF",
		3:  "RM",
		4:  "RIA",
		5:  "MB",
		6:  "BPI",
		7:  "USSC",
		8:  "JPR",
		9:  "IC",
		10: "UNT",
		11: "CEB",
		12: "WISE",
		13: "CEBI",
		14: "AYA",
		15: "IE",
	}
	RemittancePartner_value = map[string]int32{
		"WU":   0,
		"IR":   1,
		"TF":   2,
		"RM":   3,
		"RIA":  4,
		"MB":   5,
		"BPI":  6,
		"USSC": 7,
		"JPR":  8,
		"IC":   9,
		"UNT":  10,
		"CEB":  11,
		"WISE": 12,
		"CEBI": 13,
		"AYA":  14,
		"IE":   15,
	}
)

func (x RemittancePartner) Enum() *RemittancePartner {
	p := new(RemittancePartner)
	*p = x
	return p
}

func (x RemittancePartner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemittancePartner) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[2].Descriptor()
}

func (RemittancePartner) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[2]
}

func (x RemittancePartner) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemittancePartner.Descriptor instead.
func (RemittancePartner) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{2}
}

type CICOPartner int32

const (
	CICOPartner_GCASH      CICOPartner = 0
	CICOPartner_DRAGONPAY  CICOPartner = 1
	CICOPartner_PAYMAYA    CICOPartner = 2
	CICOPartner_COINS      CICOPartner = 3
	CICOPartner_PERAHUB    CICOPartner = 4
	CICOPartner_DISKARTECH CICOPartner = 5
)

// Enum value maps for CICOPartner.
var (
	CICOPartner_name = map[int32]string{
		0: "GCASH",
		1: "DRAGONPAY",
		2: "PAYMAYA",
		3: "COINS",
		4: "PERAHUB",
		5: "DISKARTECH",
	}
	CICOPartner_value = map[string]int32{
		"GCASH":      0,
		"DRAGONPAY":  1,
		"PAYMAYA":    2,
		"COINS":      3,
		"PERAHUB":    4,
		"DISKARTECH": 5,
	}
)

func (x CICOPartner) Enum() *CICOPartner {
	p := new(CICOPartner)
	*p = x
	return p
}

func (x CICOPartner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CICOPartner) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[3].Descriptor()
}

func (CICOPartner) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[3]
}

func (x CICOPartner) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CICOPartner.Descriptor instead.
func (CICOPartner) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{3}
}

type ServiceType int32

const (
	ServiceType_EMPTYSERVICETYPE ServiceType = 0
	ServiceType_REMITTANCE       ServiceType = 1
	ServiceType_BILLSPAYMENT     ServiceType = 2
	ServiceType_CASHINCASHOUT    ServiceType = 3
	ServiceType_MICROINSURANCE   ServiceType = 4
	ServiceType_REMITTOACCOUNT   ServiceType = 5
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "EMPTYSERVICETYPE",
		1: "REMITTANCE",
		2: "BILLSPAYMENT",
		3: "CASHINCASHOUT",
		4: "MICROINSURANCE",
		5: "REMITTOACCOUNT",
	}
	ServiceType_value = map[string]int32{
		"EMPTYSERVICETYPE": 0,
		"REMITTANCE":       1,
		"BILLSPAYMENT":     2,
		"CASHINCASHOUT":    3,
		"MICROINSURANCE":   4,
		"REMITTOACCOUNT":   5,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[4].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[4]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{4}
}

type ServiceRequestStatus int32

const (
	// ServiceRequestStatus_NOSTATUS is set when a service is enabled without a service request from DSA
	ServiceRequestStatus_NOSTATUS     ServiceRequestStatus = 0
	ServiceRequestStatus_PENDING      ServiceRequestStatus = 1
	ServiceRequestStatus_ACCEPTED     ServiceRequestStatus = 2
	ServiceRequestStatus_REJECTED     ServiceRequestStatus = 3
	ServiceRequestStatus_PARTNERDRAFT ServiceRequestStatus = 4
	ServiceRequestStatus_REQDOCDRAFT  ServiceRequestStatus = 5
	ServiceRequestStatus_ADDIDOCDRAFT ServiceRequestStatus = 6
)

// Enum value maps for ServiceRequestStatus.
var (
	ServiceRequestStatus_name = map[int32]string{
		0: "NOSTATUS",
		1: "PENDING",
		2: "ACCEPTED",
		3: "REJECTED",
		4: "PARTNERDRAFT",
		5: "REQDOCDRAFT",
		6: "ADDIDOCDRAFT",
	}
	ServiceRequestStatus_value = map[string]int32{
		"NOSTATUS":     0,
		"PENDING":      1,
		"ACCEPTED":     2,
		"REJECTED":     3,
		"PARTNERDRAFT": 4,
		"REQDOCDRAFT":  5,
		"ADDIDOCDRAFT": 6,
	}
)

func (x ServiceRequestStatus) Enum() *ServiceRequestStatus {
	p := new(ServiceRequestStatus)
	*p = x
	return p
}

func (x ServiceRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[5].Descriptor()
}

func (ServiceRequestStatus) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes[5]
}

func (x ServiceRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceRequestStatus.Descriptor instead.
func (ServiceRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{5}
}

type AddServiceRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string      `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Type  ServiceType `protobuf:"varint,2,opt,name=Type,json=service_type,proto3,enum=petnet.v2.service.ServiceType" json:"service_type,omitempty"`
	// add service partners to apply for later, use the enums for service partners
	Partners []string `protobuf:"bytes,3,rep,name=Partners,json=partners,proto3" json:"partners,omitempty"`
	// set if all available partners should be added for the service
	AllPartners bool `protobuf:"varint,4,opt,name=AllPartners,json=all_partners,proto3" json:"all_partners,omitempty"`
}

func (x *AddServiceRequestRequest) Reset() {
	*x = AddServiceRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServiceRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServiceRequestRequest) ProtoMessage() {}

func (x *AddServiceRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServiceRequestRequest.ProtoReflect.Descriptor instead.
func (*AddServiceRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{0}
}

func (x *AddServiceRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *AddServiceRequestRequest) GetType() ServiceType {
	if x != nil {
		return x.Type
	}
	return ServiceType_EMPTYSERVICETYPE
}

func (x *AddServiceRequestRequest) GetPartners() []string {
	if x != nil {
		return x.Partners
	}
	return nil
}

func (x *AddServiceRequestRequest) GetAllPartners() bool {
	if x != nil {
		return x.AllPartners
	}
	return false
}

type ApplyServiceRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string      `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Type  ServiceType `protobuf:"varint,2,opt,name=Type,json=service_type,proto3,enum=petnet.v2.service.ServiceType" json:"service_type,omitempty"`
}

func (x *ApplyServiceRequestRequest) Reset() {
	*x = ApplyServiceRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyServiceRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyServiceRequestRequest) ProtoMessage() {}

func (x *ApplyServiceRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyServiceRequestRequest.ProtoReflect.Descriptor instead.
func (*ApplyServiceRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyServiceRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ApplyServiceRequestRequest) GetType() ServiceType {
	if x != nil {
		return x.Type
	}
	return ServiceType_EMPTYSERVICETYPE
}

type ListServiceRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OrgIDs leave empty to retrieve services for all orgs
	OrgIDs []string `protobuf:"bytes,1,rep,name=OrgIDs,json=org_ids,proto3" json:"org_ids,omitempty"`
	// set Type to only retrieve services with that type
	Types []ServiceType `protobuf:"varint,2,rep,packed,name=Types,json=service_types,proto3,enum=petnet.v2.service.ServiceType" json:"service_types,omitempty"`
	// set Status to only retrieve services with that status
	Statuses []ServiceRequestStatus `protobuf:"varint,3,rep,packed,name=Statuses,json=service_request_statuses,proto3,enum=petnet.v2.service.ServiceRequestStatus" json:"service_request_statuses,omitempty"`
	// set Partner to only retrieve services with those partners
	Partners     []string    `protobuf:"bytes,4,rep,name=Partners,json=partners,proto3" json:"partners,omitempty"`
	SortByColumn ServiceSort `protobuf:"varint,5,opt,name=SortByColumn,json=sort_by_column,proto3,enum=petnet.v2.service.ServiceSort" json:"sort_by_column,omitempty"`
	SortBy       SortBy      `protobuf:"varint,6,opt,name=SortBy,json=sort_by,proto3,enum=petnet.v2.service.SortBy" json:"sort_by,omitempty"`
	Limit        int32       `protobuf:"varint,7,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
	Offset       int32       `protobuf:"varint,8,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
}

func (x *ListServiceRequestRequest) Reset() {
	*x = ListServiceRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceRequestRequest) ProtoMessage() {}

func (x *ListServiceRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceRequestRequest.ProtoReflect.Descriptor instead.
func (*ListServiceRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{2}
}

func (x *ListServiceRequestRequest) GetOrgIDs() []string {
	if x != nil {
		return x.OrgIDs
	}
	return nil
}

func (x *ListServiceRequestRequest) GetTypes() []ServiceType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListServiceRequestRequest) GetStatuses() []ServiceRequestStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListServiceRequestRequest) GetPartners() []string {
	if x != nil {
		return x.Partners
	}
	return nil
}

func (x *ListServiceRequestRequest) GetSortByColumn() ServiceSort {
	if x != nil {
		return x.SortByColumn
	}
	return ServiceSort_CREATED
}

func (x *ListServiceRequestRequest) GetSortBy() SortBy {
	if x != nil {
		return x.SortBy
	}
	return SortBy_DESC
}

func (x *ListServiceRequestRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListServiceRequestRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListServiceRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceRequst []*ServiceRequest `protobuf:"bytes,1,rep,name=ServiceRequst,json=services,proto3" json:"services,omitempty"`
	Total         int32             `protobuf:"varint,2,opt,name=Total,json=total,proto3" json:"total,omitempty"`
}

func (x *ListServiceRequestResponse) Reset() {
	*x = ListServiceRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceRequestResponse) ProtoMessage() {}

func (x *ListServiceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceRequestResponse.ProtoReflect.Descriptor instead.
func (*ListServiceRequestResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{3}
}

func (x *ListServiceRequestResponse) GetServiceRequst() []*ServiceRequest {
	if x != nil {
		return x.ServiceRequst
	}
	return nil
}

func (x *ListServiceRequestResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       string                 `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	CompanyName string                 `protobuf:"bytes,2,opt,name=CompanyName,json=company_name,proto3" json:"company_name,omitempty"`
	Partner     string                 `protobuf:"bytes,3,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	Type        ServiceType            `protobuf:"varint,4,opt,name=Type,json=service_type,proto3,enum=petnet.v2.service.ServiceType" json:"service_type,omitempty"`
	Status      ServiceRequestStatus   `protobuf:"varint,5,opt,name=Status,json=service_request_status,proto3,enum=petnet.v2.service.ServiceRequestStatus" json:"service_request_status,omitempty"`
	Enabled     bool                   `protobuf:"varint,6,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
	Remarks     string                 `protobuf:"bytes,7,opt,name=Remarks,json=remarks,proto3" json:"remarks,omitempty"`
	Applied     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=Applied,json=applied,proto3" json:"applied,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	UpdatedBy   string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	ID          string                 `protobuf:"bytes,12,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Partners    string                 `protobuf:"bytes,13,opt,name=Partners,json=partners,proto3" json:"partners,omitempty"`
	Pending     int32                  `protobuf:"varint,14,opt,name=Pending,json=pending,proto3" json:"pending,omitempty"`
	Accepted    int32                  `protobuf:"varint,15,opt,name=Accepted,json=accepted,proto3" json:"accepted,omitempty"`
	Rejected    int32                  `protobuf:"varint,16,opt,name=Rejected,json=rejected,proto3" json:"rejected,omitempty"`
}

func (x *ServiceRequest) Reset() {
	*x = ServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequest) ProtoMessage() {}

func (x *ServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequest.ProtoReflect.Descriptor instead.
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ServiceRequest) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ServiceRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *ServiceRequest) GetType() ServiceType {
	if x != nil {
		return x.Type
	}
	return ServiceType_EMPTYSERVICETYPE
}

func (x *ServiceRequest) GetStatus() ServiceRequestStatus {
	if x != nil {
		return x.Status
	}
	return ServiceRequestStatus_NOSTATUS
}

func (x *ServiceRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ServiceRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ServiceRequest) GetApplied() *timestamppb.Timestamp {
	if x != nil {
		return x.Applied
	}
	return nil
}

func (x *ServiceRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ServiceRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *ServiceRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ServiceRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ServiceRequest) GetPartners() string {
	if x != nil {
		return x.Partners
	}
	return ""
}

func (x *ServiceRequest) GetPending() int32 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *ServiceRequest) GetAccepted() int32 {
	if x != nil {
		return x.Accepted
	}
	return 0
}

func (x *ServiceRequest) GetRejected() int32 {
	if x != nil {
		return x.Rejected
	}
	return 0
}

type ServiceStatusRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UpdatedBy string `protobuf:"bytes,2,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Partner   string `protobuf:"bytes,3,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName   string `protobuf:"bytes,4,opt,name=SvcName,json=svc_name,proto3" json:"svc_name,omitempty"`
}

func (x *ServiceStatusRequestRequest) Reset() {
	*x = ServiceStatusRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatusRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatusRequestRequest) ProtoMessage() {}

func (x *ServiceStatusRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatusRequestRequest.ProtoReflect.Descriptor instead.
func (*ServiceStatusRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceStatusRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ServiceStatusRequestRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ServiceStatusRequestRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *ServiceStatusRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

type ValidateServiceAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID               string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner             string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName             string `protobuf:"bytes,3,opt,name=SvcName,json=svc_name,proto3" json:"svc_name,omitempty"`
	IsAnyPartnerEnabled bool   `protobuf:"varint,4,opt,name=IsAnyPartnerEnabled,json=is_any_partner_enabled,proto3" json:"is_any_partner_enabled,omitempty"`
}

func (x *ValidateServiceAccessRequest) Reset() {
	*x = ValidateServiceAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateServiceAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateServiceAccessRequest) ProtoMessage() {}

func (x *ValidateServiceAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateServiceAccessRequest.ProtoReflect.Descriptor instead.
func (*ValidateServiceAccessRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateServiceAccessRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ValidateServiceAccessRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *ValidateServiceAccessRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *ValidateServiceAccessRequest) GetIsAnyPartnerEnabled() bool {
	if x != nil {
		return x.IsAnyPartnerEnabled
	}
	return false
}

type ValidateServiceAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ValidateServiceAccessResponse) Reset() {
	*x = ValidateServiceAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateServiceAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateServiceAccessResponse) ProtoMessage() {}

func (x *ValidateServiceAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateServiceAccessResponse.ProtoReflect.Descriptor instead.
func (*ValidateServiceAccessResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{7}
}

func (x *ValidateServiceAccessResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddUploadSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string `protobuf:"bytes,3,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	FileType string `protobuf:"bytes,4,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
	FileID   string `protobuf:"bytes,5,opt,name=FileID,json=file_id,proto3" json:"file_id,omitempty"`
	CreateBy string `protobuf:"bytes,6,opt,name=CreateBy,json=create_by,proto3" json:"create_by,omitempty"`
}

func (x *AddUploadSvcRequestRequest) Reset() {
	*x = AddUploadSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUploadSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUploadSvcRequestRequest) ProtoMessage() {}

func (x *AddUploadSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUploadSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*AddUploadSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{8}
}

func (x *AddUploadSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *AddUploadSvcRequestRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *AddUploadSvcRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *AddUploadSvcRequestRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *AddUploadSvcRequestRequest) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *AddUploadSvcRequestRequest) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type UpdateUploadSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string `protobuf:"bytes,3,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	FileType string `protobuf:"bytes,5,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
	FileID   string `protobuf:"bytes,6,opt,name=FileID,json=file_id,proto3" json:"file_id,omitempty"`
	CreateBy string `protobuf:"bytes,7,opt,name=CreateBy,json=create_by,proto3" json:"create_by,omitempty"`
	VerifyBy string `protobuf:"bytes,8,opt,name=VerifyBy,json=verify_by,proto3" json:"verify_by,omitempty"`
}

func (x *UpdateUploadSvcRequestRequest) Reset() {
	*x = UpdateUploadSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUploadSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUploadSvcRequestRequest) ProtoMessage() {}

func (x *UpdateUploadSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUploadSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateUploadSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUploadSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpdateUploadSvcRequestRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpdateUploadSvcRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *UpdateUploadSvcRequestRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateUploadSvcRequestRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *UpdateUploadSvcRequestRequest) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *UpdateUploadSvcRequestRequest) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *UpdateUploadSvcRequestRequest) GetVerifyBy() string {
	if x != nil {
		return x.VerifyBy
	}
	return ""
}

type AcceptUploadSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string `protobuf:"bytes,3,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	FileType string `protobuf:"bytes,4,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
	VerifyBy string `protobuf:"bytes,5,opt,name=VerifyBy,json=verify_by,proto3" json:"verify_by,omitempty"`
}

func (x *AcceptUploadSvcRequestRequest) Reset() {
	*x = AcceptUploadSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptUploadSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptUploadSvcRequestRequest) ProtoMessage() {}

func (x *AcceptUploadSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptUploadSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*AcceptUploadSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{10}
}

func (x *AcceptUploadSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *AcceptUploadSvcRequestRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *AcceptUploadSvcRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *AcceptUploadSvcRequestRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *AcceptUploadSvcRequestRequest) GetVerifyBy() string {
	if x != nil {
		return x.VerifyBy
	}
	return ""
}

type SetStatusUploadSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string               `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partners []string             `protobuf:"bytes,2,rep,name=Partners,json=partners,proto3" json:"partners,omitempty"`
	SvcName  string               `protobuf:"bytes,3,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	Status   ServiceRequestStatus `protobuf:"varint,4,opt,name=Status,json=status,proto3,enum=petnet.v2.service.ServiceRequestStatus" json:"status,omitempty"`
}

func (x *SetStatusUploadSvcRequestRequest) Reset() {
	*x = SetStatusUploadSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStatusUploadSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStatusUploadSvcRequestRequest) ProtoMessage() {}

func (x *SetStatusUploadSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStatusUploadSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*SetStatusUploadSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{11}
}

func (x *SetStatusUploadSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *SetStatusUploadSvcRequestRequest) GetPartners() []string {
	if x != nil {
		return x.Partners
	}
	return nil
}

func (x *SetStatusUploadSvcRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *SetStatusUploadSvcRequestRequest) GetStatus() ServiceRequestStatus {
	if x != nil {
		return x.Status
	}
	return ServiceRequestStatus_NOSTATUS
}

type AddRemarkSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Remark    string `protobuf:"bytes,2,opt,name=Remark,json=remark,proto3" json:"remark,omitempty"`
	UpdatedBy string `protobuf:"bytes,3,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	SvcName   string `protobuf:"bytes,4,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
}

func (x *AddRemarkSvcRequestRequest) Reset() {
	*x = AddRemarkSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRemarkSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRemarkSvcRequestRequest) ProtoMessage() {}

func (x *AddRemarkSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRemarkSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*AddRemarkSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{12}
}

func (x *AddRemarkSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *AddRemarkSvcRequestRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AddRemarkSvcRequestRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *AddRemarkSvcRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

type RejectUploadSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string `protobuf:"bytes,3,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	FileType string `protobuf:"bytes,4,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
	VerifyBy string `protobuf:"bytes,5,opt,name=VerifyBy,json=verify_by,proto3" json:"verify_by,omitempty"`
}

func (x *RejectUploadSvcRequestRequest) Reset() {
	*x = RejectUploadSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectUploadSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectUploadSvcRequestRequest) ProtoMessage() {}

func (x *RejectUploadSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectUploadSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectUploadSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{13}
}

func (x *RejectUploadSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RejectUploadSvcRequestRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *RejectUploadSvcRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RejectUploadSvcRequestRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *RejectUploadSvcRequestRequest) GetVerifyBy() string {
	if x != nil {
		return x.VerifyBy
	}
	return ""
}

type RemoveUploadSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string `protobuf:"bytes,1,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string `protobuf:"bytes,3,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	FileType string `protobuf:"bytes,4,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
}

func (x *RemoveUploadSvcRequestRequest) Reset() {
	*x = RemoveUploadSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUploadSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUploadSvcRequestRequest) ProtoMessage() {}

func (x *RemoveUploadSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUploadSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*RemoveUploadSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveUploadSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RemoveUploadSvcRequestRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *RemoveUploadSvcRequestRequest) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RemoveUploadSvcRequestRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type ListUploadSvcRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    string   `protobuf:"bytes,1,opt,name=OrgID,json=id,proto3" json:"id,omitempty"`
	Status   []string `protobuf:"bytes,2,rep,name=Status,json=status,proto3" json:"status,omitempty"`
	SvcNames []string `protobuf:"bytes,3,rep,name=SvcNames,json=svc_names,proto3" json:"svc_names,omitempty"`
	Partners []string `protobuf:"bytes,4,rep,name=Partners,json=partners,proto3" json:"partners,omitempty"`
}

func (x *ListUploadSvcRequestRequest) Reset() {
	*x = ListUploadSvcRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUploadSvcRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUploadSvcRequestRequest) ProtoMessage() {}

func (x *ListUploadSvcRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUploadSvcRequestRequest.ProtoReflect.Descriptor instead.
func (*ListUploadSvcRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{15}
}

func (x *ListUploadSvcRequestRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ListUploadSvcRequestRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListUploadSvcRequestRequest) GetSvcNames() []string {
	if x != nil {
		return x.SvcNames
	}
	return nil
}

func (x *ListUploadSvcRequestRequest) GetPartners() []string {
	if x != nil {
		return x.Partners
	}
	return nil
}

type UploadSvcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID    string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string                 `protobuf:"bytes,3,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string                 `protobuf:"bytes,4,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	Status   string                 `protobuf:"bytes,5,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	FileType string                 `protobuf:"bytes,6,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
	FileID   string                 `protobuf:"bytes,7,opt,name=FileID,json=file_id,proto3" json:"file_id,omitempty"`
	CreateBy string                 `protobuf:"bytes,8,opt,name=CreateBy,json=create_by,proto3" json:"create_by,omitempty"`
	VerifyBy string                 `protobuf:"bytes,9,opt,name=VerifyBy,json=verify_by,proto3" json:"verify_by,omitempty"`
	Total    string                 `protobuf:"bytes,10,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	Created  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Verified *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Verified,json=verified,proto3" json:"verified,omitempty"`
}

func (x *UploadSvcResponse) Reset() {
	*x = UploadSvcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSvcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSvcResponse) ProtoMessage() {}

func (x *UploadSvcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSvcResponse.ProtoReflect.Descriptor instead.
func (*UploadSvcResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{16}
}

func (x *UploadSvcResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UploadSvcResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UploadSvcResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UploadSvcResponse) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *UploadSvcResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UploadSvcResponse) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *UploadSvcResponse) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *UploadSvcResponse) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *UploadSvcResponse) GetVerifyBy() string {
	if x != nil {
		return x.VerifyBy
	}
	return ""
}

func (x *UploadSvcResponse) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *UploadSvcResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UploadSvcResponse) GetVerified() *timestamppb.Timestamp {
	if x != nil {
		return x.Verified
	}
	return nil
}

type ListUploadSvcRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*UploadSvcResponse `protobuf:"bytes,1,rep,name=Results,json=results,proto3" json:"results,omitempty"`
}

func (x *ListUploadSvcRequestResponse) Reset() {
	*x = ListUploadSvcRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUploadSvcRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUploadSvcRequestResponse) ProtoMessage() {}

func (x *ListUploadSvcRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUploadSvcRequestResponse.ProtoReflect.Descriptor instead.
func (*ListUploadSvcRequestResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{17}
}

func (x *ListUploadSvcRequestResponse) GetResults() []*UploadSvcResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type AddUploadSvcRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID    string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string                 `protobuf:"bytes,3,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string                 `protobuf:"bytes,4,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	Status   string                 `protobuf:"bytes,5,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	FileType string                 `protobuf:"bytes,6,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
	FileID   string                 `protobuf:"bytes,7,opt,name=FileID,json=file_id,proto3" json:"file_id,omitempty"`
	CreateBy string                 `protobuf:"bytes,8,opt,name=CreateBy,json=create_by,proto3" json:"create_by,omitempty"`
	VerifyBy string                 `protobuf:"bytes,9,opt,name=VerifyBy,json=verify_by,proto3" json:"verify_by,omitempty"`
	Total    string                 `protobuf:"bytes,10,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	Created  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Verified *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Verified,json=verified,proto3" json:"verified,omitempty"`
}

func (x *AddUploadSvcRequestResponse) Reset() {
	*x = AddUploadSvcRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUploadSvcRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUploadSvcRequestResponse) ProtoMessage() {}

func (x *AddUploadSvcRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUploadSvcRequestResponse.ProtoReflect.Descriptor instead.
func (*AddUploadSvcRequestResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{18}
}

func (x *AddUploadSvcRequestResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetVerifyBy() string {
	if x != nil {
		return x.VerifyBy
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *AddUploadSvcRequestResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AddUploadSvcRequestResponse) GetVerified() *timestamppb.Timestamp {
	if x != nil {
		return x.Verified
	}
	return nil
}

type UpdateUploadSvcRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID    string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	Partner  string                 `protobuf:"bytes,3,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	SvcName  string                 `protobuf:"bytes,4,opt,name=SvcName,json=service_name,proto3" json:"service_name,omitempty"`
	Status   string                 `protobuf:"bytes,5,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	FileType string                 `protobuf:"bytes,6,opt,name=FileType,json=file_type,proto3" json:"file_type,omitempty"`
	FileID   string                 `protobuf:"bytes,7,opt,name=FileID,json=file_id,proto3" json:"file_id,omitempty"`
	CreateBy string                 `protobuf:"bytes,8,opt,name=CreateBy,json=create_by,proto3" json:"create_by,omitempty"`
	VerifyBy string                 `protobuf:"bytes,9,opt,name=VerifyBy,json=verify_by,proto3" json:"verify_by,omitempty"`
	Total    string                 `protobuf:"bytes,10,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	Created  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Verified *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Verified,json=verified,proto3" json:"verified,omitempty"`
}

func (x *UpdateUploadSvcRequestResponse) Reset() {
	*x = UpdateUploadSvcRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUploadSvcRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUploadSvcRequestResponse) ProtoMessage() {}

func (x *UpdateUploadSvcRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUploadSvcRequestResponse.ProtoReflect.Descriptor instead.
func (*UpdateUploadSvcRequestResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateUploadSvcRequestResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetVerifyBy() string {
	if x != nil {
		return x.VerifyBy
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *UpdateUploadSvcRequestResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UpdateUploadSvcRequestResponse) GetVerified() *timestamppb.Timestamp {
	if x != nil {
		return x.Verified
	}
	return nil
}

type GetAllServiceRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OrgIDs leave empty to retrieve services for all orgs
	OrgIDs []string `protobuf:"bytes,1,rep,name=OrgIDs,json=org_ids,proto3" json:"org_ids,omitempty"`
	// set Type to only retrieve services with that type
	Types []ServiceType `protobuf:"varint,2,rep,packed,name=Types,json=service_types,proto3,enum=petnet.v2.service.ServiceType" json:"service_types,omitempty"`
	// set Status to only retrieve services with that status
	Statuses []ServiceRequestStatus `protobuf:"varint,3,rep,packed,name=Statuses,json=service_request_statuses,proto3,enum=petnet.v2.service.ServiceRequestStatus" json:"service_request_statuses,omitempty"`
	// set Partner to only retrieve services with those partners
	Partners     []string    `protobuf:"bytes,4,rep,name=Partners,json=partners,proto3" json:"partners,omitempty"`
	SortByColumn ServiceSort `protobuf:"varint,5,opt,name=SortByColumn,json=sort_by_column,proto3,enum=petnet.v2.service.ServiceSort" json:"sort_by_column,omitempty"`
	SortBy       SortBy      `protobuf:"varint,6,opt,name=SortBy,json=sort_by,proto3,enum=petnet.v2.service.SortBy" json:"sort_by,omitempty"`
	Limit        int32       `protobuf:"varint,7,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
	Offset       int32       `protobuf:"varint,8,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
	ServiceNames []string    `protobuf:"bytes,9,rep,name=ServiceNames,json=service_names,proto3" json:"service_names,omitempty"`
	CompanyName  string      `protobuf:"bytes,10,opt,name=CompanyName,json=company_name,proto3" json:"company_name,omitempty"`
}

func (x *GetAllServiceRequestRequest) Reset() {
	*x = GetAllServiceRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllServiceRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllServiceRequestRequest) ProtoMessage() {}

func (x *GetAllServiceRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllServiceRequestRequest.ProtoReflect.Descriptor instead.
func (*GetAllServiceRequestRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllServiceRequestRequest) GetOrgIDs() []string {
	if x != nil {
		return x.OrgIDs
	}
	return nil
}

func (x *GetAllServiceRequestRequest) GetTypes() []ServiceType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetAllServiceRequestRequest) GetStatuses() []ServiceRequestStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *GetAllServiceRequestRequest) GetPartners() []string {
	if x != nil {
		return x.Partners
	}
	return nil
}

func (x *GetAllServiceRequestRequest) GetSortByColumn() ServiceSort {
	if x != nil {
		return x.SortByColumn
	}
	return ServiceSort_CREATED
}

func (x *GetAllServiceRequestRequest) GetSortBy() SortBy {
	if x != nil {
		return x.SortBy
	}
	return SortBy_DESC
}

func (x *GetAllServiceRequestRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllServiceRequestRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllServiceRequestRequest) GetServiceNames() []string {
	if x != nil {
		return x.ServiceNames
	}
	return nil
}

func (x *GetAllServiceRequestRequest) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetAllServiceRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceRequst []*ServiceRequest `protobuf:"bytes,1,rep,name=ServiceRequst,json=services,proto3" json:"services,omitempty"`
	Total         int32             `protobuf:"varint,2,opt,name=Total,json=total,proto3" json:"total,omitempty"`
}

func (x *GetAllServiceRequestResponse) Reset() {
	*x = GetAllServiceRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllServiceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllServiceRequestResponse) ProtoMessage() {}

func (x *GetAllServiceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllServiceRequestResponse.ProtoReflect.Descriptor instead.
func (*GetAllServiceRequestResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{21}
}

func (x *GetAllServiceRequestResponse) GetServiceRequst() []*ServiceRequest {
	if x != nil {
		return x.ServiceRequst
	}
	return nil
}

func (x *GetAllServiceRequestResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateServiceRequestByOrgIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldOrgID string `protobuf:"bytes,1,opt,name=OldOrgID,json=oldOrgID,proto3" json:"oldOrgID,omitempty"`
	NewOrgID string `protobuf:"bytes,2,opt,name=NewOrgID,json=newOrgID,proto3" json:"newOrgID,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=Status,json=status,proto3" json:"status,omitempty"`
}

func (x *UpdateServiceRequestByOrgIDRequest) Reset() {
	*x = UpdateServiceRequestByOrgIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceRequestByOrgIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequestByOrgIDRequest) ProtoMessage() {}

func (x *UpdateServiceRequestByOrgIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequestByOrgIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequestByOrgIDRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateServiceRequestByOrgIDRequest) GetOldOrgID() string {
	if x != nil {
		return x.OldOrgID
	}
	return ""
}

func (x *UpdateServiceRequestByOrgIDRequest) GetNewOrgID() string {
	if x != nil {
		return x.NewOrgID
	}
	return ""
}

func (x *UpdateServiceRequestByOrgIDRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateServiceRequestByOrgIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *UpdateServiceRequestByOrgIDResponse) Reset() {
	*x = UpdateServiceRequestByOrgIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceRequestByOrgIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequestByOrgIDResponse) ProtoMessage() {}

func (x *UpdateServiceRequestByOrgIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequestByOrgIDResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequestByOrgIDResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateServiceRequestByOrgIDResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

var File_brank_as_petnet_gunk_dsa_v2_service_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4,
	0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x46,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2d,
	0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf3, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a,
	0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x3e, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x12,
	0x20, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x96, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xac, 0x06, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x07,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x53, 0x76, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd7, 0x01, 0x0a, 0x1c, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x13, 0x49, 0x73, 0x41,
	0x6e, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x16, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x4d, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xcc, 0x02, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x76, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x3a, 0x43, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0xa8, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53,
	0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x12, 0x27, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x3a, 0x4f, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x92, 0x41, 0x46, 0x0a, 0x44, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x22, 0xac, 0x02, 0x0a, 0x1d,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x62, 0x79, 0x3a, 0x45, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3c, 0x0a, 0x3a,
	0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xd2, 0x01, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01,
	0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x20, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x76,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x36, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0xd2,
	0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x1a, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x53,
	0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x30, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x27, 0x0a, 0x25, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79,
	0x3a, 0x45, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3c, 0x0a, 0x3a, 0xd2, 0x01, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2,
	0x01, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x09, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x22, 0xf7, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x39, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x30, 0x0a, 0x2e, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x53, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x97, 0x04,
	0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x12, 0x27,
	0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x72, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa1, 0x04, 0x0a, 0x1b,
	0x41, 0x64, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x12,
	0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xa4, 0x04, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x12, 0x27, 0x0a,
	0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd5, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x50,
	0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x3e, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x12, 0x20, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x98,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x08, 0x4f, 0x6c, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x6f, 0x6c, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x49, 0x0a, 0x23,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x27, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x0c, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0b, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x2a, 0xa6, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x12, 0x0f, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x13, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x50,
	0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b,
	0x4c, 0x41, 0x53, 0x54, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x11, 0x0a, 0x09, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x42, 0x59, 0x10, 0x06,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10,
	0x07, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xe3, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12,
	0x0a, 0x0a, 0x02, 0x57, 0x55, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x49,
	0x52, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x54, 0x46, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x52, 0x4d, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0b, 0x0a, 0x03, 0x52, 0x49, 0x41, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02,
	0x4d, 0x42, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x42, 0x50, 0x49, 0x10,
	0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x55, 0x53, 0x53, 0x43, 0x10, 0x07, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x4a, 0x50, 0x52, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0a, 0x0a, 0x02, 0x49, 0x43, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03,
	0x55, 0x4e, 0x54, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x43, 0x45, 0x42,
	0x10, 0x0b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x57, 0x49, 0x53, 0x45, 0x10, 0x0c,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x43, 0x45, 0x42, 0x49, 0x10, 0x0d, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41, 0x59, 0x41, 0x10, 0x0e, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0a, 0x0a, 0x02, 0x49, 0x45, 0x10, 0x0f, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a,
	0x78, 0x0a, 0x0b, 0x43, 0x49, 0x43, 0x4f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x0d,
	0x0a, 0x05, 0x47, 0x43, 0x41, 0x53, 0x48, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a,
	0x09, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x41, 0x59, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0f, 0x0a, 0x07, 0x50, 0x41, 0x59, 0x4d, 0x41, 0x59, 0x41, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0d, 0x0a, 0x05, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0f, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x41, 0x48, 0x55, 0x42, 0x10, 0x04, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x12, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x4b, 0x41, 0x52, 0x54, 0x45, 0x43, 0x48, 0x10,
	0x05, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x9c, 0x01, 0x0a, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x52, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x42, 0x49, 0x4c, 0x4c, 0x53,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a,
	0x0d, 0x43, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x43, 0x41, 0x53, 0x48, 0x4f, 0x55, 0x54, 0x10, 0x03,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x49, 0x4e, 0x53,
	0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e,
	0x52, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x4f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xa2, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x08, 0x4e, 0x4f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x54,
	0x4e, 0x45, 0x52, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13,
	0x0a, 0x0b, 0x52, 0x45, 0x51, 0x44, 0x4f, 0x43, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x05, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x41, 0x44, 0x44, 0x49, 0x44, 0x4f, 0x43, 0x44, 0x52,
	0x41, 0x46, 0x54, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xcb, 0x3f,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xf9, 0x03, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x9c, 0x03, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xe4, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x41, 0x64, 0x64, 0x20, 0x44, 0x53,
	0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x2e, 0x1a, 0x93, 0x01, 0x41, 0x64, 0x64, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x20, 0x73, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20,
	0x64, 0x6f, 0x6e, 0x65, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x20,
	0x69, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x99, 0x03, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb8, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x86, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x1a, 0x39, 0x44, 0x53, 0x41, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x7b,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xb5, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x97, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x1a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x53, 0x41,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x69,
	0x74, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x58, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x51, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2f, 0x0a, 0x2d, 0x1a, 0x2b, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xaa, 0x03, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xc7, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x94, 0x02, 0x0a, 0x14,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x1a, 0x40, 0x44,
	0x53, 0x41, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x20,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4a,
	0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32,
	0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xaa, 0x03,
	0x0a, 0x14, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc7,
	0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x94, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53,
	0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x1a, 0x40, 0x44, 0x53, 0x41, 0x20,
	0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4a, 0x27, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73,
	0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xaa, 0x03, 0x0a, 0x14, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc7, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x94, 0x02, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x1a, 0x40, 0x44, 0x53, 0x41, 0x20, 0x6d, 0x61, 0x6b,
	0x65, 0x73, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x7b, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xaf, 0x03, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xcb, 0x02, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0x97, 0x02, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x1a, 0x41, 0x44, 0x53, 0x41, 0x20, 0x6d, 0x61, 0x6b,
	0x65, 0x73, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2f,
	0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x88, 0x04, 0x0a, 0x15, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xd2, 0x02, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x1a, 0x41, 0x44, 0x53, 0x41, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4a, 0x62, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5b,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x39, 0x0a, 0x37, 0x1a, 0x35, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a,
	0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0xe2, 0x03, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xac, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x41, 0x64, 0x64, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x1a, 0x1b, 0x41, 0x64, 0x64,
	0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x60, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x59, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f,
	0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xfc, 0x03, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x02, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0xc5, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x1a, 0x26, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x44, 0x53, 0x41, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x63, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x5c, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x3a, 0x0a, 0x38, 0x1a, 0x36, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa3, 0x03, 0x0a, 0x16, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xbc, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41,
	0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x1a, 0x26, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76,
	0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xa3,
	0x03, 0x0a, 0x16, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0xbc, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89, 0x02,
	0x0a, 0x14, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x1a, 0x26,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x4a,
	0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20,
	0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x7d, 0x28, 0x00, 0x12, 0xa3, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xbc, 0x02, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x1a, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x44, 0x53, 0x41, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x27, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73,
	0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xd8, 0x03, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xad,
	0x02, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x53,
	0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x1a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x69, 0x74, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x2e, 0x4a, 0x61, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5a, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x38, 0x0a, 0x36, 0x1a, 0x34,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa6, 0x03, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xb9, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x86, 0x02, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x73, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x1a, 0x23, 0x73, 0x65, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76,
	0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2f, 0x7b, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x96,
	0x03, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x76, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb5, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x82, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x41, 0x64, 0x64, 0x20, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x1a, 0x23, 0x41, 0x64, 0x64, 0x20, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x7b, 0x4f,
	0x72, 0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xc4, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc6, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa0, 0x02, 0x0a, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x53,
	0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x1a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x69, 0x74, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x2e, 0x4a, 0x61, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5a, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x38, 0x0a, 0x36, 0x1a, 0x34,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d, 0x61, 0x6c,
	0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xe5,
	0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x35,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa3, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x1a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x68, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x61, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x12, 0x3f, 0x0a, 0x3d, 0x1a, 0x3b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x61, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x4f, 0x6c, 0x64, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x46, 0x48, 0x01, 0x50,
	0x00, 0x5a, 0x2b, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x80, 0x01,
	0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01,
	0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 24)
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_goTypes   = []interface{}{
		(SortBy)(0),                                 // 0: petnet.v2.service.SortBy
		(ServiceSort)(0),                            // 1: petnet.v2.service.ServiceSort
		(RemittancePartner)(0),                      // 2: petnet.v2.service.RemittancePartner
		(CICOPartner)(0),                            // 3: petnet.v2.service.CICOPartner
		(ServiceType)(0),                            // 4: petnet.v2.service.ServiceType
		(ServiceRequestStatus)(0),                   // 5: petnet.v2.service.ServiceRequestStatus
		(*AddServiceRequestRequest)(nil),            // 6: petnet.v2.service.AddServiceRequestRequest
		(*ApplyServiceRequestRequest)(nil),          // 7: petnet.v2.service.ApplyServiceRequestRequest
		(*ListServiceRequestRequest)(nil),           // 8: petnet.v2.service.ListServiceRequestRequest
		(*ListServiceRequestResponse)(nil),          // 9: petnet.v2.service.ListServiceRequestResponse
		(*ServiceRequest)(nil),                      // 10: petnet.v2.service.ServiceRequest
		(*ServiceStatusRequestRequest)(nil),         // 11: petnet.v2.service.ServiceStatusRequestRequest
		(*ValidateServiceAccessRequest)(nil),        // 12: petnet.v2.service.ValidateServiceAccessRequest
		(*ValidateServiceAccessResponse)(nil),       // 13: petnet.v2.service.ValidateServiceAccessResponse
		(*AddUploadSvcRequestRequest)(nil),          // 14: petnet.v2.service.AddUploadSvcRequestRequest
		(*UpdateUploadSvcRequestRequest)(nil),       // 15: petnet.v2.service.UpdateUploadSvcRequestRequest
		(*AcceptUploadSvcRequestRequest)(nil),       // 16: petnet.v2.service.AcceptUploadSvcRequestRequest
		(*SetStatusUploadSvcRequestRequest)(nil),    // 17: petnet.v2.service.SetStatusUploadSvcRequestRequest
		(*AddRemarkSvcRequestRequest)(nil),          // 18: petnet.v2.service.AddRemarkSvcRequestRequest
		(*RejectUploadSvcRequestRequest)(nil),       // 19: petnet.v2.service.RejectUploadSvcRequestRequest
		(*RemoveUploadSvcRequestRequest)(nil),       // 20: petnet.v2.service.RemoveUploadSvcRequestRequest
		(*ListUploadSvcRequestRequest)(nil),         // 21: petnet.v2.service.ListUploadSvcRequestRequest
		(*UploadSvcResponse)(nil),                   // 22: petnet.v2.service.UploadSvcResponse
		(*ListUploadSvcRequestResponse)(nil),        // 23: petnet.v2.service.ListUploadSvcRequestResponse
		(*AddUploadSvcRequestResponse)(nil),         // 24: petnet.v2.service.AddUploadSvcRequestResponse
		(*UpdateUploadSvcRequestResponse)(nil),      // 25: petnet.v2.service.UpdateUploadSvcRequestResponse
		(*GetAllServiceRequestRequest)(nil),         // 26: petnet.v2.service.GetAllServiceRequestRequest
		(*GetAllServiceRequestResponse)(nil),        // 27: petnet.v2.service.GetAllServiceRequestResponse
		(*UpdateServiceRequestByOrgIDRequest)(nil),  // 28: petnet.v2.service.UpdateServiceRequestByOrgIDRequest
		(*UpdateServiceRequestByOrgIDResponse)(nil), // 29: petnet.v2.service.UpdateServiceRequestByOrgIDResponse
		(*timestamppb.Timestamp)(nil),               // 30: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),                       // 31: google.protobuf.Empty
	}
)

var file_brank_as_petnet_gunk_dsa_v2_service_all_proto_depIdxs = []int32{
	4,  // 0: petnet.v2.service.AddServiceRequestRequest.Type:type_name -> petnet.v2.service.ServiceType
	4,  // 1: petnet.v2.service.ApplyServiceRequestRequest.Type:type_name -> petnet.v2.service.ServiceType
	4,  // 2: petnet.v2.service.ListServiceRequestRequest.Types:type_name -> petnet.v2.service.ServiceType
	5,  // 3: petnet.v2.service.ListServiceRequestRequest.Statuses:type_name -> petnet.v2.service.ServiceRequestStatus
	1,  // 4: petnet.v2.service.ListServiceRequestRequest.SortByColumn:type_name -> petnet.v2.service.ServiceSort
	0,  // 5: petnet.v2.service.ListServiceRequestRequest.SortBy:type_name -> petnet.v2.service.SortBy
	10, // 6: petnet.v2.service.ListServiceRequestResponse.ServiceRequst:type_name -> petnet.v2.service.ServiceRequest
	4,  // 7: petnet.v2.service.ServiceRequest.Type:type_name -> petnet.v2.service.ServiceType
	5,  // 8: petnet.v2.service.ServiceRequest.Status:type_name -> petnet.v2.service.ServiceRequestStatus
	30, // 9: petnet.v2.service.ServiceRequest.Applied:type_name -> google.protobuf.Timestamp
	30, // 10: petnet.v2.service.ServiceRequest.Created:type_name -> google.protobuf.Timestamp
	30, // 11: petnet.v2.service.ServiceRequest.Updated:type_name -> google.protobuf.Timestamp
	5,  // 12: petnet.v2.service.SetStatusUploadSvcRequestRequest.Status:type_name -> petnet.v2.service.ServiceRequestStatus
	30, // 13: petnet.v2.service.UploadSvcResponse.Created:type_name -> google.protobuf.Timestamp
	30, // 14: petnet.v2.service.UploadSvcResponse.Verified:type_name -> google.protobuf.Timestamp
	22, // 15: petnet.v2.service.ListUploadSvcRequestResponse.Results:type_name -> petnet.v2.service.UploadSvcResponse
	30, // 16: petnet.v2.service.AddUploadSvcRequestResponse.Created:type_name -> google.protobuf.Timestamp
	30, // 17: petnet.v2.service.AddUploadSvcRequestResponse.Verified:type_name -> google.protobuf.Timestamp
	30, // 18: petnet.v2.service.UpdateUploadSvcRequestResponse.Created:type_name -> google.protobuf.Timestamp
	30, // 19: petnet.v2.service.UpdateUploadSvcRequestResponse.Verified:type_name -> google.protobuf.Timestamp
	4,  // 20: petnet.v2.service.GetAllServiceRequestRequest.Types:type_name -> petnet.v2.service.ServiceType
	5,  // 21: petnet.v2.service.GetAllServiceRequestRequest.Statuses:type_name -> petnet.v2.service.ServiceRequestStatus
	1,  // 22: petnet.v2.service.GetAllServiceRequestRequest.SortByColumn:type_name -> petnet.v2.service.ServiceSort
	0,  // 23: petnet.v2.service.GetAllServiceRequestRequest.SortBy:type_name -> petnet.v2.service.SortBy
	10, // 24: petnet.v2.service.GetAllServiceRequestResponse.ServiceRequst:type_name -> petnet.v2.service.ServiceRequest
	6,  // 25: petnet.v2.service.ServiceService.AddServiceRequest:input_type -> petnet.v2.service.AddServiceRequestRequest
	7,  // 26: petnet.v2.service.ServiceService.ApplyServiceRequest:input_type -> petnet.v2.service.ApplyServiceRequestRequest
	8,  // 27: petnet.v2.service.ServiceService.ListServiceRequest:input_type -> petnet.v2.service.ListServiceRequestRequest
	11, // 28: petnet.v2.service.ServiceService.AcceptServiceRequest:input_type -> petnet.v2.service.ServiceStatusRequestRequest
	11, // 29: petnet.v2.service.ServiceService.RejectServiceRequest:input_type -> petnet.v2.service.ServiceStatusRequestRequest
	11, // 30: petnet.v2.service.ServiceService.EnableServiceRequest:input_type -> petnet.v2.service.ServiceStatusRequestRequest
	11, // 31: petnet.v2.service.ServiceService.DisableServiceRequest:input_type -> petnet.v2.service.ServiceStatusRequestRequest
	12, // 32: petnet.v2.service.ServiceService.ValidateServiceAccess:input_type -> petnet.v2.service.ValidateServiceAccessRequest
	14, // 33: petnet.v2.service.ServiceService.AddUploadSvcRequest:input_type -> petnet.v2.service.AddUploadSvcRequestRequest
	15, // 34: petnet.v2.service.ServiceService.UpdateUploadSvcRequest:input_type -> petnet.v2.service.UpdateUploadSvcRequestRequest
	16, // 35: petnet.v2.service.ServiceService.AcceptUploadSvcRequest:input_type -> petnet.v2.service.AcceptUploadSvcRequestRequest
	19, // 36: petnet.v2.service.ServiceService.RejectUploadSvcRequest:input_type -> petnet.v2.service.RejectUploadSvcRequestRequest
	20, // 37: petnet.v2.service.ServiceService.RemoveUploadSvcRequest:input_type -> petnet.v2.service.RemoveUploadSvcRequestRequest
	21, // 38: petnet.v2.service.ServiceService.ListUploadSvcRequest:input_type -> petnet.v2.service.ListUploadSvcRequestRequest
	17, // 39: petnet.v2.service.ServiceService.SetStatusUploadSvcRequest:input_type -> petnet.v2.service.SetStatusUploadSvcRequestRequest
	18, // 40: petnet.v2.service.ServiceService.AddRemarkSvcRequest:input_type -> petnet.v2.service.AddRemarkSvcRequestRequest
	26, // 41: petnet.v2.service.ServiceService.GetAllServiceRequest:input_type -> petnet.v2.service.GetAllServiceRequestRequest
	28, // 42: petnet.v2.service.ServiceService.UpdateServiceRequestByOrgID:input_type -> petnet.v2.service.UpdateServiceRequestByOrgIDRequest
	31, // 43: petnet.v2.service.ServiceService.AddServiceRequest:output_type -> google.protobuf.Empty
	31, // 44: petnet.v2.service.ServiceService.ApplyServiceRequest:output_type -> google.protobuf.Empty
	9,  // 45: petnet.v2.service.ServiceService.ListServiceRequest:output_type -> petnet.v2.service.ListServiceRequestResponse
	31, // 46: petnet.v2.service.ServiceService.AcceptServiceRequest:output_type -> google.protobuf.Empty
	31, // 47: petnet.v2.service.ServiceService.RejectServiceRequest:output_type -> google.protobuf.Empty
	31, // 48: petnet.v2.service.ServiceService.EnableServiceRequest:output_type -> google.protobuf.Empty
	31, // 49: petnet.v2.service.ServiceService.DisableServiceRequest:output_type -> google.protobuf.Empty
	13, // 50: petnet.v2.service.ServiceService.ValidateServiceAccess:output_type -> petnet.v2.service.ValidateServiceAccessResponse
	24, // 51: petnet.v2.service.ServiceService.AddUploadSvcRequest:output_type -> petnet.v2.service.AddUploadSvcRequestResponse
	25, // 52: petnet.v2.service.ServiceService.UpdateUploadSvcRequest:output_type -> petnet.v2.service.UpdateUploadSvcRequestResponse
	31, // 53: petnet.v2.service.ServiceService.AcceptUploadSvcRequest:output_type -> google.protobuf.Empty
	31, // 54: petnet.v2.service.ServiceService.RejectUploadSvcRequest:output_type -> google.protobuf.Empty
	31, // 55: petnet.v2.service.ServiceService.RemoveUploadSvcRequest:output_type -> google.protobuf.Empty
	23, // 56: petnet.v2.service.ServiceService.ListUploadSvcRequest:output_type -> petnet.v2.service.ListUploadSvcRequestResponse
	31, // 57: petnet.v2.service.ServiceService.SetStatusUploadSvcRequest:output_type -> google.protobuf.Empty
	31, // 58: petnet.v2.service.ServiceService.AddRemarkSvcRequest:output_type -> google.protobuf.Empty
	27, // 59: petnet.v2.service.ServiceService.GetAllServiceRequest:output_type -> petnet.v2.service.GetAllServiceRequestResponse
	29, // 60: petnet.v2.service.ServiceService.UpdateServiceRequestByOrgID:output_type -> petnet.v2.service.UpdateServiceRequestByOrgIDResponse
	43, // [43:61] is the sub-list for method output_type
	25, // [25:43] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v2_service_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v2_service_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v2_service_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServiceRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyServiceRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatusRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateServiceAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateServiceAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUploadSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUploadSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptUploadSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStatusUploadSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRemarkSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectUploadSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUploadSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUploadSvcRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSvcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUploadSvcRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUploadSvcRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUploadSvcRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllServiceRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllServiceRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceRequestByOrgIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceRequestByOrgIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v2_service_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v2_service_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_dsa_v2_service_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v2_service_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v2_service_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v2_service_all_proto_depIdxs = nil
}
