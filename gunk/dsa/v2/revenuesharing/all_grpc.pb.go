// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package revenuesharing

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RevenueSharingServiceClient is the client API for RevenueSharingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevenueSharingServiceClient interface {
	// Create Revenue Sharing
	CreateRevenueSharing(ctx context.Context, in *CreateRevenueSharingRequest, opts ...grpc.CallOption) (*CreateRevenueSharingResponse, error)
	// Update Revenue Sharing
	UpdateRevenueSharing(ctx context.Context, in *UpdateRevenueSharingRequest, opts ...grpc.CallOption) (*UpdateRevenueSharingResponse, error)
	// Create Revenue Sharing Tier
	CreateRevenueSharingTier(ctx context.Context, in *CreateRevenueSharingTierRequest, opts ...grpc.CallOption) (*CreateRevenueSharingTierResponse, error)
	// update Revenue Sharing Tier
	UpdateRevenueSharingTier(ctx context.Context, in *UpdateRevenueSharingTierRequest, opts ...grpc.CallOption) (*UpdateRevenueSharingTierResponse, error)
	// List Revenue Sharing.
	GetRevenueSharingList(ctx context.Context, in *GetRevenueSharingListRequest, opts ...grpc.CallOption) (*GetRevenueSharingListResponse, error)
	// List Revenue Sharing tier
	GetRevenueSharingTierList(ctx context.Context, in *GetRevenueSharingTierListRequest, opts ...grpc.CallOption) (*GetRevenueSharingTierListResponse, error)
	// Delete Revenue Sharing
	DeleteRevenueSharing(ctx context.Context, in *DeleteRevenueSharingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete Revenue Sharing Tier
	DeleteRevenueSharingTier(ctx context.Context, in *DeleteRevenueSharingTierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete Revenue Sharing Tier By ID
	DeleteRevenueSharingTierById(ctx context.Context, in *DeleteRevenueSharingTierByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Upsert Revenue Sharing
	UpsertRevenueSharing(ctx context.Context, in *UpsertRevenueSharingRequest, opts ...grpc.CallOption) (*UpsertRevenueSharingResponse, error)
	// upsert Revenue Sharing Tier
	UpsertRevenueSharingTier(ctx context.Context, in *UpsertRevenueSharingTierRequest, opts ...grpc.CallOption) (*UpsertRevenueSharingTierResponse, error)
	// Get partner details list by partners.
	GetPartnerTransactionType(ctx context.Context, in *GetPartnerTransactionTypeRequest, opts ...grpc.CallOption) (*GetPartnerTransactionTypeResponse, error)
}

type revenueSharingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRevenueSharingServiceClient(cc grpc.ClientConnInterface) RevenueSharingServiceClient {
	return &revenueSharingServiceClient{cc}
}

func (c *revenueSharingServiceClient) CreateRevenueSharing(ctx context.Context, in *CreateRevenueSharingRequest, opts ...grpc.CallOption) (*CreateRevenueSharingResponse, error) {
	out := new(CreateRevenueSharingResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/CreateRevenueSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) UpdateRevenueSharing(ctx context.Context, in *UpdateRevenueSharingRequest, opts ...grpc.CallOption) (*UpdateRevenueSharingResponse, error) {
	out := new(UpdateRevenueSharingResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/UpdateRevenueSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) CreateRevenueSharingTier(ctx context.Context, in *CreateRevenueSharingTierRequest, opts ...grpc.CallOption) (*CreateRevenueSharingTierResponse, error) {
	out := new(CreateRevenueSharingTierResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/CreateRevenueSharingTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) UpdateRevenueSharingTier(ctx context.Context, in *UpdateRevenueSharingTierRequest, opts ...grpc.CallOption) (*UpdateRevenueSharingTierResponse, error) {
	out := new(UpdateRevenueSharingTierResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/UpdateRevenueSharingTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) GetRevenueSharingList(ctx context.Context, in *GetRevenueSharingListRequest, opts ...grpc.CallOption) (*GetRevenueSharingListResponse, error) {
	out := new(GetRevenueSharingListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/GetRevenueSharingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) GetRevenueSharingTierList(ctx context.Context, in *GetRevenueSharingTierListRequest, opts ...grpc.CallOption) (*GetRevenueSharingTierListResponse, error) {
	out := new(GetRevenueSharingTierListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/GetRevenueSharingTierList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) DeleteRevenueSharing(ctx context.Context, in *DeleteRevenueSharingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/DeleteRevenueSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) DeleteRevenueSharingTier(ctx context.Context, in *DeleteRevenueSharingTierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/DeleteRevenueSharingTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) DeleteRevenueSharingTierById(ctx context.Context, in *DeleteRevenueSharingTierByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/DeleteRevenueSharingTierById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) UpsertRevenueSharing(ctx context.Context, in *UpsertRevenueSharingRequest, opts ...grpc.CallOption) (*UpsertRevenueSharingResponse, error) {
	out := new(UpsertRevenueSharingResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/UpsertRevenueSharing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) UpsertRevenueSharingTier(ctx context.Context, in *UpsertRevenueSharingTierRequest, opts ...grpc.CallOption) (*UpsertRevenueSharingTierResponse, error) {
	out := new(UpsertRevenueSharingTierResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/UpsertRevenueSharingTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revenueSharingServiceClient) GetPartnerTransactionType(ctx context.Context, in *GetPartnerTransactionTypeRequest, opts ...grpc.CallOption) (*GetPartnerTransactionTypeResponse, error) {
	out := new(GetPartnerTransactionTypeResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.revenuesharing.RevenueSharingService/GetPartnerTransactionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevenueSharingServiceServer is the server API for RevenueSharingService service.
// All implementations must embed UnimplementedRevenueSharingServiceServer
// for forward compatibility
type RevenueSharingServiceServer interface {
	// Create Revenue Sharing
	CreateRevenueSharing(context.Context, *CreateRevenueSharingRequest) (*CreateRevenueSharingResponse, error)
	// Update Revenue Sharing
	UpdateRevenueSharing(context.Context, *UpdateRevenueSharingRequest) (*UpdateRevenueSharingResponse, error)
	// Create Revenue Sharing Tier
	CreateRevenueSharingTier(context.Context, *CreateRevenueSharingTierRequest) (*CreateRevenueSharingTierResponse, error)
	// update Revenue Sharing Tier
	UpdateRevenueSharingTier(context.Context, *UpdateRevenueSharingTierRequest) (*UpdateRevenueSharingTierResponse, error)
	// List Revenue Sharing.
	GetRevenueSharingList(context.Context, *GetRevenueSharingListRequest) (*GetRevenueSharingListResponse, error)
	// List Revenue Sharing tier
	GetRevenueSharingTierList(context.Context, *GetRevenueSharingTierListRequest) (*GetRevenueSharingTierListResponse, error)
	// Delete Revenue Sharing
	DeleteRevenueSharing(context.Context, *DeleteRevenueSharingRequest) (*emptypb.Empty, error)
	// Delete Revenue Sharing Tier
	DeleteRevenueSharingTier(context.Context, *DeleteRevenueSharingTierRequest) (*emptypb.Empty, error)
	// Delete Revenue Sharing Tier By ID
	DeleteRevenueSharingTierById(context.Context, *DeleteRevenueSharingTierByIdRequest) (*emptypb.Empty, error)
	// Upsert Revenue Sharing
	UpsertRevenueSharing(context.Context, *UpsertRevenueSharingRequest) (*UpsertRevenueSharingResponse, error)
	// upsert Revenue Sharing Tier
	UpsertRevenueSharingTier(context.Context, *UpsertRevenueSharingTierRequest) (*UpsertRevenueSharingTierResponse, error)
	// Get partner details list by partners.
	GetPartnerTransactionType(context.Context, *GetPartnerTransactionTypeRequest) (*GetPartnerTransactionTypeResponse, error)
	mustEmbedUnimplementedRevenueSharingServiceServer()
}

// UnimplementedRevenueSharingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRevenueSharingServiceServer struct{}

func (UnimplementedRevenueSharingServiceServer) CreateRevenueSharing(context.Context, *CreateRevenueSharingRequest) (*CreateRevenueSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRevenueSharing not implemented")
}

func (UnimplementedRevenueSharingServiceServer) UpdateRevenueSharing(context.Context, *UpdateRevenueSharingRequest) (*UpdateRevenueSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevenueSharing not implemented")
}

func (UnimplementedRevenueSharingServiceServer) CreateRevenueSharingTier(context.Context, *CreateRevenueSharingTierRequest) (*CreateRevenueSharingTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRevenueSharingTier not implemented")
}

func (UnimplementedRevenueSharingServiceServer) UpdateRevenueSharingTier(context.Context, *UpdateRevenueSharingTierRequest) (*UpdateRevenueSharingTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevenueSharingTier not implemented")
}

func (UnimplementedRevenueSharingServiceServer) GetRevenueSharingList(context.Context, *GetRevenueSharingListRequest) (*GetRevenueSharingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevenueSharingList not implemented")
}

func (UnimplementedRevenueSharingServiceServer) GetRevenueSharingTierList(context.Context, *GetRevenueSharingTierListRequest) (*GetRevenueSharingTierListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevenueSharingTierList not implemented")
}

func (UnimplementedRevenueSharingServiceServer) DeleteRevenueSharing(context.Context, *DeleteRevenueSharingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevenueSharing not implemented")
}

func (UnimplementedRevenueSharingServiceServer) DeleteRevenueSharingTier(context.Context, *DeleteRevenueSharingTierRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevenueSharingTier not implemented")
}

func (UnimplementedRevenueSharingServiceServer) DeleteRevenueSharingTierById(context.Context, *DeleteRevenueSharingTierByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevenueSharingTierById not implemented")
}

func (UnimplementedRevenueSharingServiceServer) UpsertRevenueSharing(context.Context, *UpsertRevenueSharingRequest) (*UpsertRevenueSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRevenueSharing not implemented")
}

func (UnimplementedRevenueSharingServiceServer) UpsertRevenueSharingTier(context.Context, *UpsertRevenueSharingTierRequest) (*UpsertRevenueSharingTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRevenueSharingTier not implemented")
}

func (UnimplementedRevenueSharingServiceServer) GetPartnerTransactionType(context.Context, *GetPartnerTransactionTypeRequest) (*GetPartnerTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerTransactionType not implemented")
}
func (UnimplementedRevenueSharingServiceServer) mustEmbedUnimplementedRevenueSharingServiceServer() {}

// UnsafeRevenueSharingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevenueSharingServiceServer will
// result in compilation errors.
type UnsafeRevenueSharingServiceServer interface {
	mustEmbedUnimplementedRevenueSharingServiceServer()
}

func RegisterRevenueSharingServiceServer(s grpc.ServiceRegistrar, srv RevenueSharingServiceServer) {
	s.RegisterService(&RevenueSharingService_ServiceDesc, srv)
}

func _RevenueSharingService_CreateRevenueSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRevenueSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).CreateRevenueSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/CreateRevenueSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).CreateRevenueSharing(ctx, req.(*CreateRevenueSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_UpdateRevenueSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRevenueSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).UpdateRevenueSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/UpdateRevenueSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).UpdateRevenueSharing(ctx, req.(*UpdateRevenueSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_CreateRevenueSharingTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRevenueSharingTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).CreateRevenueSharingTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/CreateRevenueSharingTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).CreateRevenueSharingTier(ctx, req.(*CreateRevenueSharingTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_UpdateRevenueSharingTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRevenueSharingTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).UpdateRevenueSharingTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/UpdateRevenueSharingTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).UpdateRevenueSharingTier(ctx, req.(*UpdateRevenueSharingTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_GetRevenueSharingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevenueSharingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).GetRevenueSharingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/GetRevenueSharingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).GetRevenueSharingList(ctx, req.(*GetRevenueSharingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_GetRevenueSharingTierList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevenueSharingTierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).GetRevenueSharingTierList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/GetRevenueSharingTierList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).GetRevenueSharingTierList(ctx, req.(*GetRevenueSharingTierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_DeleteRevenueSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRevenueSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).DeleteRevenueSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/DeleteRevenueSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).DeleteRevenueSharing(ctx, req.(*DeleteRevenueSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_DeleteRevenueSharingTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRevenueSharingTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).DeleteRevenueSharingTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/DeleteRevenueSharingTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).DeleteRevenueSharingTier(ctx, req.(*DeleteRevenueSharingTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_DeleteRevenueSharingTierById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRevenueSharingTierByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).DeleteRevenueSharingTierById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/DeleteRevenueSharingTierById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).DeleteRevenueSharingTierById(ctx, req.(*DeleteRevenueSharingTierByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_UpsertRevenueSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRevenueSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).UpsertRevenueSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/UpsertRevenueSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).UpsertRevenueSharing(ctx, req.(*UpsertRevenueSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_UpsertRevenueSharingTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRevenueSharingTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).UpsertRevenueSharingTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/UpsertRevenueSharingTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).UpsertRevenueSharingTier(ctx, req.(*UpsertRevenueSharingTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevenueSharingService_GetPartnerTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevenueSharingServiceServer).GetPartnerTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.revenuesharing.RevenueSharingService/GetPartnerTransactionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevenueSharingServiceServer).GetPartnerTransactionType(ctx, req.(*GetPartnerTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RevenueSharingService_ServiceDesc is the grpc.ServiceDesc for RevenueSharingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RevenueSharingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v2.revenuesharing.RevenueSharingService",
	HandlerType: (*RevenueSharingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRevenueSharing",
			Handler:    _RevenueSharingService_CreateRevenueSharing_Handler,
		},
		{
			MethodName: "UpdateRevenueSharing",
			Handler:    _RevenueSharingService_UpdateRevenueSharing_Handler,
		},
		{
			MethodName: "CreateRevenueSharingTier",
			Handler:    _RevenueSharingService_CreateRevenueSharingTier_Handler,
		},
		{
			MethodName: "UpdateRevenueSharingTier",
			Handler:    _RevenueSharingService_UpdateRevenueSharingTier_Handler,
		},
		{
			MethodName: "GetRevenueSharingList",
			Handler:    _RevenueSharingService_GetRevenueSharingList_Handler,
		},
		{
			MethodName: "GetRevenueSharingTierList",
			Handler:    _RevenueSharingService_GetRevenueSharingTierList_Handler,
		},
		{
			MethodName: "DeleteRevenueSharing",
			Handler:    _RevenueSharingService_DeleteRevenueSharing_Handler,
		},
		{
			MethodName: "DeleteRevenueSharingTier",
			Handler:    _RevenueSharingService_DeleteRevenueSharingTier_Handler,
		},
		{
			MethodName: "DeleteRevenueSharingTierById",
			Handler:    _RevenueSharingService_DeleteRevenueSharingTierById_Handler,
		},
		{
			MethodName: "UpsertRevenueSharing",
			Handler:    _RevenueSharingService_UpsertRevenueSharing_Handler,
		},
		{
			MethodName: "UpsertRevenueSharingTier",
			Handler:    _RevenueSharingService_UpsertRevenueSharingTier_Handler,
		},
		{
			MethodName: "GetPartnerTransactionType",
			Handler:    _RevenueSharingService_GetPartnerTransactionType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v2/revenuesharing/all.proto",
}
