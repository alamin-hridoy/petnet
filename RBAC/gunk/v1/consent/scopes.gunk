package consent

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

type UpsertScopeRequest struct {
	Scope       string `pb:"1" json:"scope"`
	Name        string `pb:"2" json:"name"`
	GroupName   string `pb:"3" json:"group_name"`
	Description string `pb:"4" json:"description"`
}

type UpsertScopeResponse struct {
	Updated time.Time `pb:"1" json:"updated"`
}

type UpdateGroupRequest struct {
	GroupName   string `pb:"1" json:"group_name"`
	Description string `pb:"2" json:"description"`
}

type UpdateGroupResponse struct {
	Updated time.Time `pb:"1" json:"updated"`
}

type GetScopeRequest struct {
	Scopes []string `pb:"1" json:"scopes"`
}

type GetScopeResponse struct {
	Scopes map[string]ScopeDetail `pb:"1" json:"scopes"`
	Groups map[string]GroupDetail `pb:"2" json:"groups"`
}

type GroupDetail struct {
	Name        string `pb:"1" json:"name"`
	Description string `pb:"2" json:"description"`
}

type ScopeDetail struct {
	Scope       string `pb:"1" json:"scope"`
	Name        string `pb:"2" json:"name"`
	Group       string `pb:"3" json:"group"`
	Description string `pb:"4" json:"description"`
}

type ScopeService interface {
	// Upsert service scope.
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/scope",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Scopes"},
	//         Summary:     "Upsert consent scope.",
	//         Description: `Insert or update a consent grant scope.`,
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/consentUpsertScopeResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//         },
	// }
	UpsertScope(UpsertScopeRequest) UpsertScopeResponse

	// Update scope group.
	//
	// +gunk http.Match{
	//         Method: "PUT",
	//         Path:   "/v1/scope",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:    []string{"Scopes"},
	//         Summary: "Update scope group.",
	//         Description: `Update a consent grant scope group.
	// 	   	Scope groups are used to display user consent requests in
	// 		logical groupings, while allowing detailed display of individual scopes.`,
	//         Produces: []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/consentUpsertScopeResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//         },
	// }
	UpdateGroup(UpdateGroupRequest) UpdateGroupResponse

	// Get scope groupings and details.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/scope",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Scopes"},
	//         Summary:     "Get scope details.",
	//         Description: `Get scope details and descriptions, along with groupings for display.`,
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/consentGetScopeResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//         },
	// }
	GetScope(GetScopeRequest) GetScopeResponse
}
