// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package consent

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrantServiceClient is the client API for GrantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrantServiceClient interface {
	// Serve grant request for user consent grant.
	ServeGrant(ctx context.Context, in *ServeGrantRequest, opts ...grpc.CallOption) (*ServeGrantResponse, error)
	// Get existing user session details.
	Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*GrantResponse, error)
}

type grantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrantServiceClient(cc grpc.ClientConnInterface) GrantServiceClient {
	return &grantServiceClient{cc}
}

func (c *grantServiceClient) ServeGrant(ctx context.Context, in *ServeGrantRequest, opts ...grpc.CallOption) (*ServeGrantResponse, error) {
	out := new(ServeGrantResponse)
	err := c.cc.Invoke(ctx, "/rbac.brankas.consent.GrantService/ServeGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantServiceClient) Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*GrantResponse, error) {
	out := new(GrantResponse)
	err := c.cc.Invoke(ctx, "/rbac.brankas.consent.GrantService/Grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrantServiceServer is the server API for GrantService service.
// All implementations must embed UnimplementedGrantServiceServer
// for forward compatibility
type GrantServiceServer interface {
	// Serve grant request for user consent grant.
	ServeGrant(context.Context, *ServeGrantRequest) (*ServeGrantResponse, error)
	// Get existing user session details.
	Grant(context.Context, *GrantRequest) (*GrantResponse, error)
	mustEmbedUnimplementedGrantServiceServer()
}

// UnimplementedGrantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrantServiceServer struct{}

func (UnimplementedGrantServiceServer) ServeGrant(context.Context, *ServeGrantRequest) (*ServeGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServeGrant not implemented")
}

func (UnimplementedGrantServiceServer) Grant(context.Context, *GrantRequest) (*GrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}
func (UnimplementedGrantServiceServer) mustEmbedUnimplementedGrantServiceServer() {}

// UnsafeGrantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrantServiceServer will
// result in compilation errors.
type UnsafeGrantServiceServer interface {
	mustEmbedUnimplementedGrantServiceServer()
}

func RegisterGrantServiceServer(s grpc.ServiceRegistrar, srv GrantServiceServer) {
	s.RegisterService(&GrantService_ServiceDesc, srv)
}

func _GrantService_ServeGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServeGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantServiceServer).ServeGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.brankas.consent.GrantService/ServeGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantServiceServer).ServeGrant(ctx, req.(*ServeGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantService_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantServiceServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.brankas.consent.GrantService/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantServiceServer).Grant(ctx, req.(*GrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrantService_ServiceDesc is the grpc.ServiceDesc for GrantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.brankas.consent.GrantService",
	HandlerType: (*GrantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServeGrant",
			Handler:    _GrantService_ServeGrant_Handler,
		},
		{
			MethodName: "Grant",
			Handler:    _GrantService_Grant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/rbac/gunk/v1/consent/all.proto",
}

// ScopeServiceClient is the client API for ScopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScopeServiceClient interface {
	// Upsert service scope.
	UpsertScope(ctx context.Context, in *UpsertScopeRequest, opts ...grpc.CallOption) (*UpsertScopeResponse, error)
	// Update scope group.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	// Get scope groupings and details.
	GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*GetScopeResponse, error)
}

type scopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScopeServiceClient(cc grpc.ClientConnInterface) ScopeServiceClient {
	return &scopeServiceClient{cc}
}

func (c *scopeServiceClient) UpsertScope(ctx context.Context, in *UpsertScopeRequest, opts ...grpc.CallOption) (*UpsertScopeResponse, error) {
	out := new(UpsertScopeResponse)
	err := c.cc.Invoke(ctx, "/rbac.brankas.consent.ScopeService/UpsertScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, "/rbac.brankas.consent.ScopeService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*GetScopeResponse, error) {
	out := new(GetScopeResponse)
	err := c.cc.Invoke(ctx, "/rbac.brankas.consent.ScopeService/GetScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopeServiceServer is the server API for ScopeService service.
// All implementations must embed UnimplementedScopeServiceServer
// for forward compatibility
type ScopeServiceServer interface {
	// Upsert service scope.
	UpsertScope(context.Context, *UpsertScopeRequest) (*UpsertScopeResponse, error)
	// Update scope group.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	// Get scope groupings and details.
	GetScope(context.Context, *GetScopeRequest) (*GetScopeResponse, error)
	mustEmbedUnimplementedScopeServiceServer()
}

// UnimplementedScopeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScopeServiceServer struct{}

func (UnimplementedScopeServiceServer) UpsertScope(context.Context, *UpsertScopeRequest) (*UpsertScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertScope not implemented")
}

func (UnimplementedScopeServiceServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}

func (UnimplementedScopeServiceServer) GetScope(context.Context, *GetScopeRequest) (*GetScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScope not implemented")
}
func (UnimplementedScopeServiceServer) mustEmbedUnimplementedScopeServiceServer() {}

// UnsafeScopeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScopeServiceServer will
// result in compilation errors.
type UnsafeScopeServiceServer interface {
	mustEmbedUnimplementedScopeServiceServer()
}

func RegisterScopeServiceServer(s grpc.ServiceRegistrar, srv ScopeServiceServer) {
	s.RegisterService(&ScopeService_ServiceDesc, srv)
}

func _ScopeService_UpsertScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).UpsertScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.brankas.consent.ScopeService/UpsertScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).UpsertScope(ctx, req.(*UpsertScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.brankas.consent.ScopeService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_GetScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).GetScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.brankas.consent.ScopeService/GetScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).GetScope(ctx, req.(*GetScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScopeService_ServiceDesc is the grpc.ServiceDesc for ScopeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScopeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.brankas.consent.ScopeService",
	HandlerType: (*ScopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertScope",
			Handler:    _ScopeService_UpsertScope_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ScopeService_UpdateGroup_Handler,
		},
		{
			MethodName: "GetScope",
			Handler:    _ScopeService_GetScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/rbac/gunk/v1/consent/all.proto",
}
