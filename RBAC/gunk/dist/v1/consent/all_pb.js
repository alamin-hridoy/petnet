// source: all.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.rbac.brankas.consent.ConsentError', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.GetScopeRequest', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.GetScopeResponse', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.GrantRequest', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.GrantResponse', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.GroupDetail', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.ScopeDetail', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.ServeGrantRequest', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.ServeGrantResponse', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.UpdateGroupRequest', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.UpdateGroupResponse', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.UpsertScopeRequest', null, global);
goog.exportSymbol('proto.rbac.brankas.consent.UpsertScopeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.ServeGrantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rbac.brankas.consent.ServeGrantRequest.repeatedFields_, null);
};
goog.inherits(proto.rbac.brankas.consent.ServeGrantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.ServeGrantRequest.displayName = 'proto.rbac.brankas.consent.ServeGrantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.ServeGrantResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.ServeGrantResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.ServeGrantResponse.displayName = 'proto.rbac.brankas.consent.ServeGrantResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.GrantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rbac.brankas.consent.GrantRequest.repeatedFields_, null);
};
goog.inherits(proto.rbac.brankas.consent.GrantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.GrantRequest.displayName = 'proto.rbac.brankas.consent.GrantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.GrantResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rbac.brankas.consent.GrantResponse.repeatedFields_, null);
};
goog.inherits(proto.rbac.brankas.consent.GrantResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.GrantResponse.displayName = 'proto.rbac.brankas.consent.GrantResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.ConsentError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.ConsentError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.ConsentError.displayName = 'proto.rbac.brankas.consent.ConsentError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.UpsertScopeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.UpsertScopeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.UpsertScopeRequest.displayName = 'proto.rbac.brankas.consent.UpsertScopeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.UpsertScopeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.UpsertScopeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.UpsertScopeResponse.displayName = 'proto.rbac.brankas.consent.UpsertScopeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.UpdateGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.UpdateGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.UpdateGroupRequest.displayName = 'proto.rbac.brankas.consent.UpdateGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.UpdateGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.UpdateGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.UpdateGroupResponse.displayName = 'proto.rbac.brankas.consent.UpdateGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.GetScopeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rbac.brankas.consent.GetScopeRequest.repeatedFields_, null);
};
goog.inherits(proto.rbac.brankas.consent.GetScopeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.GetScopeRequest.displayName = 'proto.rbac.brankas.consent.GetScopeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.GetScopeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.GetScopeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.GetScopeResponse.displayName = 'proto.rbac.brankas.consent.GetScopeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.GroupDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.GroupDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.GroupDetail.displayName = 'proto.rbac.brankas.consent.GroupDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.brankas.consent.ScopeDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.brankas.consent.ScopeDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rbac.brankas.consent.ScopeDetail.displayName = 'proto.rbac.brankas.consent.ScopeDetail';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rbac.brankas.consent.ServeGrantRequest.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.ServeGrantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.ServeGrantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ServeGrantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requestedList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    grantedList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest}
 */
proto.rbac.brankas.consent.ServeGrantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.ServeGrantRequest;
  return proto.rbac.brankas.consent.ServeGrantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.ServeGrantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest}
 */
proto.rbac.brankas.consent.ServeGrantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addRequested(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addGranted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.ServeGrantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.ServeGrantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ServeGrantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequestedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getGrantedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string UserID = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ClientID = 2;
 * @return {string}
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.setClientid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string OwnerID = 3;
 * @return {string}
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.setOwnerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string Requested = 4;
 * @return {!Array<string>}
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.getRequestedList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.setRequestedList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.addRequested = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.clearRequestedList = function() {
  return this.setRequestedList([]);
};


/**
 * repeated string Granted = 5;
 * @return {!Array<string>}
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.getGrantedList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.setGrantedList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.addGranted = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rbac.brankas.consent.ServeGrantRequest} returns this
 */
proto.rbac.brankas.consent.ServeGrantRequest.prototype.clearGrantedList = function() {
  return this.setGrantedList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.ServeGrantResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.ServeGrantResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ServeGrantResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newscopesMap: (f = msg.getNewscopesMap()) ? f.toObject(includeInstance, proto.rbac.brankas.consent.ScopeDetail.toObject) : [],
    grantedscopesMap: (f = msg.getGrantedscopesMap()) ? f.toObject(includeInstance, proto.rbac.brankas.consent.ScopeDetail.toObject) : [],
    groupsMap: (f = msg.getGroupsMap()) ? f.toObject(includeInstance, proto.rbac.brankas.consent.GroupDetail.toObject) : [],
    skip: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    orgid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orgname: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse}
 */
proto.rbac.brankas.consent.ServeGrantResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.ServeGrantResponse;
  return proto.rbac.brankas.consent.ServeGrantResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.ServeGrantResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse}
 */
proto.rbac.brankas.consent.ServeGrantResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getNewscopesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rbac.brankas.consent.ScopeDetail.deserializeBinaryFromReader, "", new proto.rbac.brankas.consent.ScopeDetail());
         });
      break;
    case 2:
      var value = msg.getGrantedscopesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rbac.brankas.consent.ScopeDetail.deserializeBinaryFromReader, "", new proto.rbac.brankas.consent.ScopeDetail());
         });
      break;
    case 3:
      var value = msg.getGroupsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rbac.brankas.consent.GroupDetail.deserializeBinaryFromReader, "", new proto.rbac.brankas.consent.GroupDetail());
         });
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkip(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.ServeGrantResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.ServeGrantResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ServeGrantResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewscopesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rbac.brankas.consent.ScopeDetail.serializeBinaryToWriter);
  }
  f = message.getGrantedscopesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rbac.brankas.consent.ScopeDetail.serializeBinaryToWriter);
  }
  f = message.getGroupsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rbac.brankas.consent.GroupDetail.serializeBinaryToWriter);
  }
  f = message.getSkip();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getOrgid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrgname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * map<string, ScopeDetail> NewScopes = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rbac.brankas.consent.ScopeDetail>}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.getNewscopesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rbac.brankas.consent.ScopeDetail>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rbac.brankas.consent.ScopeDetail));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse} returns this
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.clearNewscopesMap = function() {
  this.getNewscopesMap().clear();
  return this;};


/**
 * map<string, ScopeDetail> GrantedScopes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rbac.brankas.consent.ScopeDetail>}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.getGrantedscopesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rbac.brankas.consent.ScopeDetail>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.rbac.brankas.consent.ScopeDetail));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse} returns this
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.clearGrantedscopesMap = function() {
  this.getGrantedscopesMap().clear();
  return this;};


/**
 * map<string, GroupDetail> Groups = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rbac.brankas.consent.GroupDetail>}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.getGroupsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rbac.brankas.consent.GroupDetail>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.rbac.brankas.consent.GroupDetail));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse} returns this
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.clearGroupsMap = function() {
  this.getGroupsMap().clear();
  return this;};


/**
 * optional bool Skip = 4;
 * @return {boolean}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.getSkip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse} returns this
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.setSkip = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string OrgID = 5;
 * @return {string}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.getOrgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse} returns this
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.setOrgid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string OrgName = 6;
 * @return {string}
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.getOrgname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ServeGrantResponse} returns this
 */
proto.rbac.brankas.consent.ServeGrantResponse.prototype.setOrgname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rbac.brankas.consent.GrantRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.GrantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.GrantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GrantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scopesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.GrantRequest}
 */
proto.rbac.brankas.consent.GrantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.GrantRequest;
  return proto.rbac.brankas.consent.GrantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.GrantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.GrantRequest}
 */
proto.rbac.brankas.consent.GrantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.GrantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.GrantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GrantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string UserID = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
 */
proto.rbac.brankas.consent.GrantRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ClientID = 2;
 * @return {string}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
 */
proto.rbac.brankas.consent.GrantRequest.prototype.setClientid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string OwnerID = 3;
 * @return {string}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
 */
proto.rbac.brankas.consent.GrantRequest.prototype.setOwnerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string Scopes = 4;
 * @return {!Array<string>}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
 */
proto.rbac.brankas.consent.GrantRequest.prototype.setScopesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
 */
proto.rbac.brankas.consent.GrantRequest.prototype.addScopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
 */
proto.rbac.brankas.consent.GrantRequest.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};


/**
 * optional google.protobuf.Timestamp Timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
*/
proto.rbac.brankas.consent.GrantRequest.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rbac.brankas.consent.GrantRequest} returns this
 */
proto.rbac.brankas.consent.GrantRequest.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rbac.brankas.consent.GrantRequest.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rbac.brankas.consent.GrantResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.GrantResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.GrantResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.GrantResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GrantResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    grantid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    singlegrant: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    grantsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.GrantResponse}
 */
proto.rbac.brankas.consent.GrantResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.GrantResponse;
  return proto.rbac.brankas.consent.GrantResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.GrantResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.GrantResponse}
 */
proto.rbac.brankas.consent.GrantResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrantid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSinglegrant(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGrants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.GrantResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.GrantResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.GrantResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GrantResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrantid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSinglegrant();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGrantsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string GrantID = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.GrantResponse.prototype.getGrantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.GrantResponse} returns this
 */
proto.rbac.brankas.consent.GrantResponse.prototype.setGrantid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool SingleGrant = 2;
 * @return {boolean}
 */
proto.rbac.brankas.consent.GrantResponse.prototype.getSinglegrant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rbac.brankas.consent.GrantResponse} returns this
 */
proto.rbac.brankas.consent.GrantResponse.prototype.setSinglegrant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated string Grants = 3;
 * @return {!Array<string>}
 */
proto.rbac.brankas.consent.GrantResponse.prototype.getGrantsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rbac.brankas.consent.GrantResponse} returns this
 */
proto.rbac.brankas.consent.GrantResponse.prototype.setGrantsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rbac.brankas.consent.GrantResponse} returns this
 */
proto.rbac.brankas.consent.GrantResponse.prototype.addGrants = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rbac.brankas.consent.GrantResponse} returns this
 */
proto.rbac.brankas.consent.GrantResponse.prototype.clearGrantsList = function() {
  return this.setGrantsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.ConsentError.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.ConsentError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.ConsentError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ConsentError.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    errordetailsMap: (f = msg.getErrordetailsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.ConsentError}
 */
proto.rbac.brankas.consent.ConsentError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.ConsentError;
  return proto.rbac.brankas.consent.ConsentError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.ConsentError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.ConsentError}
 */
proto.rbac.brankas.consent.ConsentError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = msg.getErrordetailsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.ConsentError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.ConsentError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.ConsentError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ConsentError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getErrordetailsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.ConsentError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ConsentError} returns this
 */
proto.rbac.brankas.consent.ConsentError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> ErrorDetails = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rbac.brankas.consent.ConsentError.prototype.getErrordetailsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rbac.brankas.consent.ConsentError} returns this
 */
proto.rbac.brankas.consent.ConsentError.prototype.clearErrordetailsMap = function() {
  this.getErrordetailsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.UpsertScopeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.UpsertScopeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpsertScopeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.UpsertScopeRequest}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.UpsertScopeRequest;
  return proto.rbac.brankas.consent.UpsertScopeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.UpsertScopeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.UpsertScopeRequest}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.UpsertScopeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.UpsertScopeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpsertScopeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Scope = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.UpsertScopeRequest} returns this
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.UpsertScopeRequest} returns this
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string GroupName = 3;
 * @return {string}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.UpsertScopeRequest} returns this
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.UpsertScopeRequest} returns this
 */
proto.rbac.brankas.consent.UpsertScopeRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.UpsertScopeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.UpsertScopeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.UpsertScopeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpsertScopeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updated: (f = msg.getUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.UpsertScopeResponse}
 */
proto.rbac.brankas.consent.UpsertScopeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.UpsertScopeResponse;
  return proto.rbac.brankas.consent.UpsertScopeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.UpsertScopeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.UpsertScopeResponse}
 */
proto.rbac.brankas.consent.UpsertScopeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.UpsertScopeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.UpsertScopeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.UpsertScopeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpsertScopeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp Updated = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.rbac.brankas.consent.UpsertScopeResponse.prototype.getUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.rbac.brankas.consent.UpsertScopeResponse} returns this
*/
proto.rbac.brankas.consent.UpsertScopeResponse.prototype.setUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rbac.brankas.consent.UpsertScopeResponse} returns this
 */
proto.rbac.brankas.consent.UpsertScopeResponse.prototype.clearUpdated = function() {
  return this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rbac.brankas.consent.UpsertScopeResponse.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.UpdateGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.UpdateGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.UpdateGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpdateGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.UpdateGroupRequest}
 */
proto.rbac.brankas.consent.UpdateGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.UpdateGroupRequest;
  return proto.rbac.brankas.consent.UpdateGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.UpdateGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.UpdateGroupRequest}
 */
proto.rbac.brankas.consent.UpdateGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.UpdateGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.UpdateGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.UpdateGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpdateGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string GroupName = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.UpdateGroupRequest.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.UpdateGroupRequest} returns this
 */
proto.rbac.brankas.consent.UpdateGroupRequest.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Description = 2;
 * @return {string}
 */
proto.rbac.brankas.consent.UpdateGroupRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.UpdateGroupRequest} returns this
 */
proto.rbac.brankas.consent.UpdateGroupRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.UpdateGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.UpdateGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.UpdateGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpdateGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updated: (f = msg.getUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.UpdateGroupResponse}
 */
proto.rbac.brankas.consent.UpdateGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.UpdateGroupResponse;
  return proto.rbac.brankas.consent.UpdateGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.UpdateGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.UpdateGroupResponse}
 */
proto.rbac.brankas.consent.UpdateGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.UpdateGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.UpdateGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.UpdateGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.UpdateGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp Updated = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.rbac.brankas.consent.UpdateGroupResponse.prototype.getUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.rbac.brankas.consent.UpdateGroupResponse} returns this
*/
proto.rbac.brankas.consent.UpdateGroupResponse.prototype.setUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rbac.brankas.consent.UpdateGroupResponse} returns this
 */
proto.rbac.brankas.consent.UpdateGroupResponse.prototype.clearUpdated = function() {
  return this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rbac.brankas.consent.UpdateGroupResponse.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rbac.brankas.consent.GetScopeRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.GetScopeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.GetScopeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.GetScopeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GetScopeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.GetScopeRequest}
 */
proto.rbac.brankas.consent.GetScopeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.GetScopeRequest;
  return proto.rbac.brankas.consent.GetScopeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.GetScopeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.GetScopeRequest}
 */
proto.rbac.brankas.consent.GetScopeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.GetScopeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.GetScopeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.GetScopeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GetScopeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string Scopes = 1;
 * @return {!Array<string>}
 */
proto.rbac.brankas.consent.GetScopeRequest.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rbac.brankas.consent.GetScopeRequest} returns this
 */
proto.rbac.brankas.consent.GetScopeRequest.prototype.setScopesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rbac.brankas.consent.GetScopeRequest} returns this
 */
proto.rbac.brankas.consent.GetScopeRequest.prototype.addScopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rbac.brankas.consent.GetScopeRequest} returns this
 */
proto.rbac.brankas.consent.GetScopeRequest.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.GetScopeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.GetScopeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.GetScopeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GetScopeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopesMap: (f = msg.getScopesMap()) ? f.toObject(includeInstance, proto.rbac.brankas.consent.ScopeDetail.toObject) : [],
    groupsMap: (f = msg.getGroupsMap()) ? f.toObject(includeInstance, proto.rbac.brankas.consent.GroupDetail.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.GetScopeResponse}
 */
proto.rbac.brankas.consent.GetScopeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.GetScopeResponse;
  return proto.rbac.brankas.consent.GetScopeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.GetScopeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.GetScopeResponse}
 */
proto.rbac.brankas.consent.GetScopeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getScopesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rbac.brankas.consent.ScopeDetail.deserializeBinaryFromReader, "", new proto.rbac.brankas.consent.ScopeDetail());
         });
      break;
    case 2:
      var value = msg.getGroupsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rbac.brankas.consent.GroupDetail.deserializeBinaryFromReader, "", new proto.rbac.brankas.consent.GroupDetail());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.GetScopeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.GetScopeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.GetScopeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GetScopeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rbac.brankas.consent.ScopeDetail.serializeBinaryToWriter);
  }
  f = message.getGroupsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rbac.brankas.consent.GroupDetail.serializeBinaryToWriter);
  }
};


/**
 * map<string, ScopeDetail> Scopes = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rbac.brankas.consent.ScopeDetail>}
 */
proto.rbac.brankas.consent.GetScopeResponse.prototype.getScopesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rbac.brankas.consent.ScopeDetail>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rbac.brankas.consent.ScopeDetail));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rbac.brankas.consent.GetScopeResponse} returns this
 */
proto.rbac.brankas.consent.GetScopeResponse.prototype.clearScopesMap = function() {
  this.getScopesMap().clear();
  return this;};


/**
 * map<string, GroupDetail> Groups = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rbac.brankas.consent.GroupDetail>}
 */
proto.rbac.brankas.consent.GetScopeResponse.prototype.getGroupsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rbac.brankas.consent.GroupDetail>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.rbac.brankas.consent.GroupDetail));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rbac.brankas.consent.GetScopeResponse} returns this
 */
proto.rbac.brankas.consent.GetScopeResponse.prototype.clearGroupsMap = function() {
  this.getGroupsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.GroupDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.GroupDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.GroupDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GroupDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.GroupDetail}
 */
proto.rbac.brankas.consent.GroupDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.GroupDetail;
  return proto.rbac.brankas.consent.GroupDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.GroupDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.GroupDetail}
 */
proto.rbac.brankas.consent.GroupDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.GroupDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.GroupDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.GroupDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.GroupDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.GroupDetail.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.GroupDetail} returns this
 */
proto.rbac.brankas.consent.GroupDetail.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Description = 2;
 * @return {string}
 */
proto.rbac.brankas.consent.GroupDetail.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.GroupDetail} returns this
 */
proto.rbac.brankas.consent.GroupDetail.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.brankas.consent.ScopeDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.brankas.consent.ScopeDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ScopeDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    group: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.brankas.consent.ScopeDetail}
 */
proto.rbac.brankas.consent.ScopeDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.brankas.consent.ScopeDetail;
  return proto.rbac.brankas.consent.ScopeDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.brankas.consent.ScopeDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.brankas.consent.ScopeDetail}
 */
proto.rbac.brankas.consent.ScopeDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.brankas.consent.ScopeDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.brankas.consent.ScopeDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.brankas.consent.ScopeDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Scope = 1;
 * @return {string}
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ScopeDetail} returns this
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ScopeDetail} returns this
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Group = 3;
 * @return {string}
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ScopeDetail} returns this
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.setGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rbac.brankas.consent.ScopeDetail} returns this
 */
proto.rbac.brankas.consent.ScopeDetail.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.rbac.brankas.consent);
