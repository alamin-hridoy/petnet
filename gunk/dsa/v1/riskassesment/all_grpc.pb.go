// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package riskassesment

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RiskAssesmentServiceClient is the client API for RiskAssesmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskAssesmentServiceClient interface {
	// Upsert  riskassesment.
	UpsertQuestion(ctx context.Context, in *RiskAssesmentQuestionRequest, opts ...grpc.CallOption) (*RiskAssesmentQuestionResponse, error)
	// Upsert  mltfriskassesment.
	UpsertMlTfQuestion(ctx context.Context, in *RiskAssesmentQuestionRequest, opts ...grpc.CallOption) (*RiskAssesmentQuestionResponse, error)
	// List  riskassesment.
	ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error)
	// List  riskassesment.
	ListMlTfQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error)
}

type riskAssesmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskAssesmentServiceClient(cc grpc.ClientConnInterface) RiskAssesmentServiceClient {
	return &riskAssesmentServiceClient{cc}
}

func (c *riskAssesmentServiceClient) UpsertQuestion(ctx context.Context, in *RiskAssesmentQuestionRequest, opts ...grpc.CallOption) (*RiskAssesmentQuestionResponse, error) {
	out := new(RiskAssesmentQuestionResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.riskassesment.RiskAssesmentService/UpsertQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskAssesmentServiceClient) UpsertMlTfQuestion(ctx context.Context, in *RiskAssesmentQuestionRequest, opts ...grpc.CallOption) (*RiskAssesmentQuestionResponse, error) {
	out := new(RiskAssesmentQuestionResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.riskassesment.RiskAssesmentService/UpsertMlTfQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskAssesmentServiceClient) ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error) {
	out := new(ListQuestionResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.riskassesment.RiskAssesmentService/ListQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskAssesmentServiceClient) ListMlTfQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error) {
	out := new(ListQuestionResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.riskassesment.RiskAssesmentService/ListMlTfQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskAssesmentServiceServer is the server API for RiskAssesmentService service.
// All implementations must embed UnimplementedRiskAssesmentServiceServer
// for forward compatibility
type RiskAssesmentServiceServer interface {
	// Upsert  riskassesment.
	UpsertQuestion(context.Context, *RiskAssesmentQuestionRequest) (*RiskAssesmentQuestionResponse, error)
	// Upsert  mltfriskassesment.
	UpsertMlTfQuestion(context.Context, *RiskAssesmentQuestionRequest) (*RiskAssesmentQuestionResponse, error)
	// List  riskassesment.
	ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error)
	// List  riskassesment.
	ListMlTfQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error)
	mustEmbedUnimplementedRiskAssesmentServiceServer()
}

// UnimplementedRiskAssesmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiskAssesmentServiceServer struct{}

func (UnimplementedRiskAssesmentServiceServer) UpsertQuestion(context.Context, *RiskAssesmentQuestionRequest) (*RiskAssesmentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuestion not implemented")
}

func (UnimplementedRiskAssesmentServiceServer) UpsertMlTfQuestion(context.Context, *RiskAssesmentQuestionRequest) (*RiskAssesmentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMlTfQuestion not implemented")
}

func (UnimplementedRiskAssesmentServiceServer) ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestion not implemented")
}

func (UnimplementedRiskAssesmentServiceServer) ListMlTfQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMlTfQuestion not implemented")
}
func (UnimplementedRiskAssesmentServiceServer) mustEmbedUnimplementedRiskAssesmentServiceServer() {}

// UnsafeRiskAssesmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskAssesmentServiceServer will
// result in compilation errors.
type UnsafeRiskAssesmentServiceServer interface {
	mustEmbedUnimplementedRiskAssesmentServiceServer()
}

func RegisterRiskAssesmentServiceServer(s grpc.ServiceRegistrar, srv RiskAssesmentServiceServer) {
	s.RegisterService(&RiskAssesmentService_ServiceDesc, srv)
}

func _RiskAssesmentService_UpsertQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskAssesmentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAssesmentServiceServer).UpsertQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.riskassesment.RiskAssesmentService/UpsertQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAssesmentServiceServer).UpsertQuestion(ctx, req.(*RiskAssesmentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskAssesmentService_UpsertMlTfQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskAssesmentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAssesmentServiceServer).UpsertMlTfQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.riskassesment.RiskAssesmentService/UpsertMlTfQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAssesmentServiceServer).UpsertMlTfQuestion(ctx, req.(*RiskAssesmentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskAssesmentService_ListQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAssesmentServiceServer).ListQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.riskassesment.RiskAssesmentService/ListQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAssesmentServiceServer).ListQuestion(ctx, req.(*ListQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskAssesmentService_ListMlTfQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAssesmentServiceServer).ListMlTfQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.riskassesment.RiskAssesmentService/ListMlTfQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAssesmentServiceServer).ListMlTfQuestion(ctx, req.(*ListQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskAssesmentService_ServiceDesc is the grpc.ServiceDesc for RiskAssesmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskAssesmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v1.riskassesment.RiskAssesmentService",
	HandlerType: (*RiskAssesmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertQuestion",
			Handler:    _RiskAssesmentService_UpsertQuestion_Handler,
		},
		{
			MethodName: "UpsertMlTfQuestion",
			Handler:    _RiskAssesmentService_UpsertMlTfQuestion_Handler,
		},
		{
			MethodName: "ListQuestion",
			Handler:    _RiskAssesmentService_ListQuestion_Handler,
		},
		{
			MethodName: "ListMlTfQuestion",
			Handler:    _RiskAssesmentService_ListMlTfQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v1/riskassesment/all.proto",
}
