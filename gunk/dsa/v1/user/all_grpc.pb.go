// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserProfileServiceClient is the client API for UserProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProfileServiceClient interface {
	// Create user profile.
	CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error)
	// Update user profile.
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// Get profile by user ID.
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// List user profiles.
	ListUserProfiles(ctx context.Context, in *ListUserProfilesRequest, opts ...grpc.CallOption) (*ListUserProfilesResponse, error)
	DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error)
	// Enable user profile.
	EnableUserProfile(ctx context.Context, in *EnableUserProfileRequest, opts ...grpc.CallOption) (*EnableUserProfileResponse, error)
	// Update user profile by OrgID.
	UpdateUserProfileByOrgID(ctx context.Context, in *UpdateUserProfileByOrgIDRequest, opts ...grpc.CallOption) (*UpdateUserProfileByOrgIDResponse, error)
	// Get profile by user email.
	GetUserProfileByEmail(ctx context.Context, in *GetUserProfileByEmailRequest, opts ...grpc.CallOption) (*GetUserProfileByEmailResponse, error)
}

type userProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProfileServiceClient(cc grpc.ClientConnInterface) UserProfileServiceClient {
	return &userProfileServiceClient{cc}
}

func (c *userProfileServiceClient) CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error) {
	out := new(CreateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/CreateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) ListUserProfiles(ctx context.Context, in *ListUserProfilesRequest, opts ...grpc.CallOption) (*ListUserProfilesResponse, error) {
	out := new(ListUserProfilesResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/ListUserProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error) {
	out := new(DeleteUserProfileResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/DeleteUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) EnableUserProfile(ctx context.Context, in *EnableUserProfileRequest, opts ...grpc.CallOption) (*EnableUserProfileResponse, error) {
	out := new(EnableUserProfileResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/EnableUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) UpdateUserProfileByOrgID(ctx context.Context, in *UpdateUserProfileByOrgIDRequest, opts ...grpc.CallOption) (*UpdateUserProfileByOrgIDResponse, error) {
	out := new(UpdateUserProfileByOrgIDResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/UpdateUserProfileByOrgID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) GetUserProfileByEmail(ctx context.Context, in *GetUserProfileByEmailRequest, opts ...grpc.CallOption) (*GetUserProfileByEmailResponse, error) {
	out := new(GetUserProfileByEmailResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.UserProfileService/GetUserProfileByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProfileServiceServer is the server API for UserProfileService service.
// All implementations must embed UnimplementedUserProfileServiceServer
// for forward compatibility
type UserProfileServiceServer interface {
	// Create user profile.
	CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error)
	// Update user profile.
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// Get profile by user ID.
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// List user profiles.
	ListUserProfiles(context.Context, *ListUserProfilesRequest) (*ListUserProfilesResponse, error)
	DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error)
	// Enable user profile.
	EnableUserProfile(context.Context, *EnableUserProfileRequest) (*EnableUserProfileResponse, error)
	// Update user profile by OrgID.
	UpdateUserProfileByOrgID(context.Context, *UpdateUserProfileByOrgIDRequest) (*UpdateUserProfileByOrgIDResponse, error)
	// Get profile by user email.
	GetUserProfileByEmail(context.Context, *GetUserProfileByEmailRequest) (*GetUserProfileByEmailResponse, error)
	mustEmbedUnimplementedUserProfileServiceServer()
}

// UnimplementedUserProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserProfileServiceServer struct{}

func (UnimplementedUserProfileServiceServer) CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfile not implemented")
}

func (UnimplementedUserProfileServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}

func (UnimplementedUserProfileServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}

func (UnimplementedUserProfileServiceServer) ListUserProfiles(context.Context, *ListUserProfilesRequest) (*ListUserProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserProfiles not implemented")
}

func (UnimplementedUserProfileServiceServer) DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfile not implemented")
}

func (UnimplementedUserProfileServiceServer) EnableUserProfile(context.Context, *EnableUserProfileRequest) (*EnableUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUserProfile not implemented")
}

func (UnimplementedUserProfileServiceServer) UpdateUserProfileByOrgID(context.Context, *UpdateUserProfileByOrgIDRequest) (*UpdateUserProfileByOrgIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfileByOrgID not implemented")
}

func (UnimplementedUserProfileServiceServer) GetUserProfileByEmail(context.Context, *GetUserProfileByEmailRequest) (*GetUserProfileByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfileByEmail not implemented")
}
func (UnimplementedUserProfileServiceServer) mustEmbedUnimplementedUserProfileServiceServer() {}

// UnsafeUserProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProfileServiceServer will
// result in compilation errors.
type UnsafeUserProfileServiceServer interface {
	mustEmbedUnimplementedUserProfileServiceServer()
}

func RegisterUserProfileServiceServer(s grpc.ServiceRegistrar, srv UserProfileServiceServer) {
	s.RegisterService(&UserProfileService_ServiceDesc, srv)
}

func _UserProfileService_CreateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).CreateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/CreateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).CreateUserProfile(ctx, req.(*CreateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_ListUserProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).ListUserProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/ListUserProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).ListUserProfiles(ctx, req.(*ListUserProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_DeleteUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).DeleteUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/DeleteUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).DeleteUserProfile(ctx, req.(*DeleteUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_EnableUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).EnableUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/EnableUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).EnableUserProfile(ctx, req.(*EnableUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_UpdateUserProfileByOrgID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileByOrgIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).UpdateUserProfileByOrgID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/UpdateUserProfileByOrgID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).UpdateUserProfileByOrgID(ctx, req.(*UpdateUserProfileByOrgIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_GetUserProfileByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).GetUserProfileByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.UserProfileService/GetUserProfileByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).GetUserProfileByEmail(ctx, req.(*GetUserProfileByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProfileService_ServiceDesc is the grpc.ServiceDesc for UserProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v1.user.UserProfileService",
	HandlerType: (*UserProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserProfile",
			Handler:    _UserProfileService_CreateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserProfileService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserProfileService_GetUserProfile_Handler,
		},
		{
			MethodName: "ListUserProfiles",
			Handler:    _UserProfileService_ListUserProfiles_Handler,
		},
		{
			MethodName: "DeleteUserProfile",
			Handler:    _UserProfileService_DeleteUserProfile_Handler,
		},
		{
			MethodName: "EnableUserProfile",
			Handler:    _UserProfileService_EnableUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfileByOrgID",
			Handler:    _UserProfileService_UpdateUserProfileByOrgID_Handler,
		},
		{
			MethodName: "GetUserProfileByEmail",
			Handler:    _UserProfileService_GetUserProfileByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v1/user/all.proto",
}

// SignupServiceClient is the client API for SignupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignupServiceClient interface {
	// Signup signs up a user using the passed in details
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	// RetrieveInvite details from platform application.
	RetrieveInvite(ctx context.Context, in *RetrieveInviteRequest, opts ...grpc.CallOption) (*RetrieveInviteResponse, error)
}

type signupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignupServiceClient(cc grpc.ClientConnInterface) SignupServiceClient {
	return &signupServiceClient{cc}
}

func (c *signupServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.SignupService/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupServiceClient) RetrieveInvite(ctx context.Context, in *RetrieveInviteRequest, opts ...grpc.CallOption) (*RetrieveInviteResponse, error) {
	out := new(RetrieveInviteResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.user.SignupService/RetrieveInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignupServiceServer is the server API for SignupService service.
// All implementations must embed UnimplementedSignupServiceServer
// for forward compatibility
type SignupServiceServer interface {
	// Signup signs up a user using the passed in details
	Signup(context.Context, *SignupRequest) (*SignupResponse, error)
	// RetrieveInvite details from platform application.
	RetrieveInvite(context.Context, *RetrieveInviteRequest) (*RetrieveInviteResponse, error)
	mustEmbedUnimplementedSignupServiceServer()
}

// UnimplementedSignupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignupServiceServer struct{}

func (UnimplementedSignupServiceServer) Signup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}

func (UnimplementedSignupServiceServer) RetrieveInvite(context.Context, *RetrieveInviteRequest) (*RetrieveInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvite not implemented")
}
func (UnimplementedSignupServiceServer) mustEmbedUnimplementedSignupServiceServer() {}

// UnsafeSignupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignupServiceServer will
// result in compilation errors.
type UnsafeSignupServiceServer interface {
	mustEmbedUnimplementedSignupServiceServer()
}

func RegisterSignupServiceServer(s grpc.ServiceRegistrar, srv SignupServiceServer) {
	s.RegisterService(&SignupService_ServiceDesc, srv)
}

func _SignupService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.SignupService/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServiceServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignupService_RetrieveInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServiceServer).RetrieveInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.user.SignupService/RetrieveInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServiceServer).RetrieveInvite(ctx, req.(*RetrieveInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignupService_ServiceDesc is the grpc.ServiceDesc for SignupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v1.user.SignupService",
	HandlerType: (*SignupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _SignupService_Signup_Handler,
		},
		{
			MethodName: "RetrieveInvite",
			Handler:    _SignupService_RetrieveInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v1/user/all.proto",
}
