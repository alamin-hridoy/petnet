// Code generated by mockery v2.12.2. DO NOT EDIT.

package revenue_commission

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockPerahubService is an autogenerated mock type for the iPerahubService type
type MockPerahubService struct {
	mock.Mock
}

// DeleteRevComm provides a mock function with given fields: ctx, url
func (_m *MockPerahubService) DeleteRevComm(ctx context.Context, url string) (json.RawMessage, error) {
	ret := _m.Called(ctx, url)

	var r0 json.RawMessage
	if rf, ok := ret.Get(0).(func(context.Context, string) json.RawMessage); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevComm provides a mock function with given fields: ctx, url
func (_m *MockPerahubService) GetRevComm(ctx context.Context, url string) (json.RawMessage, error) {
	ret := _m.Called(ctx, url)

	var r0 json.RawMessage
	if rf, ok := ret.Get(0).(func(context.Context, string) json.RawMessage); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRevComm provides a mock function with given fields: ctx, subUrl, body
func (_m *MockPerahubService) PostRevComm(ctx context.Context, subUrl string, body interface{}) (json.RawMessage, error) {
	ret := _m.Called(ctx, subUrl, body)

	var r0 json.RawMessage
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) json.RawMessage); ok {
		r0 = rf(ctx, subUrl, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, subUrl, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRevComm provides a mock function with given fields: ctx, url, body
func (_m *MockPerahubService) PutRevComm(ctx context.Context, url string, body interface{}) (json.RawMessage, error) {
	ret := _m.Called(ctx, url, body)

	var r0 json.RawMessage
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) json.RawMessage); ok {
		r0 = rf(ctx, url, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, url, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPerahubService creates a new instance of MockPerahubService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPerahubService(t testing.TB) *MockPerahubService {
	mock := &MockPerahubService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
