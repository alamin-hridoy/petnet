// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transactiontype

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionTypeServiceClient is the client API for TransactionTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionTypeServiceClient interface {
	// Create transaction type.
	CreateApiKeyTransactionType(ctx context.Context, in *CreateApiKeyTransactionTypeRequest, opts ...grpc.CallOption) (*CreateApiKeyTransactionTypeResponse, error)
	// Get API Transaction Type.
	GetAPITransactionType(ctx context.Context, in *GetAPITransactionTypeRequest, opts ...grpc.CallOption) (*ApiKeyTransactionType, error)
	// List User API Key Transaction Type.
	ListUserAPIKeyTransactionType(ctx context.Context, in *ListUserAPIKeyTransactionTypeRequest, opts ...grpc.CallOption) (*ListUserAPIKeyTransactionTypeResponse, error)
	// get transaction type by client id
	GetTransactionTypeByClientId(ctx context.Context, in *GetTransactionTypeByClientIdRequest, opts ...grpc.CallOption) (*GetTransactionTypeByClientIdResponse, error)
}

type transactionTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionTypeServiceClient(cc grpc.ClientConnInterface) TransactionTypeServiceClient {
	return &transactionTypeServiceClient{cc}
}

func (c *transactionTypeServiceClient) CreateApiKeyTransactionType(ctx context.Context, in *CreateApiKeyTransactionTypeRequest, opts ...grpc.CallOption) (*CreateApiKeyTransactionTypeResponse, error) {
	out := new(CreateApiKeyTransactionTypeResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.transactiontype.TransactionTypeService/CreateApiKeyTransactionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionTypeServiceClient) GetAPITransactionType(ctx context.Context, in *GetAPITransactionTypeRequest, opts ...grpc.CallOption) (*ApiKeyTransactionType, error) {
	out := new(ApiKeyTransactionType)
	err := c.cc.Invoke(ctx, "/petnet.v2.transactiontype.TransactionTypeService/GetAPITransactionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionTypeServiceClient) ListUserAPIKeyTransactionType(ctx context.Context, in *ListUserAPIKeyTransactionTypeRequest, opts ...grpc.CallOption) (*ListUserAPIKeyTransactionTypeResponse, error) {
	out := new(ListUserAPIKeyTransactionTypeResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.transactiontype.TransactionTypeService/ListUserAPIKeyTransactionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionTypeServiceClient) GetTransactionTypeByClientId(ctx context.Context, in *GetTransactionTypeByClientIdRequest, opts ...grpc.CallOption) (*GetTransactionTypeByClientIdResponse, error) {
	out := new(GetTransactionTypeByClientIdResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.transactiontype.TransactionTypeService/GetTransactionTypeByClientId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionTypeServiceServer is the server API for TransactionTypeService service.
// All implementations must embed UnimplementedTransactionTypeServiceServer
// for forward compatibility
type TransactionTypeServiceServer interface {
	// Create transaction type.
	CreateApiKeyTransactionType(context.Context, *CreateApiKeyTransactionTypeRequest) (*CreateApiKeyTransactionTypeResponse, error)
	// Get API Transaction Type.
	GetAPITransactionType(context.Context, *GetAPITransactionTypeRequest) (*ApiKeyTransactionType, error)
	// List User API Key Transaction Type.
	ListUserAPIKeyTransactionType(context.Context, *ListUserAPIKeyTransactionTypeRequest) (*ListUserAPIKeyTransactionTypeResponse, error)
	// get transaction type by client id
	GetTransactionTypeByClientId(context.Context, *GetTransactionTypeByClientIdRequest) (*GetTransactionTypeByClientIdResponse, error)
	mustEmbedUnimplementedTransactionTypeServiceServer()
}

// UnimplementedTransactionTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionTypeServiceServer struct{}

func (UnimplementedTransactionTypeServiceServer) CreateApiKeyTransactionType(context.Context, *CreateApiKeyTransactionTypeRequest) (*CreateApiKeyTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKeyTransactionType not implemented")
}

func (UnimplementedTransactionTypeServiceServer) GetAPITransactionType(context.Context, *GetAPITransactionTypeRequest) (*ApiKeyTransactionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPITransactionType not implemented")
}

func (UnimplementedTransactionTypeServiceServer) ListUserAPIKeyTransactionType(context.Context, *ListUserAPIKeyTransactionTypeRequest) (*ListUserAPIKeyTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAPIKeyTransactionType not implemented")
}

func (UnimplementedTransactionTypeServiceServer) GetTransactionTypeByClientId(context.Context, *GetTransactionTypeByClientIdRequest) (*GetTransactionTypeByClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTypeByClientId not implemented")
}

func (UnimplementedTransactionTypeServiceServer) mustEmbedUnimplementedTransactionTypeServiceServer() {
}

// UnsafeTransactionTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionTypeServiceServer will
// result in compilation errors.
type UnsafeTransactionTypeServiceServer interface {
	mustEmbedUnimplementedTransactionTypeServiceServer()
}

func RegisterTransactionTypeServiceServer(s grpc.ServiceRegistrar, srv TransactionTypeServiceServer) {
	s.RegisterService(&TransactionTypeService_ServiceDesc, srv)
}

func _TransactionTypeService_CreateApiKeyTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiKeyTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).CreateApiKeyTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.transactiontype.TransactionTypeService/CreateApiKeyTransactionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).CreateApiKeyTransactionType(ctx, req.(*CreateApiKeyTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionTypeService_GetAPITransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPITransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).GetAPITransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.transactiontype.TransactionTypeService/GetAPITransactionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).GetAPITransactionType(ctx, req.(*GetAPITransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionTypeService_ListUserAPIKeyTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAPIKeyTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).ListUserAPIKeyTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.transactiontype.TransactionTypeService/ListUserAPIKeyTransactionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).ListUserAPIKeyTransactionType(ctx, req.(*ListUserAPIKeyTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionTypeService_GetTransactionTypeByClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionTypeByClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).GetTransactionTypeByClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.transactiontype.TransactionTypeService/GetTransactionTypeByClientId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).GetTransactionTypeByClientId(ctx, req.(*GetTransactionTypeByClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionTypeService_ServiceDesc is the grpc.ServiceDesc for TransactionTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v2.transactiontype.TransactionTypeService",
	HandlerType: (*TransactionTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApiKeyTransactionType",
			Handler:    _TransactionTypeService_CreateApiKeyTransactionType_Handler,
		},
		{
			MethodName: "GetAPITransactionType",
			Handler:    _TransactionTypeService_GetAPITransactionType_Handler,
		},
		{
			MethodName: "ListUserAPIKeyTransactionType",
			Handler:    _TransactionTypeService_ListUserAPIKeyTransactionType_Handler,
		},
		{
			MethodName: "GetTransactionTypeByClientId",
			Handler:    _TransactionTypeService_GetTransactionTypeByClientId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v2/transactiontype/all.proto",
}
