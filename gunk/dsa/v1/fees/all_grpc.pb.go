// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fees

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrgFeesServiceClient is the client API for OrgFeesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgFeesServiceClient interface {
	// Upsert org fees.
	UpsertFees(ctx context.Context, in *UpsertFeesRequest, opts ...grpc.CallOption) (*UpsertFeesResponse, error)
	// List org fees.
	GetFees(ctx context.Context, in *GetFeesRequest, opts ...grpc.CallOption) (*GetFeesResponse, error)
}

type orgFeesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgFeesServiceClient(cc grpc.ClientConnInterface) OrgFeesServiceClient {
	return &orgFeesServiceClient{cc}
}

func (c *orgFeesServiceClient) UpsertFees(ctx context.Context, in *UpsertFeesRequest, opts ...grpc.CallOption) (*UpsertFeesResponse, error) {
	out := new(UpsertFeesResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.fees.OrgFeesService/UpsertFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgFeesServiceClient) GetFees(ctx context.Context, in *GetFeesRequest, opts ...grpc.CallOption) (*GetFeesResponse, error) {
	out := new(GetFeesResponse)
	err := c.cc.Invoke(ctx, "/petnet.v1.fees.OrgFeesService/GetFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgFeesServiceServer is the server API for OrgFeesService service.
// All implementations must embed UnimplementedOrgFeesServiceServer
// for forward compatibility
type OrgFeesServiceServer interface {
	// Upsert org fees.
	UpsertFees(context.Context, *UpsertFeesRequest) (*UpsertFeesResponse, error)
	// List org fees.
	GetFees(context.Context, *GetFeesRequest) (*GetFeesResponse, error)
	mustEmbedUnimplementedOrgFeesServiceServer()
}

// UnimplementedOrgFeesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrgFeesServiceServer struct{}

func (UnimplementedOrgFeesServiceServer) UpsertFees(context.Context, *UpsertFeesRequest) (*UpsertFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertFees not implemented")
}

func (UnimplementedOrgFeesServiceServer) GetFees(context.Context, *GetFeesRequest) (*GetFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFees not implemented")
}
func (UnimplementedOrgFeesServiceServer) mustEmbedUnimplementedOrgFeesServiceServer() {}

// UnsafeOrgFeesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgFeesServiceServer will
// result in compilation errors.
type UnsafeOrgFeesServiceServer interface {
	mustEmbedUnimplementedOrgFeesServiceServer()
}

func RegisterOrgFeesServiceServer(s grpc.ServiceRegistrar, srv OrgFeesServiceServer) {
	s.RegisterService(&OrgFeesService_ServiceDesc, srv)
}

func _OrgFeesService_UpsertFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgFeesServiceServer).UpsertFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.fees.OrgFeesService/UpsertFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgFeesServiceServer).UpsertFees(ctx, req.(*UpsertFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgFeesService_GetFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgFeesServiceServer).GetFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v1.fees.OrgFeesService/GetFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgFeesServiceServer).GetFees(ctx, req.(*GetFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgFeesService_ServiceDesc is the grpc.ServiceDesc for OrgFeesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgFeesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v1.fees.OrgFeesService",
	HandlerType: (*OrgFeesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertFees",
			Handler:    _OrgFeesService_UpsertFees_Handler,
		},
		{
			MethodName: "GetFees",
			Handler:    _OrgFeesService_GetFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v1/fees/all.proto",
}
