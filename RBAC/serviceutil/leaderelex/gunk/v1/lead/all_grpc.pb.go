// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lead

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderElexServiceClient is the client API for LeaderElexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderElexServiceClient interface {
	GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
}

type leaderElexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderElexServiceClient(cc grpc.ClientConnInterface) LeaderElexServiceClient {
	return &leaderElexServiceClient{cc}
}

func (c *leaderElexServiceClient) GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := c.cc.Invoke(ctx, "/rbac.brankas.leaderelex.LeaderElexService/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderElexServiceServer is the server API for LeaderElexService service.
// All implementations must embed UnimplementedLeaderElexServiceServer
// for forward compatibility
type LeaderElexServiceServer interface {
	GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error)
	mustEmbedUnimplementedLeaderElexServiceServer()
}

// UnimplementedLeaderElexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderElexServiceServer struct{}

func (UnimplementedLeaderElexServiceServer) GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedLeaderElexServiceServer) mustEmbedUnimplementedLeaderElexServiceServer() {}

// UnsafeLeaderElexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderElexServiceServer will
// result in compilation errors.
type UnsafeLeaderElexServiceServer interface {
	mustEmbedUnimplementedLeaderElexServiceServer()
}

func RegisterLeaderElexServiceServer(s grpc.ServiceRegistrar, srv LeaderElexServiceServer) {
	s.RegisterService(&LeaderElexService_ServiceDesc, srv)
}

func _LeaderElexService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElexServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.brankas.leaderelex.LeaderElexService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElexServiceServer).GetLeader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderElexService_ServiceDesc is the grpc.ServiceDesc for LeaderElexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderElexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.brankas.leaderelex.LeaderElexService",
	HandlerType: (*LeaderElexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeader",
			Handler:    _LeaderElexService_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/rbac/serviceutil/leaderelex/gunk/v1/lead/all.proto",
}
