// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/bills-payment/all.proto

package bills_payment

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortOrder int32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	SortOrder_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{0}
}

type SortByColumn int32

const (
	SortByColumn_OmitSortByColumn         SortByColumn = 0
	SortByColumn_ReferenceNumber          SortByColumn = 1
	SortByColumn_GrossAmount              SortByColumn = 2
	SortByColumn_TransactionCompletedTime SortByColumn = 3
	SortByColumn_Partner                  SortByColumn = 4
	SortByColumn_Fee                      SortByColumn = 5
	SortByColumn_Commission               SortByColumn = 6
)

// Enum value maps for SortByColumn.
var (
	SortByColumn_name = map[int32]string{
		0: "OmitSortByColumn",
		1: "ReferenceNumber",
		2: "GrossAmount",
		3: "TransactionCompletedTime",
		4: "Partner",
		5: "Fee",
		6: "Commission",
	}
	SortByColumn_value = map[string]int32{
		"OmitSortByColumn":         0,
		"ReferenceNumber":          1,
		"GrossAmount":              2,
		"TransactionCompletedTime": 3,
		"Partner":                  4,
		"Fee":                      5,
		"Commission":               6,
	}
)

func (x SortByColumn) Enum() *SortByColumn {
	p := new(SortByColumn)
	*p = x
	return p
}

func (x SortByColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_enumTypes[1].Descriptor()
}

func (SortByColumn) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_enumTypes[1]
}

func (x SortByColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByColumn.Descriptor instead.
func (SortByColumn) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{1}
}

type BPTransactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillerTag               string               `protobuf:"bytes,1,opt,name=BillerTag,json=biller_tag,proto3" json:"biller_tag,omitempty"`
	RemoteUserID            string               `protobuf:"bytes,2,opt,name=RemoteUserID,json=remote_user_id,proto3" json:"remote_user_id,omitempty"`
	LocationID              string               `protobuf:"bytes,3,opt,name=LocationID,json=location_id,proto3" json:"location_id,omitempty"`
	RemoteLocationID        string               `protobuf:"bytes,4,opt,name=RemoteLocationID,json=remote_location_id,proto3" json:"remote_location_id,omitempty"`
	CurrencyID              string               `protobuf:"bytes,5,opt,name=CurrencyID,json=currency_id,proto3" json:"currency_id,omitempty"`
	FormType                string               `protobuf:"bytes,6,opt,name=FormType,json=form_type,proto3" json:"form_type,omitempty"`
	FormNumber              string               `protobuf:"bytes,7,opt,name=FormNumber,json=form_number,proto3" json:"form_number,omitempty"`
	Identifier              string               `protobuf:"bytes,8,opt,name=Identifier,json=identifier,proto3" json:"identifier,omitempty"`
	TotalAmount             int32                `protobuf:"varint,9,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
	ClientReferenceNumber   string               `protobuf:"bytes,10,opt,name=ClientReferenceNumber,json=client_reference_number,proto3" json:"client_reference_number,omitempty"`
	UserID                  string               `protobuf:"bytes,11,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	CustomerID              int32                `protobuf:"varint,12,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	LocationName            string               `protobuf:"bytes,13,opt,name=LocationName,json=location_name,proto3" json:"location_name,omitempty"`
	Coy                     string               `protobuf:"bytes,14,opt,name=Coy,json=coy,proto3" json:"coy,omitempty"`
	CallbackURL             string               `protobuf:"bytes,15,opt,name=CallbackURL,json=callback_url,proto3" json:"callback_url,omitempty"`
	BillID                  string               `protobuf:"bytes,16,opt,name=BillID,json=bill_id,proto3" json:"bill_id,omitempty"`
	BillerName              string               `protobuf:"bytes,17,opt,name=BillerName,json=biller_name,proto3" json:"biller_name,omitempty"`
	TrxDate                 string               `protobuf:"bytes,18,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	Amount                  string               `protobuf:"bytes,19,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	ServiceCharge           string               `protobuf:"bytes,20,opt,name=ServiceCharge,json=service_charge,proto3" json:"service_charge,omitempty"`
	PartnerCharge           string               `protobuf:"bytes,21,opt,name=PartnerCharge,json=partner_charge,proto3" json:"partner_charge,omitempty"`
	AccountNumber           string               `protobuf:"bytes,22,opt,name=AccountNumber,json=account_number,proto3" json:"account_number,omitempty"`
	PaymentMethod           string               `protobuf:"bytes,23,opt,name=PaymentMethod,json=payment_method,proto3" json:"payment_method,omitempty"`
	ReferenceNumber         string               `protobuf:"bytes,24,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	ValidationNumber        string               `protobuf:"bytes,25,opt,name=ValidationNumber,json=validation_number,proto3" json:"validation_number,omitempty"`
	ReceiptValidationNumber string               `protobuf:"bytes,26,opt,name=ReceiptValidationNumber,json=receipt_validation_number,proto3" json:"receipt_validation_number,omitempty"`
	TpaID                   string               `protobuf:"bytes,27,opt,name=TpaID,json=tpa_id,proto3" json:"tpa_id,omitempty"`
	OtherInfo               *BPTransactOtherInfo `protobuf:"bytes,28,opt,name=OtherInfo,json=other_info,proto3" json:"other_info,omitempty"`
	Type                    string               `protobuf:"bytes,29,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Txnid                   string               `protobuf:"bytes,30,opt,name=Txnid,json=txnid,proto3" json:"txnid,omitempty"`
	Partner                 string               `protobuf:"bytes,31,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
}

func (x *BPTransactRequest) Reset() {
	*x = BPTransactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactRequest) ProtoMessage() {}

func (x *BPTransactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactRequest.ProtoReflect.Descriptor instead.
func (*BPTransactRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{0}
}

func (x *BPTransactRequest) GetBillerTag() string {
	if x != nil {
		return x.BillerTag
	}
	return ""
}

func (x *BPTransactRequest) GetRemoteUserID() string {
	if x != nil {
		return x.RemoteUserID
	}
	return ""
}

func (x *BPTransactRequest) GetLocationID() string {
	if x != nil {
		return x.LocationID
	}
	return ""
}

func (x *BPTransactRequest) GetRemoteLocationID() string {
	if x != nil {
		return x.RemoteLocationID
	}
	return ""
}

func (x *BPTransactRequest) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *BPTransactRequest) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *BPTransactRequest) GetFormNumber() string {
	if x != nil {
		return x.FormNumber
	}
	return ""
}

func (x *BPTransactRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *BPTransactRequest) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *BPTransactRequest) GetClientReferenceNumber() string {
	if x != nil {
		return x.ClientReferenceNumber
	}
	return ""
}

func (x *BPTransactRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BPTransactRequest) GetCustomerID() int32 {
	if x != nil {
		return x.CustomerID
	}
	return 0
}

func (x *BPTransactRequest) GetLocationName() string {
	if x != nil {
		return x.LocationName
	}
	return ""
}

func (x *BPTransactRequest) GetCoy() string {
	if x != nil {
		return x.Coy
	}
	return ""
}

func (x *BPTransactRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

func (x *BPTransactRequest) GetBillID() string {
	if x != nil {
		return x.BillID
	}
	return ""
}

func (x *BPTransactRequest) GetBillerName() string {
	if x != nil {
		return x.BillerName
	}
	return ""
}

func (x *BPTransactRequest) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *BPTransactRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BPTransactRequest) GetServiceCharge() string {
	if x != nil {
		return x.ServiceCharge
	}
	return ""
}

func (x *BPTransactRequest) GetPartnerCharge() string {
	if x != nil {
		return x.PartnerCharge
	}
	return ""
}

func (x *BPTransactRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BPTransactRequest) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *BPTransactRequest) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *BPTransactRequest) GetValidationNumber() string {
	if x != nil {
		return x.ValidationNumber
	}
	return ""
}

func (x *BPTransactRequest) GetReceiptValidationNumber() string {
	if x != nil {
		return x.ReceiptValidationNumber
	}
	return ""
}

func (x *BPTransactRequest) GetTpaID() string {
	if x != nil {
		return x.TpaID
	}
	return ""
}

func (x *BPTransactRequest) GetOtherInfo() *BPTransactOtherInfo {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

func (x *BPTransactRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BPTransactRequest) GetTxnid() string {
	if x != nil {
		return x.Txnid
	}
	return ""
}

func (x *BPTransactRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

type BPTransactOtherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName        string `protobuf:"bytes,1,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	FirstName       string `protobuf:"bytes,2,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	MiddleName      string `protobuf:"bytes,3,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	PaymentType     string `protobuf:"bytes,4,opt,name=PaymentType,json=payment_type,proto3" json:"payment_type,omitempty"`
	Course          string `protobuf:"bytes,5,opt,name=Course,json=course,proto3" json:"course,omitempty"`
	TotalAssessment string `protobuf:"bytes,6,opt,name=TotalAssessment,json=total_assessment,proto3" json:"total_assessment,omitempty"`
	SchoolYear      string `protobuf:"bytes,7,opt,name=SchoolYear,json=school_year,proto3" json:"school_year,omitempty"`
	Term            string `protobuf:"bytes,8,opt,name=Term,json=term,proto3" json:"term,omitempty"`
	Name            string `protobuf:"bytes,9,opt,name=Name,json=name,proto3" json:"name,omitempty"`
}

func (x *BPTransactOtherInfo) Reset() {
	*x = BPTransactOtherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactOtherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactOtherInfo) ProtoMessage() {}

func (x *BPTransactOtherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactOtherInfo.ProtoReflect.Descriptor instead.
func (*BPTransactOtherInfo) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{1}
}

func (x *BPTransactOtherInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *BPTransactOtherInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *BPTransactOtherInfo) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *BPTransactOtherInfo) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *BPTransactOtherInfo) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *BPTransactOtherInfo) GetTotalAssessment() string {
	if x != nil {
		return x.TotalAssessment
	}
	return ""
}

func (x *BPTransactOtherInfo) GetSchoolYear() string {
	if x != nil {
		return x.SchoolYear
	}
	return ""
}

func (x *BPTransactOtherInfo) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *BPTransactOtherInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BPTransactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string            `protobuf:"bytes,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *BPTransactResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
	RemcoID int32             `protobuf:"varint,4,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
}

func (x *BPTransactResponse) Reset() {
	*x = BPTransactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactResponse) ProtoMessage() {}

func (x *BPTransactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactResponse.ProtoReflect.Descriptor instead.
func (*BPTransactResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{2}
}

func (x *BPTransactResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BPTransactResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPTransactResponse) GetResult() *BPTransactResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BPTransactResponse) GetRemcoID() int32 {
	if x != nil {
		return x.RemcoID
	}
	return 0
}

type BPTransactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          string     `protobuf:"bytes,1,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Message         string     `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	ServiceCharge   int32      `protobuf:"varint,3,opt,name=ServiceCharge,json=service_charge,proto3" json:"service_charge,omitempty"`
	Timestamp       string     `protobuf:"bytes,4,opt,name=Timestamp,json=timestamp,proto3" json:"timestamp,omitempty"`
	ReferenceNumber string     `protobuf:"bytes,5,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	TransactionID   string     `protobuf:"bytes,6,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	ClientReference string     `protobuf:"bytes,7,opt,name=ClientReference,json=client_reference,proto3" json:"client_reference,omitempty"`
	BillerReference string     `protobuf:"bytes,8,opt,name=BillerReference,json=biller_reference,proto3" json:"biller_reference,omitempty"`
	PaymentMethod   string     `protobuf:"bytes,9,opt,name=PaymentMethod,json=payment_method,proto3" json:"payment_method,omitempty"`
	Amount          string     `protobuf:"bytes,10,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	OtherCharges    string     `protobuf:"bytes,11,opt,name=OtherCharges,json=other_charges,proto3" json:"other_charges,omitempty"`
	Details         []*Details `protobuf:"bytes,14,rep,name=Details,json=details,proto3" json:"details,omitempty"`
	CreatedAt       string     `protobuf:"bytes,15,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
	URL             string     `protobuf:"bytes,16,opt,name=URL,json=url,proto3" json:"url,omitempty"`
}

func (x *BPTransactResult) Reset() {
	*x = BPTransactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactResult) ProtoMessage() {}

func (x *BPTransactResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactResult.ProtoReflect.Descriptor instead.
func (*BPTransactResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{3}
}

func (x *BPTransactResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BPTransactResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPTransactResult) GetServiceCharge() int32 {
	if x != nil {
		return x.ServiceCharge
	}
	return 0
}

func (x *BPTransactResult) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *BPTransactResult) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *BPTransactResult) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *BPTransactResult) GetClientReference() string {
	if x != nil {
		return x.ClientReference
	}
	return ""
}

func (x *BPTransactResult) GetBillerReference() string {
	if x != nil {
		return x.BillerReference
	}
	return ""
}

func (x *BPTransactResult) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *BPTransactResult) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BPTransactResult) GetOtherCharges() string {
	if x != nil {
		return x.OtherCharges
	}
	return ""
}

func (x *BPTransactResult) GetDetails() []*Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *BPTransactResult) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *BPTransactResult) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{4}
}

type BPTransactInquireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string `protobuf:"bytes,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	ClientReference string `protobuf:"bytes,2,opt,name=ClientReference,json=client_reference,proto3" json:"client_reference,omitempty"`
	AccountNumber   string `protobuf:"bytes,3,opt,name=AccountNumber,json=account_number,proto3" json:"account_number,omitempty"`
	Amount          int32  `protobuf:"varint,4,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	ContactNumber   string `protobuf:"bytes,5,opt,name=ContactNumber,json=contact_number,proto3" json:"contact_number,omitempty"`
	Partner         string `protobuf:"bytes,6,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
}

func (x *BPTransactInquireRequest) Reset() {
	*x = BPTransactInquireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactInquireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactInquireRequest) ProtoMessage() {}

func (x *BPTransactInquireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactInquireRequest.ProtoReflect.Descriptor instead.
func (*BPTransactInquireRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{5}
}

func (x *BPTransactInquireRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BPTransactInquireRequest) GetClientReference() string {
	if x != nil {
		return x.ClientReference
	}
	return ""
}

func (x *BPTransactInquireRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BPTransactInquireRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BPTransactInquireRequest) GetContactNumber() string {
	if x != nil {
		return x.ContactNumber
	}
	return ""
}

func (x *BPTransactInquireRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

type BPTransactInquireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                    `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string                   `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *BPTransactInquireResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
	RemcoID int32                    `protobuf:"varint,4,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
	Status  int32                    `protobuf:"varint,5,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Reason  string                   `protobuf:"bytes,6,opt,name=Reason,json=reason,proto3" json:"reason,omitempty"`
}

func (x *BPTransactInquireResponse) Reset() {
	*x = BPTransactInquireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactInquireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactInquireResponse) ProtoMessage() {}

func (x *BPTransactInquireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactInquireResponse.ProtoReflect.Descriptor instead.
func (*BPTransactInquireResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{6}
}

func (x *BPTransactInquireResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BPTransactInquireResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPTransactInquireResponse) GetResult() *BPTransactInquireResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BPTransactInquireResponse) GetRemcoID() int32 {
	if x != nil {
		return x.RemcoID
	}
	return 0
}

func (x *BPTransactInquireResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BPTransactInquireResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BPTransactInquireResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID   string                    `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	ReferenceNumber string                    `protobuf:"bytes,2,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	ClientReference string                    `protobuf:"bytes,3,opt,name=ClientReference,json=client_reference,proto3" json:"client_reference,omitempty"`
	BillerReference string                    `protobuf:"bytes,4,opt,name=BillerReference,json=biller_reference,proto3" json:"biller_reference,omitempty"`
	PaymentMethod   string                    `protobuf:"bytes,5,opt,name=PaymentMethod,json=payment_method,proto3" json:"payment_method,omitempty"`
	Amount          string                    `protobuf:"bytes,6,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	OtherCharges    string                    `protobuf:"bytes,7,opt,name=OtherCharges,json=other_charges,proto3" json:"other_charges,omitempty"`
	Status          string                    `protobuf:"bytes,8,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Message         *BPTransactInquireMessage `protobuf:"bytes,9,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Details         []*Details                `protobuf:"bytes,10,rep,name=Details,json=details,proto3" json:"details,omitempty"`
	CreatedAt       string                    `protobuf:"bytes,11,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
	AccountNumber   string                    `protobuf:"bytes,12,opt,name=AccountNumber,json=account_number,proto3" json:"account_number,omitempty"`
	Biller          string                    `protobuf:"bytes,14,opt,name=Biller,json=biller,proto3" json:"biller,omitempty"`
}

func (x *BPTransactInquireResult) Reset() {
	*x = BPTransactInquireResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactInquireResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactInquireResult) ProtoMessage() {}

func (x *BPTransactInquireResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactInquireResult.ProtoReflect.Descriptor instead.
func (*BPTransactInquireResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{7}
}

func (x *BPTransactInquireResult) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *BPTransactInquireResult) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *BPTransactInquireResult) GetClientReference() string {
	if x != nil {
		return x.ClientReference
	}
	return ""
}

func (x *BPTransactInquireResult) GetBillerReference() string {
	if x != nil {
		return x.BillerReference
	}
	return ""
}

func (x *BPTransactInquireResult) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *BPTransactInquireResult) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BPTransactInquireResult) GetOtherCharges() string {
	if x != nil {
		return x.OtherCharges
	}
	return ""
}

func (x *BPTransactInquireResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BPTransactInquireResult) GetMessage() *BPTransactInquireMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BPTransactInquireResult) GetDetails() []*Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *BPTransactInquireResult) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *BPTransactInquireResult) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BPTransactInquireResult) GetBiller() string {
	if x != nil {
		return x.Biller
	}
	return ""
}

type BPTransactInquireMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  string `protobuf:"bytes,1,opt,name=Header,json=header,proto3" json:"header,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Footer  string `protobuf:"bytes,3,opt,name=Footer,json=footer,proto3" json:"footer,omitempty"`
}

func (x *BPTransactInquireMessage) Reset() {
	*x = BPTransactInquireMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPTransactInquireMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPTransactInquireMessage) ProtoMessage() {}

func (x *BPTransactInquireMessage) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPTransactInquireMessage.ProtoReflect.Descriptor instead.
func (*BPTransactInquireMessage) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{8}
}

func (x *BPTransactInquireMessage) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *BPTransactInquireMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPTransactInquireMessage) GetFooter() string {
	if x != nil {
		return x.Footer
	}
	return ""
}

type BPValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNo     string               `protobuf:"bytes,1,opt,name=AccountNo,json=account_no,proto3" json:"account_no,omitempty"`
	Identifier    string               `protobuf:"bytes,2,opt,name=Identifier,json=identifier,proto3" json:"identifier,omitempty"`
	BillerTag     string               `protobuf:"bytes,3,opt,name=BillerTag,json=biller_tag,proto3" json:"biller_tag,omitempty"`
	BillPartnerID int32                `protobuf:"varint,4,opt,name=BillPartnerID,json=bill_partner_id,proto3" json:"bill_partner_id,omitempty"`
	Code          string               `protobuf:"bytes,5,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	AccountNumber string               `protobuf:"bytes,6,opt,name=AccountNumber,json=account_number,proto3" json:"account_number,omitempty"`
	PaymentMethod string               `protobuf:"bytes,7,opt,name=PaymentMethod,json=payment_method,proto3" json:"payment_method,omitempty"`
	OtherCharges  string               `protobuf:"bytes,8,opt,name=OtherCharges,json=other_charges,proto3" json:"other_charges,omitempty"`
	Amount        int32                `protobuf:"varint,9,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	OtherInfo     *BPTransactOtherInfo `protobuf:"bytes,10,opt,name=OtherInfo,json=other_info,proto3" json:"other_info,omitempty"`
	ContactNumber string               `protobuf:"bytes,11,opt,name=ContactNumber,json=contact_number,proto3" json:"contact_number,omitempty"`
	Partner       string               `protobuf:"bytes,12,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
}

func (x *BPValidateRequest) Reset() {
	*x = BPValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPValidateRequest) ProtoMessage() {}

func (x *BPValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPValidateRequest.ProtoReflect.Descriptor instead.
func (*BPValidateRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{9}
}

func (x *BPValidateRequest) GetAccountNo() string {
	if x != nil {
		return x.AccountNo
	}
	return ""
}

func (x *BPValidateRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *BPValidateRequest) GetBillerTag() string {
	if x != nil {
		return x.BillerTag
	}
	return ""
}

func (x *BPValidateRequest) GetBillPartnerID() int32 {
	if x != nil {
		return x.BillPartnerID
	}
	return 0
}

func (x *BPValidateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BPValidateRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BPValidateRequest) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *BPValidateRequest) GetOtherCharges() string {
	if x != nil {
		return x.OtherCharges
	}
	return ""
}

func (x *BPValidateRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BPValidateRequest) GetOtherInfo() *BPTransactOtherInfo {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

func (x *BPValidateRequest) GetContactNumber() string {
	if x != nil {
		return x.ContactNumber
	}
	return ""
}

func (x *BPValidateRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

type BPValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  *BPValidateResult `protobuf:"bytes,3,opt,name=Result,json=result,proto3" json:"result,omitempty"`
	RemcoID int32             `protobuf:"varint,4,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
	Status  int32             `protobuf:"varint,5,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Reason  string            `protobuf:"bytes,6,opt,name=Reason,json=reason,proto3" json:"reason,omitempty"`
}

func (x *BPValidateResponse) Reset() {
	*x = BPValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPValidateResponse) ProtoMessage() {}

func (x *BPValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPValidateResponse.ProtoReflect.Descriptor instead.
func (*BPValidateResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{10}
}

func (x *BPValidateResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BPValidateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPValidateResponse) GetResult() *BPValidateResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BPValidateResponse) GetRemcoID() int32 {
	if x != nil {
		return x.RemcoID
	}
	return 0
}

func (x *BPValidateResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BPValidateResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BPValidateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid            bool       `protobuf:"varint,1,opt,name=Valid,json=valid,proto3" json:"valid,omitempty"`
	Code             int32      `protobuf:"varint,2,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Account          string     `protobuf:"bytes,3,opt,name=Account,json=account,proto3" json:"account,omitempty"`
	Details          []*Details `protobuf:"bytes,4,rep,name=Details,json=details,proto3" json:"details,omitempty"`
	ValidationNumber string     `protobuf:"bytes,5,opt,name=ValidationNumber,json=validation_number,proto3" json:"validation_number,omitempty"`
	Message          string     `protobuf:"bytes,6,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Refno            string     `protobuf:"bytes,7,opt,name=Refno,json=refno,proto3" json:"refno,omitempty"`
	Txnid            string     `protobuf:"bytes,8,opt,name=Txnid,json=txnid,proto3" json:"txnid,omitempty"`
	Biller           string     `protobuf:"bytes,9,opt,name=Biller,json=biller,proto3" json:"biller,omitempty"`
	Meta             []*Details `protobuf:"bytes,10,rep,name=Meta,json=meta,proto3" json:"meta,omitempty"`
}

func (x *BPValidateResult) Reset() {
	*x = BPValidateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPValidateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPValidateResult) ProtoMessage() {}

func (x *BPValidateResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPValidateResult.ProtoReflect.Descriptor instead.
func (*BPValidateResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{11}
}

func (x *BPValidateResult) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *BPValidateResult) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BPValidateResult) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BPValidateResult) GetDetails() []*Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *BPValidateResult) GetValidationNumber() string {
	if x != nil {
		return x.ValidationNumber
	}
	return ""
}

func (x *BPValidateResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPValidateResult) GetRefno() string {
	if x != nil {
		return x.Refno
	}
	return ""
}

func (x *BPValidateResult) GetTxnid() string {
	if x != nil {
		return x.Txnid
	}
	return ""
}

func (x *BPValidateResult) GetBiller() string {
	if x != nil {
		return x.Biller
	}
	return ""
}

func (x *BPValidateResult) GetMeta() []*Details {
	if x != nil {
		return x.Meta
	}
	return nil
}

type BPBillerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner string `protobuf:"bytes,1,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
}

func (x *BPBillerListRequest) Reset() {
	*x = BPBillerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPBillerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPBillerListRequest) ProtoMessage() {}

func (x *BPBillerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPBillerListRequest.ProtoReflect.Descriptor instead.
func (*BPBillerListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{12}
}

func (x *BPBillerListRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

type BPBillerListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillerTag         string                   `protobuf:"bytes,1,opt,name=BillerTag,json=biller_tag,proto3" json:"biller_tag,omitempty"`
	Description       string                   `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	FirstField        string                   `protobuf:"bytes,3,opt,name=FirstField,json=first_field,proto3" json:"first_field,omitempty"`
	FirstFieldFormat  string                   `protobuf:"bytes,4,opt,name=FirstFieldFormat,json=first_field_format,proto3" json:"first_field_format,omitempty"`
	FirstFieldWidth   string                   `protobuf:"bytes,5,opt,name=FirstFieldWidth,json=first_field_width,proto3" json:"first_field_width,omitempty"`
	SecondField       string                   `protobuf:"bytes,6,opt,name=SecondField,json=second_field,proto3" json:"second_field,omitempty"`
	SecondFieldFormat string                   `protobuf:"bytes,7,opt,name=SecondFieldFormat,json=second_field_format,proto3" json:"second_field_format,omitempty"`
	SecondFieldWidth  string                   `protobuf:"bytes,8,opt,name=SecondFieldWidth,json=second_field_width,proto3" json:"second_field_width,omitempty"`
	ServiceCharge     int32                    `protobuf:"varint,9,opt,name=ServiceCharge,json=service_charge,proto3" json:"service_charge,omitempty"`
	Name              string                   `protobuf:"bytes,10,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Code              string                   `protobuf:"bytes,11,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Category          string                   `protobuf:"bytes,13,opt,name=Category,json=category,proto3" json:"category,omitempty"`
	Type              string                   `protobuf:"bytes,14,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Logo              string                   `protobuf:"bytes,15,opt,name=Logo,json=logo,proto3" json:"logo,omitempty"`
	IsMultipleBills   int32                    `protobuf:"varint,16,opt,name=IsMultipleBills,json=is_multiple_bills,proto3" json:"is_multiple_bills,omitempty"`
	IsCde             int32                    `protobuf:"varint,17,opt,name=IsCde,json=is_cde,proto3" json:"is_cde,omitempty"`
	IsAsync           int32                    `protobuf:"varint,18,opt,name=IsAsync,json=is_async,proto3" json:"is_async,omitempty"`
	PartnerID         int32                    `protobuf:"varint,19,opt,name=PartnerID,json=partner_id,proto3" json:"partner_id,omitempty"`
	FieldList         []*BPBillerListFieldList `protobuf:"bytes,21,rep,name=FieldList,json=field_list,proto3" json:"field_list,omitempty"`
}

func (x *BPBillerListResult) Reset() {
	*x = BPBillerListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPBillerListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPBillerListResult) ProtoMessage() {}

func (x *BPBillerListResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPBillerListResult.ProtoReflect.Descriptor instead.
func (*BPBillerListResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{13}
}

func (x *BPBillerListResult) GetBillerTag() string {
	if x != nil {
		return x.BillerTag
	}
	return ""
}

func (x *BPBillerListResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BPBillerListResult) GetFirstField() string {
	if x != nil {
		return x.FirstField
	}
	return ""
}

func (x *BPBillerListResult) GetFirstFieldFormat() string {
	if x != nil {
		return x.FirstFieldFormat
	}
	return ""
}

func (x *BPBillerListResult) GetFirstFieldWidth() string {
	if x != nil {
		return x.FirstFieldWidth
	}
	return ""
}

func (x *BPBillerListResult) GetSecondField() string {
	if x != nil {
		return x.SecondField
	}
	return ""
}

func (x *BPBillerListResult) GetSecondFieldFormat() string {
	if x != nil {
		return x.SecondFieldFormat
	}
	return ""
}

func (x *BPBillerListResult) GetSecondFieldWidth() string {
	if x != nil {
		return x.SecondFieldWidth
	}
	return ""
}

func (x *BPBillerListResult) GetServiceCharge() int32 {
	if x != nil {
		return x.ServiceCharge
	}
	return 0
}

func (x *BPBillerListResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BPBillerListResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BPBillerListResult) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *BPBillerListResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BPBillerListResult) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *BPBillerListResult) GetIsMultipleBills() int32 {
	if x != nil {
		return x.IsMultipleBills
	}
	return 0
}

func (x *BPBillerListResult) GetIsCde() int32 {
	if x != nil {
		return x.IsCde
	}
	return 0
}

func (x *BPBillerListResult) GetIsAsync() int32 {
	if x != nil {
		return x.IsAsync
	}
	return 0
}

func (x *BPBillerListResult) GetPartnerID() int32 {
	if x != nil {
		return x.PartnerID
	}
	return 0
}

func (x *BPBillerListResult) GetFieldList() []*BPBillerListFieldList {
	if x != nil {
		return x.FieldList
	}
	return nil
}

type BPBillerListFieldList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string               `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Type        string               `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Label       string               `protobuf:"bytes,3,opt,name=Label,json=label,proto3" json:"label,omitempty"`
	Order       int32                `protobuf:"varint,4,opt,name=Order,json=order,proto3" json:"order,omitempty"`
	Rules       []*BPBillerListRules `protobuf:"bytes,5,rep,name=Rules,json=rules,proto3" json:"rules,omitempty"`
	Description string               `protobuf:"bytes,6,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	Placeholder string               `protobuf:"bytes,7,opt,name=Placeholder,json=placeholder,proto3" json:"placeholder,omitempty"`
}

func (x *BPBillerListFieldList) Reset() {
	*x = BPBillerListFieldList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPBillerListFieldList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPBillerListFieldList) ProtoMessage() {}

func (x *BPBillerListFieldList) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPBillerListFieldList.ProtoReflect.Descriptor instead.
func (*BPBillerListFieldList) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{14}
}

func (x *BPBillerListFieldList) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BPBillerListFieldList) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BPBillerListFieldList) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BPBillerListFieldList) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *BPBillerListFieldList) GetRules() []*BPBillerListRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *BPBillerListFieldList) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BPBillerListFieldList) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

type BPBillerListRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=Value,json=value,proto3" json:"value,omitempty"`
	Format  string `protobuf:"bytes,4,opt,name=Format,json=format,proto3" json:"format,omitempty"`
	Message string `protobuf:"bytes,5,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Options string `protobuf:"bytes,6,opt,name=Options,json=options,proto3" json:"options,omitempty"`
}

func (x *BPBillerListRules) Reset() {
	*x = BPBillerListRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPBillerListRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPBillerListRules) ProtoMessage() {}

func (x *BPBillerListRules) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPBillerListRules.ProtoReflect.Descriptor instead.
func (*BPBillerListRules) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{15}
}

func (x *BPBillerListRules) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BPBillerListRules) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BPBillerListRules) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BPBillerListRules) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *BPBillerListRules) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPBillerListRules) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

type BPBillerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  []*BPBillerListResult `protobuf:"bytes,3,rep,name=Result,json=result,proto3" json:"result,omitempty"`
	RemcoID int32                 `protobuf:"varint,4,opt,name=RemcoID,json=remco_id,proto3" json:"remco_id,omitempty"`
}

func (x *BPBillerListResponse) Reset() {
	*x = BPBillerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPBillerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPBillerListResponse) ProtoMessage() {}

func (x *BPBillerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPBillerListResponse.ProtoReflect.Descriptor instead.
func (*BPBillerListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{16}
}

func (x *BPBillerListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BPBillerListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BPBillerListResponse) GetResult() []*BPBillerListResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BPBillerListResponse) GetRemcoID() int32 {
	if x != nil {
		return x.RemcoID
	}
	return 0
}

type BillsPaymentTransactListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From            string       `protobuf:"bytes,1,opt,name=From,json=from,proto3" json:"from,omitempty"`
	Until           string       `protobuf:"bytes,2,opt,name=Until,json=until,proto3" json:"until,omitempty"`
	Limit           int32        `protobuf:"varint,3,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
	Offset          int32        `protobuf:"varint,4,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
	SortOrder       SortOrder    `protobuf:"varint,5,opt,name=SortOrder,json=sort_order,proto3,enum=bills_payment.SortOrder" json:"sort_order,omitempty"`
	SortByColumn    SortByColumn `protobuf:"varint,6,opt,name=SortByColumn,json=sort_by_column,proto3,enum=bills_payment.SortByColumn" json:"sort_by_column,omitempty"`
	ReferenceNumber string       `protobuf:"bytes,7,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	ExcludePartners []string     `protobuf:"bytes,8,rep,name=ExcludePartners,json=exclude_partner,proto3" json:"exclude_partner,omitempty"`
	OrgID           string       `protobuf:"bytes,9,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
}

func (x *BillsPaymentTransactListRequest) Reset() {
	*x = BillsPaymentTransactListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillsPaymentTransactListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillsPaymentTransactListRequest) ProtoMessage() {}

func (x *BillsPaymentTransactListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillsPaymentTransactListRequest.ProtoReflect.Descriptor instead.
func (*BillsPaymentTransactListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{17}
}

func (x *BillsPaymentTransactListRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *BillsPaymentTransactListRequest) GetUntil() string {
	if x != nil {
		return x.Until
	}
	return ""
}

func (x *BillsPaymentTransactListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BillsPaymentTransactListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BillsPaymentTransactListRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_DESC
}

func (x *BillsPaymentTransactListRequest) GetSortByColumn() SortByColumn {
	if x != nil {
		return x.SortByColumn
	}
	return SortByColumn_OmitSortByColumn
}

func (x *BillsPaymentTransactListRequest) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *BillsPaymentTransactListRequest) GetExcludePartners() []string {
	if x != nil {
		return x.ExcludePartners
	}
	return nil
}

func (x *BillsPaymentTransactListRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type BillsPaymentTransactListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next          int32           `protobuf:"varint,1,opt,name=Next,json=next,proto3" json:"next,omitempty"`
	BillsPayments []*BillsPayment `protobuf:"bytes,2,rep,name=BillsPayments,json=bills_payments,proto3" json:"bills_payments,omitempty"`
	Total         int32           `protobuf:"varint,3,opt,name=Total,json=total,proto3" json:"total,omitempty"`
}

func (x *BillsPaymentTransactListResponse) Reset() {
	*x = BillsPaymentTransactListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillsPaymentTransactListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillsPaymentTransactListResponse) ProtoMessage() {}

func (x *BillsPaymentTransactListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillsPaymentTransactListResponse.ProtoReflect.Descriptor instead.
func (*BillsPaymentTransactListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{18}
}

func (x *BillsPaymentTransactListResponse) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *BillsPaymentTransactListResponse) GetBillsPayments() []*BillsPayment {
	if x != nil {
		return x.BillsPayments
	}
	return nil
}

func (x *BillsPaymentTransactListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monetary amount in the smallest currency denomination.  Example: USD $10.25 => "1025".
	Amount string `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Currency code using ISO-4217 3-letter codes.
	Currency string `protobuf:"bytes,2,opt,name=Currency,json=currency,proto3" json:"currency,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{19}
}

func (x *Amount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Amount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type BillsPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceNumber          string                 `protobuf:"bytes,1,opt,name=ReferenceNumber,json=reference_number,proto3" json:"reference_number,omitempty"`
	Partner                  string                 `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	TotalAmount              *Amount                `protobuf:"bytes,3,opt,name=TotalAmount,json=total_amount,proto3" json:"total_amount,omitempty"`
	TransactFee              *Amount                `protobuf:"bytes,4,opt,name=TransactFee,json=transact_fee,proto3" json:"transact_fee,omitempty"`
	TransactCommission       *Amount                `protobuf:"bytes,5,opt,name=TransactCommission,json=transact_commission,proto3" json:"transact_commission,omitempty"`
	TransactionCompletedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=TransactionCompletedTime,json=transaction_completed_time,proto3" json:"transaction_completed_time,omitempty"`
}

func (x *BillsPayment) Reset() {
	*x = BillsPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillsPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillsPayment) ProtoMessage() {}

func (x *BillsPayment) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillsPayment.ProtoReflect.Descriptor instead.
func (*BillsPayment) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP(), []int{20}
}

func (x *BillsPayment) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *BillsPayment) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *BillsPayment) GetTotalAmount() *Amount {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *BillsPayment) GetTransactFee() *Amount {
	if x != nil {
		return x.TransactFee
	}
	return nil
}

func (x *BillsPayment) GetTransactCommission() *Amount {
	if x != nil {
		return x.TransactCommission
	}
	return nil
}

func (x *BillsPayment) GetTransactionCompletedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionCompletedTime
	}
	return nil
}

var File_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDesc = []byte{
	0x0a, 0x33, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x73, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x0d, 0x0a, 0x11, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x15, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x43, 0x6f, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x63, 0x6f, 0x79,
	0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x12,
	0x23, 0x0a, 0x06, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x69, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x05, 0x54, 0x70, 0x61, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x74, 0x70, 0x61,
	0x5f, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x78, 0x6e, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74,
	0x78, 0x6e, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x3a, 0xfe, 0x01, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x92, 0x41, 0xf4, 0x01, 0x0a, 0xf1, 0x01, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0xd2, 0x01, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a,
	0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0xd2, 0x01, 0x08, 0x74, 0x72, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x03, 0x63, 0x6f,
	0x79, 0xd2, 0x01, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0b, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xd2, 0x01, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xd2, 0x01, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0xd2, 0x01, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x95, 0x03, 0x0a, 0x13,
	0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x54,
	0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xa8, 0x05, 0x0a, 0x10, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x0f, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52, 0x4c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x11, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xb8, 0x02, 0x0a, 0x18, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x35, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x3a, 0x15, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0xa4, 0x02,
	0x0a, 0x19, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x63,
	0x6f, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xb4, 0x05, 0x0a, 0x17, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x0f, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x06, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x90, 0x01, 0x0a, 0x18,
	0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8a,
	0x05, 0x0a, 0x11, 0x42, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x12,
	0x2a, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x2f, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x3a, 0x3c, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x33, 0x0a, 0x31, 0xd2, 0x01, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0xd2, 0x01, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x67, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x96, 0x02, 0x0a, 0x12,
	0x42, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x63,
	0x6f, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xbf, 0x03, 0x0a, 0x10, 0x42, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x37, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x05, 0x52, 0x65, 0x66, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x72, 0x65, 0x66, 0x6e, 0x6f,
	0x12, 0x20, 0x0a, 0x05, 0x54, 0x78, 0x6e, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x78, 0x6e,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x52, 0x0a, 0x13, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x3a, 0x15, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x0c, 0x0a, 0x0a,
	0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x92, 0x07, 0x0a, 0x12, 0x42,
	0x50, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x36, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4c, 0x6f, 0x67,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x36, 0x0a, 0x0f, 0x49, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x05, 0x49, 0x73, 0x43, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x69, 0x73,
	0x5f, 0x63, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x29, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xbf, 0x02, 0x0a, 0x15, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x24, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x45, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x63, 0x6f,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe3, 0x03, 0x0a, 0x1f, 0x42, 0x69, 0x6c, 0x6c, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x3a, 0x14, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41,
	0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a,
	0x20, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x75, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x3a, 0x1f, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0xb9, 0x03, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x52, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x64, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x2a,
	0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x04, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41, 0x53, 0x43,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xae, 0x01, 0x0a, 0x0c, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x10, 0x4f,
	0x6d, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13,
	0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x10, 0x05, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xd9, 0x11, 0x0a, 0x13,
	0x42, 0x69, 0x6c, 0x6c, 0x73, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x95, 0x03, 0x0a, 0x0a, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x12, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0x8e, 0x02, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x1a, 0x16, 0x42, 0x69, 0x6c, 0x6c,
	0x73, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x53, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x31, 0x0a,
	0x2f, 0x1a, 0x2d, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x50,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x60, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x12, 0x3d, 0x0a, 0x3b, 0x4a, 0x39, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xd0, 0x03, 0x0a, 0x11,
	0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x12, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xad,
	0x02, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x20, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x1a,
	0x1e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x20, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x4a, 0x61, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5a, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x38, 0x0a, 0x36, 0x1a, 0x34,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x50, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x68, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x61, 0x0a, 0x18, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x45, 0x0a, 0x43, 0x4a, 0x41, 0x7b, 0x20, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x20, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c,
	0x6c, 0x73, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0x95,
	0x03, 0x0a, 0x0a, 0x42, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xbd, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8e, 0x02, 0x0a,
	0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x42,
	0x69, 0x6c, 0x6c, 0x73, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x20, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a,
	0x5a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x53, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x31, 0x0a, 0x2f, 0x1a, 0x2d, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c,
	0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x60, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x59, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x3d,
	0x0a, 0x3b, 0x4a, 0x39, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30,
	0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x42,
	0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c,
	0x73, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0xaf, 0x03, 0x0a, 0x0c, 0x42, 0x50, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x50, 0x42, 0x69,
	0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd1, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x99, 0x02, 0x0a, 0x0c, 0x42,
	0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x42, 0x69, 0x6c,
	0x6c, 0x73, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x65,
	0x72, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x19, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x20, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x4a, 0x5c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x55, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x33, 0x0a, 0x31,
	0x1a, 0x2f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x50, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x63, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x5c, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x12, 0x40, 0x0a, 0x3e, 0x4a, 0x3c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x87, 0x04, 0x0a, 0x18, 0x42, 0x69, 0x6c,
	0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xd7, 0x02, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x47, 0x65, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x1a, 0x26, 0x47, 0x65, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x42, 0x69, 0x6c, 0x6c,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x68, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x61, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x3f, 0x0a, 0x3d, 0x1a, 0x3b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x63, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x5c, 0x0a, 0x18,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x40, 0x0a, 0x3e, 0x4a, 0x3c, 0x7b, 0x20,
	0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x2d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00,
	0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x52, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x37, 0x62,
	0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67,
	0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x73,
	0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8,
	0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 21)
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_goTypes   = []interface{}{
		(SortOrder)(0),                           // 0: bills_payment.SortOrder
		(SortByColumn)(0),                        // 1: bills_payment.SortByColumn
		(*BPTransactRequest)(nil),                // 2: bills_payment.BPTransactRequest
		(*BPTransactOtherInfo)(nil),              // 3: bills_payment.BPTransactOtherInfo
		(*BPTransactResponse)(nil),               // 4: bills_payment.BPTransactResponse
		(*BPTransactResult)(nil),                 // 5: bills_payment.BPTransactResult
		(*Details)(nil),                          // 6: bills_payment.Details
		(*BPTransactInquireRequest)(nil),         // 7: bills_payment.BPTransactInquireRequest
		(*BPTransactInquireResponse)(nil),        // 8: bills_payment.BPTransactInquireResponse
		(*BPTransactInquireResult)(nil),          // 9: bills_payment.BPTransactInquireResult
		(*BPTransactInquireMessage)(nil),         // 10: bills_payment.BPTransactInquireMessage
		(*BPValidateRequest)(nil),                // 11: bills_payment.BPValidateRequest
		(*BPValidateResponse)(nil),               // 12: bills_payment.BPValidateResponse
		(*BPValidateResult)(nil),                 // 13: bills_payment.BPValidateResult
		(*BPBillerListRequest)(nil),              // 14: bills_payment.BPBillerListRequest
		(*BPBillerListResult)(nil),               // 15: bills_payment.BPBillerListResult
		(*BPBillerListFieldList)(nil),            // 16: bills_payment.BPBillerListFieldList
		(*BPBillerListRules)(nil),                // 17: bills_payment.BPBillerListRules
		(*BPBillerListResponse)(nil),             // 18: bills_payment.BPBillerListResponse
		(*BillsPaymentTransactListRequest)(nil),  // 19: bills_payment.BillsPaymentTransactListRequest
		(*BillsPaymentTransactListResponse)(nil), // 20: bills_payment.BillsPaymentTransactListResponse
		(*Amount)(nil),                           // 21: bills_payment.Amount
		(*BillsPayment)(nil),                     // 22: bills_payment.BillsPayment
		(*timestamppb.Timestamp)(nil),            // 23: google.protobuf.Timestamp
	}
)

var file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_depIdxs = []int32{
	3,  // 0: bills_payment.BPTransactRequest.OtherInfo:type_name -> bills_payment.BPTransactOtherInfo
	5,  // 1: bills_payment.BPTransactResponse.Result:type_name -> bills_payment.BPTransactResult
	6,  // 2: bills_payment.BPTransactResult.Details:type_name -> bills_payment.Details
	9,  // 3: bills_payment.BPTransactInquireResponse.Result:type_name -> bills_payment.BPTransactInquireResult
	10, // 4: bills_payment.BPTransactInquireResult.Message:type_name -> bills_payment.BPTransactInquireMessage
	6,  // 5: bills_payment.BPTransactInquireResult.Details:type_name -> bills_payment.Details
	3,  // 6: bills_payment.BPValidateRequest.OtherInfo:type_name -> bills_payment.BPTransactOtherInfo
	13, // 7: bills_payment.BPValidateResponse.Result:type_name -> bills_payment.BPValidateResult
	6,  // 8: bills_payment.BPValidateResult.Details:type_name -> bills_payment.Details
	6,  // 9: bills_payment.BPValidateResult.Meta:type_name -> bills_payment.Details
	16, // 10: bills_payment.BPBillerListResult.FieldList:type_name -> bills_payment.BPBillerListFieldList
	17, // 11: bills_payment.BPBillerListFieldList.Rules:type_name -> bills_payment.BPBillerListRules
	15, // 12: bills_payment.BPBillerListResponse.Result:type_name -> bills_payment.BPBillerListResult
	0,  // 13: bills_payment.BillsPaymentTransactListRequest.SortOrder:type_name -> bills_payment.SortOrder
	1,  // 14: bills_payment.BillsPaymentTransactListRequest.SortByColumn:type_name -> bills_payment.SortByColumn
	22, // 15: bills_payment.BillsPaymentTransactListResponse.BillsPayments:type_name -> bills_payment.BillsPayment
	21, // 16: bills_payment.BillsPayment.TotalAmount:type_name -> bills_payment.Amount
	21, // 17: bills_payment.BillsPayment.TransactFee:type_name -> bills_payment.Amount
	21, // 18: bills_payment.BillsPayment.TransactCommission:type_name -> bills_payment.Amount
	23, // 19: bills_payment.BillsPayment.TransactionCompletedTime:type_name -> google.protobuf.Timestamp
	2,  // 20: bills_payment.BillspaymentService.BPTransact:input_type -> bills_payment.BPTransactRequest
	7,  // 21: bills_payment.BillspaymentService.BPTransactInquire:input_type -> bills_payment.BPTransactInquireRequest
	11, // 22: bills_payment.BillspaymentService.BPValidate:input_type -> bills_payment.BPValidateRequest
	14, // 23: bills_payment.BillspaymentService.BPBillerList:input_type -> bills_payment.BPBillerListRequest
	19, // 24: bills_payment.BillspaymentService.BillsPaymentTransactList:input_type -> bills_payment.BillsPaymentTransactListRequest
	4,  // 25: bills_payment.BillspaymentService.BPTransact:output_type -> bills_payment.BPTransactResponse
	8,  // 26: bills_payment.BillspaymentService.BPTransactInquire:output_type -> bills_payment.BPTransactInquireResponse
	12, // 27: bills_payment.BillspaymentService.BPValidate:output_type -> bills_payment.BPValidateResponse
	18, // 28: bills_payment.BillspaymentService.BPBillerList:output_type -> bills_payment.BPBillerListResponse
	20, // 29: bills_payment.BillspaymentService.BillsPaymentTransactList:output_type -> bills_payment.BillsPaymentTransactListResponse
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactOtherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactInquireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactInquireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactInquireResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPTransactInquireMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPValidateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPBillerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPBillerListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPBillerListFieldList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPBillerListRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPBillerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillsPaymentTransactListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillsPaymentTransactListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillsPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_bills_payment_all_proto_depIdxs = nil
}
