package serviceaccount // proto "brankas.rbac.v1.serviceaccount"

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

type AuthType int32

const (
	OAuth2 AuthType = iota
	APIKey
)

type CreateAccountRequest struct {
	// Name is the friendly name of the service account to be created
	Name string `pb:"1" json:"name"`
	// Environment is the valid environment for the key.
	Env string `pb:"2" json:"env"`
	// Role is the assigned permissions role.
	Role string `pb:"3" json:"role"`
	// AuthType is the authentication method to be used.
	AuthType AuthType `pb:"4" json:"auth_type"`
}

type CreateAccountResponse struct {
	// OAuth2 Client ID.
	ClientID string `pb:"1" json:"client_id"`
	// Secret will contain the secret value.
	// Client Secret for OAuth2 service accounts.
	// API Key for APIKey service accounts.
	Secret string `pb:"2" json:"secret"`
}

type ListAccountsRequest struct{}

type ServiceAccount struct {
	Name     string    `pb:"3" json:"name"`
	Env      string    `pb:"1" json:"env"`
	ClientID string    `pb:"2" json:"client_id"`
	Creator  string    `pb:"4" json:"creator"`
	Created  time.Time `pb:"5" json:"created"`
	Disabled time.Time `pb:"6" json:"disabled"`
}

type ListAccountsResponse struct {
	Accounts []ServiceAccount `pb:"1" json:"accounts"`
}

type DisableAccountRequest struct {
	Name string `pb:"1" json:"name"`
}

type DisableAccountResponse struct{}

type ValidateAccountRequest struct {
	ClientID  string `pb:"1" json:"client_id"`
	Operation string `pb:"2" json:"operation"`
	Resource  string `pb:"3" json:"resource"`
}

type ValidateAccountResponse struct {
	Environment string `pb:"1" json:"environment"`
	ClientName  string `pb:"2" json:"client_name"`
	OrgID       string `pb:"3" json:"org_id"`
}

type ValidateAPIKeyRequest struct {
	// APIKey is used for authentication.
	APIKey string `pb:"1" json:"api_key"`
	// Endpoint is the endpoint name.
	Endpoint string `pb:"2" json:"endpoint"`
}

type ValidateAPIKeyResponse struct {
	// OrgID is unique identifier of the org
	OrgID string `pb:"1" json:"org_id"`
	// Environment is the associated environment where the key is valid for use.
	Env string `pb:"2" json:"env"`
}

type SvcAccountService interface {
	// Create Service Account entry for platform.
	//
	// +gunk http.Match{
	//         Method: "POST",
	//         Path:   "/v1/serviceaccount",
	//         Body:   "*",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Service Account"},
	//         Description: "Create a new service account.",
	//         Summary:     "Create service account",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/serviceaccountCreateAccountResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.  Platform must be activated to create production service accounts.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//         },
	// }
	CreateAccount(CreateAccountRequest) CreateAccountResponse

	// List all service accounts.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/serviceaccount",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Service Account"},
	//         Description: "List all created service accounts.",
	//         Summary:     "List all service accounts.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/serviceaccountListAccountsResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//         },
	// }
	ListAccounts(ListAccountsRequest) ListAccountsResponse

	// Disable a service account.  Account is permanently disabled.
	//
	// +gunk http.Match{
	//         Method: "DELETE",
	//         Path:   "/v1/serviceaccount/{Name}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Service Account"},
	//         Description: "Permanently Disable service account.",
	//         Summary:     "Disable service account.",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/serviceaccountDisableAccountResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when service account is not found.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//         },
	// }
	DisableAccount(DisableAccountRequest) DisableAccountResponse
}

type ValidationService interface {
	// Validation internally for use in authentication.

	// Validate service client.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/serviceaccount/{ClientID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Service Account"},
	//         Description: "Validate service account.",
	//         Summary:     "Validate service account",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/serviceaccountValidateAccountResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when service account is not found.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/rpcStatus",
	//                         }},
	//                 },
	//         },
	// }
	ValidateAccount(ValidateAccountRequest) ValidateAccountResponse
}
