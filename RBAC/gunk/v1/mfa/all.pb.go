// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/rbac/gunk/v1/mfa/all.proto

package mfa

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MFA int32

const (
	MFA_PASS     MFA = 0
	MFA_TOTP     MFA = 1
	MFA_CODE     MFA = 2
	MFA_SMS      MFA = 3
	MFA_RECOVERY MFA = 4
	MFA_EMAIL    MFA = 5
)

// Enum value maps for MFA.
var (
	MFA_name = map[int32]string{
		0: "PASS",
		1: "TOTP",
		2: "CODE",
		3: "SMS",
		4: "RECOVERY",
		5: "EMAIL",
	}
	MFA_value = map[string]int32{
		"PASS":     0,
		"TOTP":     1,
		"CODE":     2,
		"SMS":      3,
		"RECOVERY": 4,
		"EMAIL":    5,
	}
)

func (x MFA) Enum() *MFA {
	p := new(MFA)
	*p = x
	return p
}

func (x MFA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MFA) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_enumTypes[0].Descriptor()
}

func (MFA) Type() protoreflect.EnumType {
	return &file_brank_as_rbac_gunk_v1_mfa_all_proto_enumTypes[0]
}

func (x MFA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MFA.Descriptor instead.
func (MFA) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{0}
}

type GetRegisteredMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
}

func (x *GetRegisteredMFARequest) Reset() {
	*x = GetRegisteredMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredMFARequest) ProtoMessage() {}

func (x *GetRegisteredMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredMFARequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{0}
}

func (x *GetRegisteredMFARequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetRegisteredMFAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string      `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	MFA    []*MFAEntry `protobuf:"bytes,2,rep,name=MFA,json=mfa,proto3" json:"mfa,omitempty"`
}

func (x *GetRegisteredMFAResponse) Reset() {
	*x = GetRegisteredMFAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredMFAResponse) ProtoMessage() {}

func (x *GetRegisteredMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredMFAResponse.ProtoReflect.Descriptor instead.
func (*GetRegisteredMFAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{1}
}

func (x *GetRegisteredMFAResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetRegisteredMFAResponse) GetMFA() []*MFAEntry {
	if x != nil {
		return x.MFA
	}
	return nil
}

type MFAEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Type     MFA                    `protobuf:"varint,2,opt,name=Type,json=type,proto3,enum=mfa.MFA" json:"type,omitempty"`
	Source   string                 `protobuf:"bytes,3,opt,name=Source,json=source,proto3" json:"source,omitempty"`
	Enabled  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
	Disabled *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Disabled,json=disabled,proto3" json:"disabled,omitempty"`
	Updated  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *MFAEntry) Reset() {
	*x = MFAEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MFAEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MFAEntry) ProtoMessage() {}

func (x *MFAEntry) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MFAEntry.ProtoReflect.Descriptor instead.
func (*MFAEntry) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{2}
}

func (x *MFAEntry) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MFAEntry) GetType() MFA {
	if x != nil {
		return x.Type
	}
	return MFA_PASS
}

func (x *MFAEntry) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MFAEntry) GetEnabled() *timestamppb.Timestamp {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *MFAEntry) GetDisabled() *timestamppb.Timestamp {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *MFAEntry) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type EnableMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Type   MFA    `protobuf:"varint,2,opt,name=Type,json=type,proto3,enum=mfa.MFA" json:"type,omitempty"`
	Source string `protobuf:"bytes,3,opt,name=Source,json=source,proto3" json:"source,omitempty"`
}

func (x *EnableMFARequest) Reset() {
	*x = EnableMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMFARequest) ProtoMessage() {}

func (x *EnableMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMFARequest.ProtoReflect.Descriptor instead.
func (*EnableMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{3}
}

func (x *EnableMFARequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *EnableMFARequest) GetType() MFA {
	if x != nil {
		return x.Type
	}
	return MFA_PASS
}

func (x *EnableMFARequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type EnableMFAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string   `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	InitializeCode string   `protobuf:"bytes,2,opt,name=InitializeCode,json=initialize_code,proto3" json:"initialize_code,omitempty"`
	EventID        string   `protobuf:"bytes,3,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
	Codes          []string `protobuf:"bytes,4,rep,name=Codes,json=codes,proto3" json:"codes,omitempty"`
}

func (x *EnableMFAResponse) Reset() {
	*x = EnableMFAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMFAResponse) ProtoMessage() {}

func (x *EnableMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMFAResponse.ProtoReflect.Descriptor instead.
func (*EnableMFAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{4}
}

func (x *EnableMFAResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *EnableMFAResponse) GetInitializeCode() string {
	if x != nil {
		return x.InitializeCode
	}
	return ""
}

func (x *EnableMFAResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *EnableMFAResponse) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type DisableMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	MFAID  string `protobuf:"bytes,2,opt,name=MFAID,json=mfa_id,proto3" json:"mfa_id,omitempty"`
}

func (x *DisableMFARequest) Reset() {
	*x = DisableMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMFARequest) ProtoMessage() {}

func (x *DisableMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMFARequest.ProtoReflect.Descriptor instead.
func (*DisableMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{5}
}

func (x *DisableMFARequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DisableMFARequest) GetMFAID() string {
	if x != nil {
		return x.MFAID
	}
	return ""
}

type DisableMFAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disabled *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Disabled,json=disabled,proto3" json:"disabled,omitempty"`
}

func (x *DisableMFAResponse) Reset() {
	*x = DisableMFAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMFAResponse) ProtoMessage() {}

func (x *DisableMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMFAResponse.ProtoReflect.Descriptor instead.
func (*DisableMFAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{6}
}

func (x *DisableMFAResponse) GetDisabled() *timestamppb.Timestamp {
	if x != nil {
		return x.Disabled
	}
	return nil
}

type InitiateMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Type        MFA    `protobuf:"varint,2,opt,name=Type,json=type,proto3,enum=mfa.MFA" json:"type,omitempty"`
	SourceID    string `protobuf:"bytes,3,opt,name=SourceID,json=source_id,proto3" json:"source_id,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *InitiateMFARequest) Reset() {
	*x = InitiateMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateMFARequest) ProtoMessage() {}

func (x *InitiateMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateMFARequest.ProtoReflect.Descriptor instead.
func (*InitiateMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{7}
}

func (x *InitiateMFARequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *InitiateMFARequest) GetType() MFA {
	if x != nil {
		return x.Type
	}
	return MFA_PASS
}

func (x *InitiateMFARequest) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *InitiateMFARequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type InitiateMFAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID string      `protobuf:"bytes,1,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
	Sources []*MFAEntry `protobuf:"bytes,2,rep,name=Sources,json=sources,proto3" json:"sources,omitempty"`
	Value   string      `protobuf:"bytes,3,opt,name=Value,json=value,proto3" json:"value,omitempty"`
}

func (x *InitiateMFAResponse) Reset() {
	*x = InitiateMFAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateMFAResponse) ProtoMessage() {}

func (x *InitiateMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateMFAResponse.ProtoReflect.Descriptor instead.
func (*InitiateMFAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{8}
}

func (x *InitiateMFAResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *InitiateMFAResponse) GetSources() []*MFAEntry {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *InitiateMFAResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RetryMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	EventID string `protobuf:"bytes,4,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
}

func (x *RetryMFARequest) Reset() {
	*x = RetryMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryMFARequest) ProtoMessage() {}

func (x *RetryMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryMFARequest.ProtoReflect.Descriptor instead.
func (*RetryMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{9}
}

func (x *RetryMFARequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RetryMFARequest) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

type RetryMFAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID string      `protobuf:"bytes,1,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
	Sources []*MFAEntry `protobuf:"bytes,2,rep,name=Sources,json=sources,proto3" json:"sources,omitempty"`
	Value   string      `protobuf:"bytes,3,opt,name=Value,json=value,proto3" json:"value,omitempty"`
	Attempt int32       `protobuf:"varint,4,opt,name=Attempt,json=attempt,proto3" json:"attempt,omitempty"`
}

func (x *RetryMFAResponse) Reset() {
	*x = RetryMFAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryMFAResponse) ProtoMessage() {}

func (x *RetryMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryMFAResponse.ProtoReflect.Descriptor instead.
func (*RetryMFAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{10}
}

func (x *RetryMFAResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *RetryMFAResponse) GetSources() []*MFAEntry {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *RetryMFAResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RetryMFAResponse) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

type ExternalMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID  string `protobuf:"bytes,1,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=Value,json=value,proto3" json:"value,omitempty"`
	SourceID string `protobuf:"bytes,3,opt,name=SourceID,json=source_id,proto3" json:"source_id,omitempty"`
}

func (x *ExternalMFARequest) Reset() {
	*x = ExternalMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalMFARequest) ProtoMessage() {}

func (x *ExternalMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalMFARequest.ProtoReflect.Descriptor instead.
func (*ExternalMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{11}
}

func (x *ExternalMFARequest) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *ExternalMFARequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExternalMFARequest) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

type ExternalMFAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID string                 `protobuf:"bytes,1,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
	Updated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *ExternalMFAResponse) Reset() {
	*x = ExternalMFAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalMFAResponse) ProtoMessage() {}

func (x *ExternalMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalMFAResponse.ProtoReflect.Descriptor instead.
func (*ExternalMFAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{12}
}

func (x *ExternalMFAResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *ExternalMFAResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type ValidateMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Type    MFA    `protobuf:"varint,2,opt,name=Type,json=type,proto3,enum=mfa.MFA" json:"type,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=Token,json=token,proto3" json:"token,omitempty"`
	EventID string `protobuf:"bytes,4,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
}

func (x *ValidateMFARequest) Reset() {
	*x = ValidateMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateMFARequest) ProtoMessage() {}

func (x *ValidateMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateMFARequest.ProtoReflect.Descriptor instead.
func (*ValidateMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{13}
}

func (x *ValidateMFARequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ValidateMFARequest) GetType() MFA {
	if x != nil {
		return x.Type
	}
	return MFA_PASS
}

func (x *ValidateMFARequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ValidateMFARequest) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

type ValidateMFAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID    string                 `protobuf:"bytes,1,opt,name=EventID,json=event_id,proto3" json:"event_id,omitempty"`
	Validated  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Validated,json=validated,proto3" json:"validated,omitempty"`
	ExternalID string                 `protobuf:"bytes,3,opt,name=ExternalID,json=external_id,proto3" json:"external_id,omitempty"`
}

func (x *ValidateMFAResponse) Reset() {
	*x = ValidateMFAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateMFAResponse) ProtoMessage() {}

func (x *ValidateMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateMFAResponse.ProtoReflect.Descriptor instead.
func (*ValidateMFAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP(), []int{14}
}

func (x *ValidateMFAResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *ValidateMFAResponse) GetValidated() *timestamppb.Timestamp {
	if x != nil {
		return x.Validated
	}
	return nil
}

func (x *ValidateMFAResponse) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

var File_brank_as_rbac_gunk_v1_mfa_all_proto protoreflect.FileDescriptor

var file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDesc = []byte{
	0x0a, 0x23, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f,
	0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x66, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x74, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x03, 0x4d, 0x46, 0x41, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x66, 0x61, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc4, 0x02, 0x0a, 0x08, 0x4d, 0x46, 0x41, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08,
	0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x42, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8d,
	0x01, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb5,
	0x01, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x63, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x05, 0x4d, 0x46, 0x41, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6d, 0x66, 0x61,
	0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x60, 0x0a, 0x12, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc2, 0x01,
	0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46,
	0x41, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d,
	0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x07, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x46, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d,
	0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x2a, 0x61, 0x0a, 0x03, 0x4d, 0x46, 0x41, 0x12, 0x0c, 0x0a, 0x04, 0x50, 0x41,
	0x53, 0x53, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x54, 0x4f, 0x54, 0x50,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x03, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x10, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x04, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xee, 0x0a, 0x0a, 0x0a, 0x4d, 0x46, 0x41, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xce, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x46, 0x41, 0x12, 0x1c, 0x2e, 0x6d, 0x66, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x46,
	0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x46, 0x41, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xd6, 0x02, 0x0a, 0x03, 0x4d, 0x46, 0x41, 0x12, 0x08, 0x47, 0x65, 0x74, 0x20, 0x4d,
	0x46, 0x41, 0x2e, 0x1a, 0x39, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x2e, 0x4a, 0x56,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2d, 0x0a, 0x2b, 0x1a, 0x29, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x66, 0x61, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x46, 0x41, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x5a,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x53, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x1b, 0x0a,
	0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x7b, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xba, 0x03, 0x0a, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x46, 0x41, 0x12, 0x15, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x66,
	0x61, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf9, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd4, 0x02,
	0x0a, 0x03, 0x4d, 0x46, 0x41, 0x12, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x4d, 0x46,
	0x41, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x1a, 0x34, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x4d,
	0x46, 0x41, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x2e, 0x4a,
	0x4f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x48, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x26, 0x0a, 0x24, 0x1a, 0x22, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x66, 0x61, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a,
	0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x5a, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x53, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x7b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xcc, 0x03, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x46, 0x41, 0x12, 0x16, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x66, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x88, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd7, 0x02,
	0x0a, 0x03, 0x4d, 0x46, 0x41, 0x12, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x4d,
	0x46, 0x41, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x1a, 0x35, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6e,
	0x20, 0x4d, 0x46, 0x41, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44,
	0x2e, 0x4a, 0x50, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x49, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x27, 0x0a, 0x25, 0x1a, 0x23,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x66,
	0x61, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b,
	0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x5a, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x53, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x7b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x4d, 0x46, 0x41, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x32, 0x84, 0x0f, 0x0a, 0x0e, 0x4d, 0x46, 0x41, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd3, 0x03, 0x0a, 0x0b, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x12, 0x17, 0x2e, 0x6d, 0x66, 0x61,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x03,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xde, 0x02, 0x0a, 0x03, 0x4d, 0x46, 0x41, 0x12,
	0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x20, 0x4d, 0x46, 0x41, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x1a, 0x3b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x4d, 0x46, 0x41,
	0x2e, 0x4a, 0x51, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4a, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x28, 0x0a, 0x26, 0x1a, 0x24,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x66,
	0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12,
	0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x5a, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x53, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a,
	0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01,
	0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x7b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xc0, 0x03, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41,
	0x12, 0x17, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x46, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x66, 0x61, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf9, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xcb, 0x02,
	0x0a, 0x03, 0x4d, 0x46, 0x41, 0x12, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x4d, 0x46, 0x41, 0x2e, 0x1a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4d,
	0x46, 0x41, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x49, 0x44, 0x2e, 0x4a, 0x51, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4a, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x28, 0x0a,
	0x26, 0x1a, 0x24, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x66, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x5a, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x53, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x1b,
	0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x7b, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xc8, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x46, 0x41,
	0x12, 0x14, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x46, 0x41, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x03,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xdf, 0x02, 0x0a, 0x03, 0x4d, 0x46, 0x41, 0x12,
	0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x20, 0x4d, 0x46, 0x41, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x1a, 0x3f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x20, 0x4d, 0x46, 0x41, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x4d, 0x46,
	0x41, 0x2e, 0x4a, 0x51, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4a, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x28, 0x0a, 0x26, 0x1a,
	0x24, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x66, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x5a, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x53, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a,
	0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x7b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x28, 0x00, 0x30, 0x00, 0x12, 0x88,
	0x04, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x46, 0x41, 0x12, 0x17,
	0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x46, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc1, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x9b, 0x03, 0x0a, 0x03,
	0x4d, 0x46, 0x41, 0x12, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x4d, 0x46, 0x41, 0x2e, 0x1a, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x4d, 0x46, 0x41, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x28, 0x65, 0x73, 0x70, 0x20, 0x53, 0x4d, 0x53, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x2d, 0x6d,
	0x61, 0x69, 0x6c, 0x29, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x4a, 0x51, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4a, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x28, 0x0a, 0x26, 0x1a,
	0x24, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x66, 0x61, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x5a, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x53, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a,
	0x01, 0x2a, 0x32, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x7b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x38,
	0x48, 0x01, 0x50, 0x00, 0x5a, 0x1d, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72,
	0x62, 0x61, 0x63, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x3b,
	0x6d, 0x66, 0x61, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8,
	0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescOnce sync.Once
	file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescData = file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDesc
)

func file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescGZIP() []byte {
	file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescOnce.Do(func() {
		file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescData)
	})
	return file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDescData
}

var (
	file_brank_as_rbac_gunk_v1_mfa_all_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 15)
	file_brank_as_rbac_gunk_v1_mfa_all_proto_goTypes   = []interface{}{
		(MFA)(0),                         // 0: mfa.MFA
		(*GetRegisteredMFARequest)(nil),  // 1: mfa.GetRegisteredMFARequest
		(*GetRegisteredMFAResponse)(nil), // 2: mfa.GetRegisteredMFAResponse
		(*MFAEntry)(nil),                 // 3: mfa.MFAEntry
		(*EnableMFARequest)(nil),         // 4: mfa.EnableMFARequest
		(*EnableMFAResponse)(nil),        // 5: mfa.EnableMFAResponse
		(*DisableMFARequest)(nil),        // 6: mfa.DisableMFARequest
		(*DisableMFAResponse)(nil),       // 7: mfa.DisableMFAResponse
		(*InitiateMFARequest)(nil),       // 8: mfa.InitiateMFARequest
		(*InitiateMFAResponse)(nil),      // 9: mfa.InitiateMFAResponse
		(*RetryMFARequest)(nil),          // 10: mfa.RetryMFARequest
		(*RetryMFAResponse)(nil),         // 11: mfa.RetryMFAResponse
		(*ExternalMFARequest)(nil),       // 12: mfa.ExternalMFARequest
		(*ExternalMFAResponse)(nil),      // 13: mfa.ExternalMFAResponse
		(*ValidateMFARequest)(nil),       // 14: mfa.ValidateMFARequest
		(*ValidateMFAResponse)(nil),      // 15: mfa.ValidateMFAResponse
		(*timestamppb.Timestamp)(nil),    // 16: google.protobuf.Timestamp
	}
)

var file_brank_as_rbac_gunk_v1_mfa_all_proto_depIdxs = []int32{
	3,  // 0: mfa.GetRegisteredMFAResponse.MFA:type_name -> mfa.MFAEntry
	0,  // 1: mfa.MFAEntry.Type:type_name -> mfa.MFA
	16, // 2: mfa.MFAEntry.Enabled:type_name -> google.protobuf.Timestamp
	16, // 3: mfa.MFAEntry.Disabled:type_name -> google.protobuf.Timestamp
	16, // 4: mfa.MFAEntry.Updated:type_name -> google.protobuf.Timestamp
	0,  // 5: mfa.EnableMFARequest.Type:type_name -> mfa.MFA
	16, // 6: mfa.DisableMFAResponse.Disabled:type_name -> google.protobuf.Timestamp
	0,  // 7: mfa.InitiateMFARequest.Type:type_name -> mfa.MFA
	3,  // 8: mfa.InitiateMFAResponse.Sources:type_name -> mfa.MFAEntry
	3,  // 9: mfa.RetryMFAResponse.Sources:type_name -> mfa.MFAEntry
	16, // 10: mfa.ExternalMFAResponse.Updated:type_name -> google.protobuf.Timestamp
	0,  // 11: mfa.ValidateMFARequest.Type:type_name -> mfa.MFA
	16, // 12: mfa.ValidateMFAResponse.Validated:type_name -> google.protobuf.Timestamp
	1,  // 13: mfa.MFAService.GetRegisteredMFA:input_type -> mfa.GetRegisteredMFARequest
	4,  // 14: mfa.MFAService.EnableMFA:input_type -> mfa.EnableMFARequest
	6,  // 15: mfa.MFAService.DisableMFA:input_type -> mfa.DisableMFARequest
	8,  // 16: mfa.MFAAuthService.InitiateMFA:input_type -> mfa.InitiateMFARequest
	14, // 17: mfa.MFAAuthService.ValidateMFA:input_type -> mfa.ValidateMFARequest
	10, // 18: mfa.MFAAuthService.RetryMFA:input_type -> mfa.RetryMFARequest
	12, // 19: mfa.MFAAuthService.ExternalMFA:input_type -> mfa.ExternalMFARequest
	2,  // 20: mfa.MFAService.GetRegisteredMFA:output_type -> mfa.GetRegisteredMFAResponse
	5,  // 21: mfa.MFAService.EnableMFA:output_type -> mfa.EnableMFAResponse
	7,  // 22: mfa.MFAService.DisableMFA:output_type -> mfa.DisableMFAResponse
	9,  // 23: mfa.MFAAuthService.InitiateMFA:output_type -> mfa.InitiateMFAResponse
	15, // 24: mfa.MFAAuthService.ValidateMFA:output_type -> mfa.ValidateMFAResponse
	11, // 25: mfa.MFAAuthService.RetryMFA:output_type -> mfa.RetryMFAResponse
	13, // 26: mfa.MFAAuthService.ExternalMFA:output_type -> mfa.ExternalMFAResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_brank_as_rbac_gunk_v1_mfa_all_proto_init() }
func file_brank_as_rbac_gunk_v1_mfa_all_proto_init() {
	if File_brank_as_rbac_gunk_v1_mfa_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredMFAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MFAEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMFAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableMFAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateMFAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryMFAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalMFAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateMFAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_brank_as_rbac_gunk_v1_mfa_all_proto_goTypes,
		DependencyIndexes: file_brank_as_rbac_gunk_v1_mfa_all_proto_depIdxs,
		EnumInfos:         file_brank_as_rbac_gunk_v1_mfa_all_proto_enumTypes,
		MessageInfos:      file_brank_as_rbac_gunk_v1_mfa_all_proto_msgTypes,
	}.Build()
	File_brank_as_rbac_gunk_v1_mfa_all_proto = out.File
	file_brank_as_rbac_gunk_v1_mfa_all_proto_rawDesc = nil
	file_brank_as_rbac_gunk_v1_mfa_all_proto_goTypes = nil
	file_brank_as_rbac_gunk_v1_mfa_all_proto_depIdxs = nil
}
