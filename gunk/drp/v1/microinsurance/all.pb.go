// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/microinsurance/all.proto

package microinsurance

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortOrder int32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	SortOrder_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{0}
}

type SortByColumn int32

const (
	SortByColumn_OmitSortByColumn         SortByColumn = 0
	SortByColumn_TraceNumber              SortByColumn = 1
	SortByColumn_TrnStatus                SortByColumn = 2
	SortByColumn_Fee                      SortByColumn = 3
	SortByColumn_Commission               SortByColumn = 4
	SortByColumn_TotalAmount              SortByColumn = 5
	SortByColumn_TransactionCompletedTime SortByColumn = 6
)

// Enum value maps for SortByColumn.
var (
	SortByColumn_name = map[int32]string{
		0: "OmitSortByColumn",
		1: "TraceNumber",
		2: "TrnStatus",
		3: "Fee",
		4: "Commission",
		5: "TotalAmount",
		6: "TransactionCompletedTime",
	}
	SortByColumn_value = map[string]int32{
		"OmitSortByColumn":         0,
		"TraceNumber":              1,
		"TrnStatus":                2,
		"Fee":                      3,
		"Commission":               4,
		"TotalAmount":              5,
		"TransactionCompletedTime": 6,
	}
)

func (x SortByColumn) Enum() *SortByColumn {
	p := new(SortByColumn)
	*p = x
	return p
}

func (x SortByColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_enumTypes[1].Descriptor()
}

func (SortByColumn) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_enumTypes[1]
}

func (x SortByColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByColumn.Descriptor instead.
func (SortByColumn) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{1}
}

// TransactRequest ...
type TransactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coy              string    `protobuf:"bytes,1,opt,name=Coy,json=coy,proto3" json:"coy,omitempty"`
	LocationID       string    `protobuf:"bytes,2,opt,name=LocationID,json=location_id,proto3" json:"location_id,omitempty"`
	UserCode         string    `protobuf:"bytes,3,opt,name=UserCode,json=user_code,proto3" json:"user_code,omitempty"`
	TrxDate          string    `protobuf:"bytes,4,opt,name=TrxDate,json=trx_date,proto3" json:"trx_date,omitempty"`
	PromoAmount      float64   `protobuf:"fixed64,5,opt,name=PromoAmount,json=promo_amount,proto3" json:"promo_amount,omitempty"`
	PromoCode        string    `protobuf:"bytes,6,opt,name=PromoCode,json=promo_code,proto3" json:"promo_code,omitempty"`
	Amount           string    `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	CoverageCount    string    `protobuf:"bytes,8,opt,name=CoverageCount,json=coverage_count,proto3" json:"coverage_count,omitempty"`
	ProductCode      string    `protobuf:"bytes,9,opt,name=ProductCode,json=product_code,proto3" json:"product_code,omitempty"`
	ProcessingBranch string    `protobuf:"bytes,10,opt,name=ProcessingBranch,json=processing_branch,proto3" json:"processing_branch,omitempty"`
	ProcessedBy      string    `protobuf:"bytes,11,opt,name=ProcessedBy,json=processed_by,proto3" json:"processed_by,omitempty"`
	UserEmail        string    `protobuf:"bytes,12,opt,name=UserEmail,json=user_email,proto3" json:"user_email,omitempty"`
	LastName         string    `protobuf:"bytes,13,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	FirstName        string    `protobuf:"bytes,14,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	MiddleName       string    `protobuf:"bytes,15,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	Gender           string    `protobuf:"bytes,16,opt,name=Gender,json=gender,proto3" json:"gender,omitempty"`
	Birthdate        string    `protobuf:"bytes,17,opt,name=Birthdate,json=birthdate,proto3" json:"birthdate,omitempty"`
	MobileNumber     string    `protobuf:"bytes,18,opt,name=MobileNumber,json=mobile_number,proto3" json:"mobile_number,omitempty"`
	ProvinceCode     string    `protobuf:"bytes,19,opt,name=ProvinceCode,json=province_code,proto3" json:"province_code,omitempty"`
	CityCode         string    `protobuf:"bytes,20,opt,name=CityCode,json=city_code,proto3" json:"city_code,omitempty"`
	Address          string    `protobuf:"bytes,21,opt,name=Address,json=address,proto3" json:"address,omitempty"`
	MaritalStatus    string    `protobuf:"bytes,23,opt,name=MaritalStatus,json=marital_status,proto3" json:"marital_status,omitempty"`
	Occupation       string    `protobuf:"bytes,24,opt,name=Occupation,json=occupation,proto3" json:"occupation,omitempty"`
	CardNumber       string    `protobuf:"bytes,25,opt,name=CardNumber,json=card_number,proto3" json:"card_number,omitempty"`
	NumberUnits      string    `protobuf:"bytes,26,opt,name=NumberUnits,json=number_units,proto3" json:"number_units,omitempty"`
	Beneficiaries    []*Person `protobuf:"bytes,27,rep,name=Beneficiaries,json=beneficiaries,proto3" json:"beneficiaries,omitempty"`
	Dependents       []*Person `protobuf:"bytes,28,rep,name=Dependents,json=dependents,proto3" json:"dependents,omitempty"`
}

func (x *TransactRequest) Reset() {
	*x = TransactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactRequest) ProtoMessage() {}

func (x *TransactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactRequest.ProtoReflect.Descriptor instead.
func (*TransactRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{0}
}

func (x *TransactRequest) GetCoy() string {
	if x != nil {
		return x.Coy
	}
	return ""
}

func (x *TransactRequest) GetLocationID() string {
	if x != nil {
		return x.LocationID
	}
	return ""
}

func (x *TransactRequest) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *TransactRequest) GetTrxDate() string {
	if x != nil {
		return x.TrxDate
	}
	return ""
}

func (x *TransactRequest) GetPromoAmount() float64 {
	if x != nil {
		return x.PromoAmount
	}
	return 0
}

func (x *TransactRequest) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *TransactRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransactRequest) GetCoverageCount() string {
	if x != nil {
		return x.CoverageCount
	}
	return ""
}

func (x *TransactRequest) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TransactRequest) GetProcessingBranch() string {
	if x != nil {
		return x.ProcessingBranch
	}
	return ""
}

func (x *TransactRequest) GetProcessedBy() string {
	if x != nil {
		return x.ProcessedBy
	}
	return ""
}

func (x *TransactRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *TransactRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TransactRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TransactRequest) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *TransactRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *TransactRequest) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

func (x *TransactRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *TransactRequest) GetProvinceCode() string {
	if x != nil {
		return x.ProvinceCode
	}
	return ""
}

func (x *TransactRequest) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *TransactRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransactRequest) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *TransactRequest) GetOccupation() string {
	if x != nil {
		return x.Occupation
	}
	return ""
}

func (x *TransactRequest) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TransactRequest) GetNumberUnits() string {
	if x != nil {
		return x.NumberUnits
	}
	return ""
}

func (x *TransactRequest) GetBeneficiaries() []*Person {
	if x != nil {
		return x.Beneficiaries
	}
	return nil
}

func (x *TransactRequest) GetDependents() []*Person {
	if x != nil {
		return x.Dependents
	}
	return nil
}

// GetReprintRequest ...
type GetReprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceNumber string `protobuf:"bytes,1,opt,name=TraceNumber,json=trace_number,proto3" json:"trace_number,omitempty"`
}

func (x *GetReprintRequest) Reset() {
	*x = GetReprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReprintRequest) ProtoMessage() {}

func (x *GetReprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReprintRequest.ProtoReflect.Descriptor instead.
func (*GetReprintRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{1}
}

func (x *GetReprintRequest) GetTraceNumber() string {
	if x != nil {
		return x.TraceNumber
	}
	return ""
}

// RetryTransactionRequest ...
type RetryTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *RetryTransactionRequest) Reset() {
	*x = RetryTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTransactionRequest) ProtoMessage() {}

func (x *RetryTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTransactionRequest.ProtoReflect.Descriptor instead.
func (*RetryTransactionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{2}
}

func (x *RetryTransactionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// Person ...
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName      string `protobuf:"bytes,1,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	FirstName     string `protobuf:"bytes,2,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	MiddleName    string `protobuf:"bytes,3,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	NoMiddleName  bool   `protobuf:"varint,4,opt,name=NoMiddleName,json=no_middle_name,proto3" json:"no_middle_name,omitempty"`
	ContactNumber string `protobuf:"bytes,5,opt,name=ContactNumber,json=contact_number,proto3" json:"contact_number,omitempty"`
	BirthDate     string `protobuf:"bytes,6,opt,name=BirthDate,json=birth_date,proto3" json:"birth_date,omitempty"`
	Relationship  string `protobuf:"bytes,7,opt,name=Relationship,json=relationship,proto3" json:"relationship,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{3}
}

func (x *Person) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Person) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Person) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Person) GetNoMiddleName() bool {
	if x != nil {
		return x.NoMiddleName
	}
	return false
}

func (x *Person) GetContactNumber() string {
	if x != nil {
		return x.ContactNumber
	}
	return ""
}

func (x *Person) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *Person) GetRelationship() string {
	if x != nil {
		return x.Relationship
	}
	return ""
}

// Insurance ...
type Insurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID         string                 `protobuf:"bytes,1,opt,name=SessionID,json=sessionID,proto3" json:"sessionID,omitempty"`
	StatusCode        string                 `protobuf:"bytes,2,opt,name=StatusCode,json=statusCode,proto3" json:"statusCode,omitempty"`
	StatusDesc        string                 `protobuf:"bytes,3,opt,name=StatusDesc,json=statusDesc,proto3" json:"statusDesc,omitempty"`
	InsProductID      string                 `protobuf:"bytes,4,opt,name=InsProductID,json=insProductID,proto3" json:"insProductID,omitempty"`
	InsProductDesc    string                 `protobuf:"bytes,5,opt,name=InsProductDesc,json=insProductDesc,proto3" json:"insProductDesc,omitempty"`
	TrnDate           string                 `protobuf:"bytes,6,opt,name=TrnDate,json=trnDate,proto3" json:"trnDate,omitempty"`
	TrnAmount         float64                `protobuf:"fixed64,7,opt,name=TrnAmount,json=trnAmount,proto3" json:"trnAmount,omitempty"`
	TraceNumber       string                 `protobuf:"bytes,8,opt,name=TraceNumber,json=traceNo,proto3" json:"traceNo,omitempty"`
	ClientNo          string                 `protobuf:"bytes,9,opt,name=ClientNo,json=clientNo,proto3" json:"clientNo,omitempty"`
	NumUnits          int32                  `protobuf:"varint,10,opt,name=NumUnits,json=numUnits,proto3" json:"numUnits,omitempty"`
	BegPolicyNo       string                 `protobuf:"bytes,11,opt,name=BegPolicyNo,json=begPolicyNo,proto3" json:"begPolicyNo,omitempty"`
	EndPolicyNo       string                 `protobuf:"bytes,12,opt,name=EndPolicyNo,json=endPolicyNo,proto3" json:"endPolicyNo,omitempty"`
	EffectiveDate     string                 `protobuf:"bytes,13,opt,name=EffectiveDate,json=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	ExpiryDate        string                 `protobuf:"bytes,14,opt,name=ExpiryDate,json=expiryDate,proto3" json:"expiryDate,omitempty"`
	PocPDFLink        string                 `protobuf:"bytes,15,opt,name=PocPDFLink,json=pocPDFLink,proto3" json:"pocPDFLink,omitempty"`
	CocPDFLink        string                 `protobuf:"bytes,16,opt,name=CocPDFLink,json=cocPDFLink,proto3" json:"cocPDFLink,omitempty"`
	PartnerCommission float64                `protobuf:"fixed64,17,opt,name=PartnerCommission,json=partnerCommission,proto3" json:"partnerCommission,omitempty"`
	TellerCommission  float64                `protobuf:"fixed64,18,opt,name=TellerCommission,json=tellerCommission,proto3" json:"tellerCommission,omitempty"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=Timestamp,json=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Insurance) Reset() {
	*x = Insurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Insurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Insurance) ProtoMessage() {}

func (x *Insurance) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Insurance.ProtoReflect.Descriptor instead.
func (*Insurance) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{4}
}

func (x *Insurance) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Insurance) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Insurance) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *Insurance) GetInsProductID() string {
	if x != nil {
		return x.InsProductID
	}
	return ""
}

func (x *Insurance) GetInsProductDesc() string {
	if x != nil {
		return x.InsProductDesc
	}
	return ""
}

func (x *Insurance) GetTrnDate() string {
	if x != nil {
		return x.TrnDate
	}
	return ""
}

func (x *Insurance) GetTrnAmount() float64 {
	if x != nil {
		return x.TrnAmount
	}
	return 0
}

func (x *Insurance) GetTraceNumber() string {
	if x != nil {
		return x.TraceNumber
	}
	return ""
}

func (x *Insurance) GetClientNo() string {
	if x != nil {
		return x.ClientNo
	}
	return ""
}

func (x *Insurance) GetNumUnits() int32 {
	if x != nil {
		return x.NumUnits
	}
	return 0
}

func (x *Insurance) GetBegPolicyNo() string {
	if x != nil {
		return x.BegPolicyNo
	}
	return ""
}

func (x *Insurance) GetEndPolicyNo() string {
	if x != nil {
		return x.EndPolicyNo
	}
	return ""
}

func (x *Insurance) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *Insurance) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *Insurance) GetPocPDFLink() string {
	if x != nil {
		return x.PocPDFLink
	}
	return ""
}

func (x *Insurance) GetCocPDFLink() string {
	if x != nil {
		return x.CocPDFLink
	}
	return ""
}

func (x *Insurance) GetPartnerCommission() float64 {
	if x != nil {
		return x.PartnerCommission
	}
	return 0
}

func (x *Insurance) GetTellerCommission() float64 {
	if x != nil {
		return x.TellerCommission
	}
	return 0
}

func (x *Insurance) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// GetTransactionListRequest ...
type GetTransactionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateFrom     string       `protobuf:"bytes,1,opt,name=DateFrom,json=date_from,proto3" json:"date_from,omitempty"`
	DateTo       string       `protobuf:"bytes,2,opt,name=DateTo,json=date_to,proto3" json:"date_to,omitempty"`
	Limit        int32        `protobuf:"varint,3,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
	Offset       int32        `protobuf:"varint,4,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
	SortOrder    SortOrder    `protobuf:"varint,5,opt,name=SortOrder,json=sort_order,proto3,enum=microinsurance.SortOrder" json:"sort_order,omitempty"`
	SortByColumn SortByColumn `protobuf:"varint,6,opt,name=SortByColumn,json=sort_by_column,proto3,enum=microinsurance.SortByColumn" json:"sort_by_column,omitempty"`
	OrgID        string       `protobuf:"bytes,7,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
}

func (x *GetTransactionListRequest) Reset() {
	*x = GetTransactionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionListRequest) ProtoMessage() {}

func (x *GetTransactionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionListRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{5}
}

func (x *GetTransactionListRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *GetTransactionListRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *GetTransactionListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTransactionListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTransactionListRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_DESC
}

func (x *GetTransactionListRequest) GetSortByColumn() SortByColumn {
	if x != nil {
		return x.SortByColumn
	}
	return SortByColumn_OmitSortByColumn
}

func (x *GetTransactionListRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monetary amount in the smallest currency denomination.  Example: USD $10.25 => "1025".
	Amount string `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Currency code using ISO-4217 3-letter codes.
	Currency string `protobuf:"bytes,2,opt,name=Currency,json=currency,proto3" json:"currency,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{6}
}

func (x *Amount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Amount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// InsuranceTransaction ...
type InsuranceTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrnDate        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=TrnDate,json=trnDate,proto3" json:"trnDate,omitempty"`
	TraceNumber    string                 `protobuf:"bytes,2,opt,name=TraceNumber,json=traceNo,proto3" json:"traceNo,omitempty"`
	ClientNo       string                 `protobuf:"bytes,3,opt,name=ClientNo,json=clientNo,proto3" json:"clientNo,omitempty"`
	LastName       string                 `protobuf:"bytes,4,opt,name=LastName,json=lastName,proto3" json:"lastName,omitempty"`
	FirstName      string                 `protobuf:"bytes,5,opt,name=FirstName,json=firstName,proto3" json:"firstName,omitempty"`
	MiddleName     string                 `protobuf:"bytes,6,opt,name=MiddleName,json=middleName,proto3" json:"middleName,omitempty"`
	Gender         string                 `protobuf:"bytes,7,opt,name=Gender,json=gender,proto3" json:"gender,omitempty"`
	BirthDate      string                 `protobuf:"bytes,8,opt,name=BirthDate,json=birthDate,proto3" json:"birthDate,omitempty"`
	MobileNumber   string                 `protobuf:"bytes,9,opt,name=MobileNumber,json=mobileNo,proto3" json:"mobileNo,omitempty"`
	MaritalStatus  string                 `protobuf:"bytes,10,opt,name=MaritalStatus,json=maritalStatus,proto3" json:"maritalStatus,omitempty"`
	Occupation     string                 `protobuf:"bytes,11,opt,name=Occupation,json=occupation,proto3" json:"occupation,omitempty"`
	InsGroupID     string                 `protobuf:"bytes,12,opt,name=InsGroupID,json=insGroupID,proto3" json:"insGroupID,omitempty"`
	InsProductID   string                 `protobuf:"bytes,13,opt,name=InsProductID,json=insProductID,proto3" json:"insProductID,omitempty"`
	InsProductDesc string                 `protobuf:"bytes,14,opt,name=InsProductDesc,json=insProductDesc,proto3" json:"insProductDesc,omitempty"`
	InsurerCode    string                 `protobuf:"bytes,15,opt,name=InsurerCode,json=insurerCode,proto3" json:"insurerCode,omitempty"`
	InsuranceType  string                 `protobuf:"bytes,16,opt,name=InsuranceType,json=insuranceType,proto3" json:"insuranceType,omitempty"`
	BegPolicyNo    string                 `protobuf:"bytes,17,opt,name=BegPolicyNo,json=begPolicyNo,proto3" json:"begPolicyNo,omitempty"`
	EndPolicyNo    string                 `protobuf:"bytes,18,opt,name=EndPolicyNo,json=endPolicyNo,proto3" json:"endPolicyNo,omitempty"`
	CoverageInMos  int32                  `protobuf:"varint,19,opt,name=CoverageInMos,json=coverageInMos,proto3" json:"coverageInMos,omitempty"`
	EffectiveDate  string                 `protobuf:"bytes,20,opt,name=EffectiveDate,json=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	ExpiryDate     string                 `protobuf:"bytes,21,opt,name=ExpiryDate,json=expiryDate,proto3" json:"expiryDate,omitempty"`
	InsCardNo      string                 `protobuf:"bytes,22,opt,name=InsCardNo,json=insCardNo,proto3" json:"insCardNo,omitempty"`
	Beneficiaries  []*Person              `protobuf:"bytes,23,rep,name=Beneficiaries,json=beneficiaries,proto3" json:"beneficiaries,omitempty"`
	Dependents     []*Person              `protobuf:"bytes,24,rep,name=Dependents,json=dependents,proto3" json:"dependents,omitempty"`
	NumUnits       int32                  `protobuf:"varint,25,opt,name=NumUnits,json=numUnits,proto3" json:"numUnits,omitempty"`
	TotAmt         *Amount                `protobuf:"bytes,26,opt,name=TotAmt,json=totAmt,proto3" json:"totAmt,omitempty"`
	TrnStatus      string                 `protobuf:"bytes,27,opt,name=TrnStatus,json=trnStatus,proto3" json:"trnStatus,omitempty"`
	ProvinceCode   string                 `protobuf:"bytes,28,opt,name=ProvinceCode,json=provinceCode,proto3" json:"provinceCode,omitempty"`
	CityCode       string                 `protobuf:"bytes,29,opt,name=CityCode,json=cityCode,proto3" json:"cityCode,omitempty"`
	Address        string                 `protobuf:"bytes,30,opt,name=Address,json=address,proto3" json:"address,omitempty"`
}

func (x *InsuranceTransaction) Reset() {
	*x = InsuranceTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsuranceTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsuranceTransaction) ProtoMessage() {}

func (x *InsuranceTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsuranceTransaction.ProtoReflect.Descriptor instead.
func (*InsuranceTransaction) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{7}
}

func (x *InsuranceTransaction) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *InsuranceTransaction) GetTraceNumber() string {
	if x != nil {
		return x.TraceNumber
	}
	return ""
}

func (x *InsuranceTransaction) GetClientNo() string {
	if x != nil {
		return x.ClientNo
	}
	return ""
}

func (x *InsuranceTransaction) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *InsuranceTransaction) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *InsuranceTransaction) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *InsuranceTransaction) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *InsuranceTransaction) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *InsuranceTransaction) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *InsuranceTransaction) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *InsuranceTransaction) GetOccupation() string {
	if x != nil {
		return x.Occupation
	}
	return ""
}

func (x *InsuranceTransaction) GetInsGroupID() string {
	if x != nil {
		return x.InsGroupID
	}
	return ""
}

func (x *InsuranceTransaction) GetInsProductID() string {
	if x != nil {
		return x.InsProductID
	}
	return ""
}

func (x *InsuranceTransaction) GetInsProductDesc() string {
	if x != nil {
		return x.InsProductDesc
	}
	return ""
}

func (x *InsuranceTransaction) GetInsurerCode() string {
	if x != nil {
		return x.InsurerCode
	}
	return ""
}

func (x *InsuranceTransaction) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

func (x *InsuranceTransaction) GetBegPolicyNo() string {
	if x != nil {
		return x.BegPolicyNo
	}
	return ""
}

func (x *InsuranceTransaction) GetEndPolicyNo() string {
	if x != nil {
		return x.EndPolicyNo
	}
	return ""
}

func (x *InsuranceTransaction) GetCoverageInMos() int32 {
	if x != nil {
		return x.CoverageInMos
	}
	return 0
}

func (x *InsuranceTransaction) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *InsuranceTransaction) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *InsuranceTransaction) GetInsCardNo() string {
	if x != nil {
		return x.InsCardNo
	}
	return ""
}

func (x *InsuranceTransaction) GetBeneficiaries() []*Person {
	if x != nil {
		return x.Beneficiaries
	}
	return nil
}

func (x *InsuranceTransaction) GetDependents() []*Person {
	if x != nil {
		return x.Dependents
	}
	return nil
}

func (x *InsuranceTransaction) GetNumUnits() int32 {
	if x != nil {
		return x.NumUnits
	}
	return 0
}

func (x *InsuranceTransaction) GetTotAmt() *Amount {
	if x != nil {
		return x.TotAmt
	}
	return nil
}

func (x *InsuranceTransaction) GetTrnStatus() string {
	if x != nil {
		return x.TrnStatus
	}
	return ""
}

func (x *InsuranceTransaction) GetProvinceCode() string {
	if x != nil {
		return x.ProvinceCode
	}
	return ""
}

func (x *InsuranceTransaction) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *InsuranceTransaction) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// TransactionListResult ...
type TransactionListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*InsuranceTransaction `protobuf:"bytes,4,rep,name=Transactions,json=transactions,proto3" json:"transactions,omitempty"`
	Next         int32                   `protobuf:"varint,5,opt,name=Next,json=next,proto3" json:"next,omitempty"`
	Total        int32                   `protobuf:"varint,6,opt,name=Total,json=total,proto3" json:"total,omitempty"`
}

func (x *TransactionListResult) Reset() {
	*x = TransactionListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionListResult) ProtoMessage() {}

func (x *TransactionListResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionListResult.ProtoReflect.Descriptor instead.
func (*TransactionListResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionListResult) GetTransactions() []*InsuranceTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *TransactionListResult) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *TransactionListResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// InsuranceProduct ...
type InsuranceProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsGroupID          string `protobuf:"bytes,1,opt,name=InsGroupID,json=insGroupID,proto3" json:"insGroupID,omitempty"`
	InsProductID        string `protobuf:"bytes,2,opt,name=InsProductID,json=insProductID,proto3" json:"insProductID,omitempty"`
	InsProductDesc      string `protobuf:"bytes,3,opt,name=InsProductDesc,json=insProductDesc,proto3" json:"insProductDesc,omitempty"`
	InsurerCode         string `protobuf:"bytes,4,opt,name=InsurerCode,json=insurerCode,proto3" json:"insurerCode,omitempty"`
	InsuranceType       string `protobuf:"bytes,5,opt,name=InsuranceType,json=insuranceType,proto3" json:"insuranceType,omitempty"`
	InsuranceCategory   string `protobuf:"bytes,6,opt,name=InsuranceCategory,json=insuranceCategory,proto3" json:"insuranceCategory,omitempty"`
	PolicyNo            string `protobuf:"bytes,7,opt,name=PolicyNo,json=policyNo,proto3" json:"policyNo,omitempty"`
	MinAge              int32  `protobuf:"varint,8,opt,name=MinAge,json=minAge,proto3" json:"minAge,omitempty"`
	MaxAge              int32  `protobuf:"varint,9,opt,name=MaxAge,json=maxAge,proto3" json:"maxAge,omitempty"`
	CoverageInMos       string `protobuf:"bytes,10,opt,name=CoverageInMos,json=coverageInMos,proto3" json:"coverageInMos,omitempty"`
	ContestAbilityInMos string `protobuf:"bytes,11,opt,name=ContestAbilityInMos,json=contestabilityInMos,proto3" json:"contestabilityInMos,omitempty"`
	ActivationDelay     string `protobuf:"bytes,12,opt,name=ActivationDelay,json=activationDelay,proto3" json:"activationDelay,omitempty"`
	MaxUnits            string `protobuf:"bytes,13,opt,name=MaxUnits,json=maxUnits,proto3" json:"maxUnits,omitempty"`
	PerUnitFee          string `protobuf:"bytes,14,opt,name=PerUnitFee,json=perUnitFee,proto3" json:"perUnitFee,omitempty"`
	ProductName         string `protobuf:"bytes,15,opt,name=ProductName,json=product_name,proto3" json:"product_name,omitempty"`
}

func (x *InsuranceProduct) Reset() {
	*x = InsuranceProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsuranceProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsuranceProduct) ProtoMessage() {}

func (x *InsuranceProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsuranceProduct.ProtoReflect.Descriptor instead.
func (*InsuranceProduct) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{9}
}

func (x *InsuranceProduct) GetInsGroupID() string {
	if x != nil {
		return x.InsGroupID
	}
	return ""
}

func (x *InsuranceProduct) GetInsProductID() string {
	if x != nil {
		return x.InsProductID
	}
	return ""
}

func (x *InsuranceProduct) GetInsProductDesc() string {
	if x != nil {
		return x.InsProductDesc
	}
	return ""
}

func (x *InsuranceProduct) GetInsurerCode() string {
	if x != nil {
		return x.InsurerCode
	}
	return ""
}

func (x *InsuranceProduct) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

func (x *InsuranceProduct) GetInsuranceCategory() string {
	if x != nil {
		return x.InsuranceCategory
	}
	return ""
}

func (x *InsuranceProduct) GetPolicyNo() string {
	if x != nil {
		return x.PolicyNo
	}
	return ""
}

func (x *InsuranceProduct) GetMinAge() int32 {
	if x != nil {
		return x.MinAge
	}
	return 0
}

func (x *InsuranceProduct) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *InsuranceProduct) GetCoverageInMos() string {
	if x != nil {
		return x.CoverageInMos
	}
	return ""
}

func (x *InsuranceProduct) GetContestAbilityInMos() string {
	if x != nil {
		return x.ContestAbilityInMos
	}
	return ""
}

func (x *InsuranceProduct) GetActivationDelay() string {
	if x != nil {
		return x.ActivationDelay
	}
	return ""
}

func (x *InsuranceProduct) GetMaxUnits() string {
	if x != nil {
		return x.MaxUnits
	}
	return ""
}

func (x *InsuranceProduct) GetPerUnitFee() string {
	if x != nil {
		return x.PerUnitFee
	}
	return ""
}

func (x *InsuranceProduct) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

// Coverage ...
type Coverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsCoverageID     string `protobuf:"bytes,1,opt,name=InsCoverageID,json=insCoverageID,proto3" json:"insCoverageID,omitempty"`
	InsCoverageDesc   string `protobuf:"bytes,2,opt,name=InsCoverageDesc,json=insCoverageDesc,proto3" json:"insCoverageDesc,omitempty"`
	InsCoverageIconID string `protobuf:"bytes,3,opt,name=InsCoverageIconID,json=insCoverageIconID,proto3" json:"insCoverageIconID,omitempty"`
	InsCoverageType1  string `protobuf:"bytes,4,opt,name=InsCoverageType1,json=insCoverageType1,proto3" json:"insCoverageType1,omitempty"`
	InsCoverageAmt1   string `protobuf:"bytes,5,opt,name=InsCoverageAmt1,json=insCoverageAmt1,proto3" json:"insCoverageAmt1,omitempty"`
	InsCoverageType2  string `protobuf:"bytes,6,opt,name=InsCoverageType2,json=insCoverageType2,proto3" json:"insCoverageType2,omitempty"`
	InsCoverageAmt2   string `protobuf:"bytes,7,opt,name=InsCoverageAmt2,json=insCoverageAmt2,proto3" json:"insCoverageAmt2,omitempty"`
	InsCoverageType3  string `protobuf:"bytes,8,opt,name=InsCoverageType3,json=insCoverageType3,proto3" json:"insCoverageType3,omitempty"`
	InsCoverageAmt3   string `protobuf:"bytes,9,opt,name=InsCoverageAmt3,json=insCoverageAmt3,proto3" json:"insCoverageAmt3,omitempty"`
	InsCoverageType4  string `protobuf:"bytes,10,opt,name=InsCoverageType4,json=insCoverageType4,proto3" json:"insCoverageType4,omitempty"`
	InsCoverageAmt4   string `protobuf:"bytes,11,opt,name=InsCoverageAmt4,json=insCoverageAmt4,proto3" json:"insCoverageAmt4,omitempty"`
	InsCoverageType5  string `protobuf:"bytes,12,opt,name=InsCoverageType5,json=insCoverageType5,proto3" json:"insCoverageType5,omitempty"`
	InsCoverageAmt5   string `protobuf:"bytes,13,opt,name=InsCoverageAmt5,json=insCoverageAmt5,proto3" json:"insCoverageAmt5,omitempty"`
}

func (x *Coverage) Reset() {
	*x = Coverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coverage) ProtoMessage() {}

func (x *Coverage) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coverage.ProtoReflect.Descriptor instead.
func (*Coverage) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{10}
}

func (x *Coverage) GetInsCoverageID() string {
	if x != nil {
		return x.InsCoverageID
	}
	return ""
}

func (x *Coverage) GetInsCoverageDesc() string {
	if x != nil {
		return x.InsCoverageDesc
	}
	return ""
}

func (x *Coverage) GetInsCoverageIconID() string {
	if x != nil {
		return x.InsCoverageIconID
	}
	return ""
}

func (x *Coverage) GetInsCoverageType1() string {
	if x != nil {
		return x.InsCoverageType1
	}
	return ""
}

func (x *Coverage) GetInsCoverageAmt1() string {
	if x != nil {
		return x.InsCoverageAmt1
	}
	return ""
}

func (x *Coverage) GetInsCoverageType2() string {
	if x != nil {
		return x.InsCoverageType2
	}
	return ""
}

func (x *Coverage) GetInsCoverageAmt2() string {
	if x != nil {
		return x.InsCoverageAmt2
	}
	return ""
}

func (x *Coverage) GetInsCoverageType3() string {
	if x != nil {
		return x.InsCoverageType3
	}
	return ""
}

func (x *Coverage) GetInsCoverageAmt3() string {
	if x != nil {
		return x.InsCoverageAmt3
	}
	return ""
}

func (x *Coverage) GetInsCoverageType4() string {
	if x != nil {
		return x.InsCoverageType4
	}
	return ""
}

func (x *Coverage) GetInsCoverageAmt4() string {
	if x != nil {
		return x.InsCoverageAmt4
	}
	return ""
}

func (x *Coverage) GetInsCoverageType5() string {
	if x != nil {
		return x.InsCoverageType5
	}
	return ""
}

func (x *Coverage) GetInsCoverageAmt5() string {
	if x != nil {
		return x.InsCoverageAmt5
	}
	return ""
}

// ProductResult ...
type ProductResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID  string            `protobuf:"bytes,1,opt,name=SessionID,json=sessionID,proto3" json:"sessionID,omitempty"`
	StatusCode string            `protobuf:"bytes,2,opt,name=StatusCode,json=statusCode,proto3" json:"statusCode,omitempty"`
	StatusDesc string            `protobuf:"bytes,3,opt,name=StatusDesc,json=statusDesc,proto3" json:"statusDesc,omitempty"`
	Product    *InsuranceProduct `protobuf:"bytes,4,opt,name=Product,json=product,proto3" json:"product,omitempty"`
	Coverages  []*Coverage       `protobuf:"bytes,5,rep,name=Coverages,json=coverages,proto3" json:"coverages,omitempty"`
}

func (x *ProductResult) Reset() {
	*x = ProductResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResult) ProtoMessage() {}

func (x *ProductResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResult.ProtoReflect.Descriptor instead.
func (*ProductResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{11}
}

func (x *ProductResult) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *ProductResult) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ProductResult) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *ProductResult) GetProduct() *InsuranceProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductResult) GetCoverages() []*Coverage {
	if x != nil {
		return x.Coverages
	}
	return nil
}

// GetProductRequest ...
type GetProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCode string `protobuf:"bytes,1,opt,name=ProductCode,json=product_code,proto3" json:"product_code,omitempty"`
}

func (x *GetProductRequest) Reset() {
	*x = GetProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductRequest) ProtoMessage() {}

func (x *GetProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductRequest.ProtoReflect.Descriptor instead.
func (*GetProductRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{12}
}

func (x *GetProductRequest) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

// GetOfferProductRequest ...
type GetOfferProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName   string  `protobuf:"bytes,1,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	FirstName  string  `protobuf:"bytes,2,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	MiddleName string  `protobuf:"bytes,3,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	Birthdate  string  `protobuf:"bytes,4,opt,name=Birthdate,json=birthdate,proto3" json:"birthdate,omitempty"`
	Gender     string  `protobuf:"bytes,5,opt,name=Gender,json=gender,proto3" json:"gender,omitempty"`
	TrxType    int32   `protobuf:"varint,6,opt,name=TrxType,json=trx_type,proto3" json:"trx_type,omitempty"`
	Amount     float64 `protobuf:"fixed64,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *GetOfferProductRequest) Reset() {
	*x = GetOfferProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfferProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfferProductRequest) ProtoMessage() {}

func (x *GetOfferProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfferProductRequest.ProtoReflect.Descriptor instead.
func (*GetOfferProductRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{13}
}

func (x *GetOfferProductRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GetOfferProductRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetOfferProductRequest) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *GetOfferProductRequest) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

func (x *GetOfferProductRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *GetOfferProductRequest) GetTrxType() int32 {
	if x != nil {
		return x.TrxType
	}
	return 0
}

func (x *GetOfferProductRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// OfferProduct ...
type OfferProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName          string     `protobuf:"bytes,1,opt,name=ProductName,json=product_name,proto3" json:"product_name,omitempty"`
	ProductCode          string     `protobuf:"bytes,2,opt,name=ProductCode,json=product_code,proto3" json:"product_code,omitempty"`
	ProductType          string     `protobuf:"bytes,3,opt,name=ProductType,json=product_type,proto3" json:"product_type,omitempty"`
	Dependents           int32      `protobuf:"varint,4,opt,name=Dependents,json=dependents,proto3" json:"dependents,omitempty"`
	Beneficiary          int32      `protobuf:"varint,5,opt,name=Beneficiary,json=beneficiary,proto3" json:"beneficiary,omitempty"`
	BeneficiaryPolicy    *MinMax    `protobuf:"bytes,6,opt,name=BeneficiaryPolicy,json=beneficiary_policy,proto3" json:"beneficiary_policy,omitempty"`
	AgePolicy            *AgePolicy `protobuf:"bytes,7,opt,name=AgePolicy,json=age_policy,proto3" json:"age_policy,omitempty"`
	EndSpielsTitle       string     `protobuf:"bytes,8,opt,name=EndSpielsTitle,json=end_spiels_title,proto3" json:"end_spiels_title,omitempty"`
	EndSpielsDescription string     `protobuf:"bytes,9,opt,name=EndSpielsDescription,json=end_spiels_description,proto3" json:"end_spiels_description,omitempty"`
	SalesPitch           string     `protobuf:"bytes,10,opt,name=SalesPitch,json=sales_pitch,proto3" json:"sales_pitch,omitempty"`
	TermsAndCondition    string     `protobuf:"bytes,11,opt,name=TermsAndCondition,json=terms_and_condition,proto3" json:"terms_and_condition,omitempty"`
	DataPrivacy          string     `protobuf:"bytes,12,opt,name=DataPrivacy,json=data_privacy,proto3" json:"data_privacy,omitempty"`
}

func (x *OfferProduct) Reset() {
	*x = OfferProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferProduct) ProtoMessage() {}

func (x *OfferProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferProduct.ProtoReflect.Descriptor instead.
func (*OfferProduct) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{14}
}

func (x *OfferProduct) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OfferProduct) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *OfferProduct) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *OfferProduct) GetDependents() int32 {
	if x != nil {
		return x.Dependents
	}
	return 0
}

func (x *OfferProduct) GetBeneficiary() int32 {
	if x != nil {
		return x.Beneficiary
	}
	return 0
}

func (x *OfferProduct) GetBeneficiaryPolicy() *MinMax {
	if x != nil {
		return x.BeneficiaryPolicy
	}
	return nil
}

func (x *OfferProduct) GetAgePolicy() *AgePolicy {
	if x != nil {
		return x.AgePolicy
	}
	return nil
}

func (x *OfferProduct) GetEndSpielsTitle() string {
	if x != nil {
		return x.EndSpielsTitle
	}
	return ""
}

func (x *OfferProduct) GetEndSpielsDescription() string {
	if x != nil {
		return x.EndSpielsDescription
	}
	return ""
}

func (x *OfferProduct) GetSalesPitch() string {
	if x != nil {
		return x.SalesPitch
	}
	return ""
}

func (x *OfferProduct) GetTermsAndCondition() string {
	if x != nil {
		return x.TermsAndCondition
	}
	return ""
}

func (x *OfferProduct) GetDataPrivacy() string {
	if x != nil {
		return x.DataPrivacy
	}
	return ""
}

// ActiveProduct ...
type ActiveProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName          string     `protobuf:"bytes,1,opt,name=ProductName,json=product_name,proto3" json:"product_name,omitempty"`
	ProductCode          string     `protobuf:"bytes,2,opt,name=ProductCode,json=product_code,proto3" json:"product_code,omitempty"`
	ProductType          string     `protobuf:"bytes,3,opt,name=ProductType,json=product_type,proto3" json:"product_type,omitempty"`
	Dependents           int32      `protobuf:"varint,4,opt,name=Dependents,json=dependents,proto3" json:"dependents,omitempty"`
	Beneficiary          int32      `protobuf:"varint,5,opt,name=Beneficiary,json=beneficiary,proto3" json:"beneficiary,omitempty"`
	BeneficiaryPolicy    *MinMax    `protobuf:"bytes,6,opt,name=BeneficiaryPolicy,json=beneficiary_policy,proto3" json:"beneficiary_policy,omitempty"`
	DependentsPolicy     *MinMax    `protobuf:"bytes,7,opt,name=DependentsPolicy,json=dependents_policy,proto3" json:"dependents_policy,omitempty"`
	AgePolicy            *AgePolicy `protobuf:"bytes,8,opt,name=AgePolicy,json=age_policy,proto3" json:"age_policy,omitempty"`
	EndSpielsTitle       string     `protobuf:"bytes,9,opt,name=EndSpielsTitle,json=end_spiels_title,proto3" json:"end_spiels_title,omitempty"`
	EndSpielsDescription string     `protobuf:"bytes,10,opt,name=EndSpielsDescription,json=end_spiels_description,proto3" json:"end_spiels_description,omitempty"`
	SalesPitch           string     `protobuf:"bytes,11,opt,name=SalesPitch,json=sales_pitch,proto3" json:"sales_pitch,omitempty"`
	TermsAndCondition    string     `protobuf:"bytes,12,opt,name=TermsAndCondition,json=terms_and_condition,proto3" json:"terms_and_condition,omitempty"`
	DataPrivacy          string     `protobuf:"bytes,13,opt,name=DataPrivacy,json=data_privacy,proto3" json:"data_privacy,omitempty"`
}

func (x *ActiveProduct) Reset() {
	*x = ActiveProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveProduct) ProtoMessage() {}

func (x *ActiveProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveProduct.ProtoReflect.Descriptor instead.
func (*ActiveProduct) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{15}
}

func (x *ActiveProduct) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ActiveProduct) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ActiveProduct) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *ActiveProduct) GetDependents() int32 {
	if x != nil {
		return x.Dependents
	}
	return 0
}

func (x *ActiveProduct) GetBeneficiary() int32 {
	if x != nil {
		return x.Beneficiary
	}
	return 0
}

func (x *ActiveProduct) GetBeneficiaryPolicy() *MinMax {
	if x != nil {
		return x.BeneficiaryPolicy
	}
	return nil
}

func (x *ActiveProduct) GetDependentsPolicy() *MinMax {
	if x != nil {
		return x.DependentsPolicy
	}
	return nil
}

func (x *ActiveProduct) GetAgePolicy() *AgePolicy {
	if x != nil {
		return x.AgePolicy
	}
	return nil
}

func (x *ActiveProduct) GetEndSpielsTitle() string {
	if x != nil {
		return x.EndSpielsTitle
	}
	return ""
}

func (x *ActiveProduct) GetEndSpielsDescription() string {
	if x != nil {
		return x.EndSpielsDescription
	}
	return ""
}

func (x *ActiveProduct) GetSalesPitch() string {
	if x != nil {
		return x.SalesPitch
	}
	return ""
}

func (x *ActiveProduct) GetTermsAndCondition() string {
	if x != nil {
		return x.TermsAndCondition
	}
	return ""
}

func (x *ActiveProduct) GetDataPrivacy() string {
	if x != nil {
		return x.DataPrivacy
	}
	return ""
}

// MinMax ...
type MinMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Max int32 `protobuf:"varint,1,opt,name=Max,json=max,proto3" json:"max,omitempty"`
	Min int32 `protobuf:"varint,2,opt,name=Min,json=min,proto3" json:"min,omitempty"`
}

func (x *MinMax) Reset() {
	*x = MinMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinMax) ProtoMessage() {}

func (x *MinMax) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinMax.ProtoReflect.Descriptor instead.
func (*MinMax) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{16}
}

func (x *MinMax) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MinMax) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

// MinMaxAge ...
type MinMaxAge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAge int32 `protobuf:"varint,1,opt,name=MaxAge,json=max_age,proto3" json:"max_age,omitempty"`
	MinAge int32 `protobuf:"varint,2,opt,name=MinAge,json=min_age,proto3" json:"min_age,omitempty"`
}

func (x *MinMaxAge) Reset() {
	*x = MinMaxAge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinMaxAge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinMaxAge) ProtoMessage() {}

func (x *MinMaxAge) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinMaxAge.ProtoReflect.Descriptor instead.
func (*MinMaxAge) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{17}
}

func (x *MinMaxAge) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *MinMaxAge) GetMinAge() int32 {
	if x != nil {
		return x.MinAge
	}
	return 0
}

// AgePolicy ...
type AgePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Insurer    *MinMaxAge        `protobuf:"bytes,1,opt,name=Insurer,json=insurer,proto3" json:"insurer,omitempty"`
	Dependents *DependentsPolicy `protobuf:"bytes,2,opt,name=Dependents,json=dependents,proto3" json:"dependents,omitempty"`
}

func (x *AgePolicy) Reset() {
	*x = AgePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgePolicy) ProtoMessage() {}

func (x *AgePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgePolicy.ProtoReflect.Descriptor instead.
func (*AgePolicy) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{18}
}

func (x *AgePolicy) GetInsurer() *MinMaxAge {
	if x != nil {
		return x.Insurer
	}
	return nil
}

func (x *AgePolicy) GetDependents() *DependentsPolicy {
	if x != nil {
		return x.Dependents
	}
	return nil
}

// DependentsPolicy ...
type DependentsPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children *MinMaxAge `protobuf:"bytes,1,opt,name=Children,json=CHI,proto3" json:"CHI,omitempty"`
	Parents  *MinMaxAge `protobuf:"bytes,2,opt,name=Parents,json=PAR,proto3" json:"PAR,omitempty"`
	Siblings *MinMaxAge `protobuf:"bytes,3,opt,name=Siblings,json=SIB,proto3" json:"SIB,omitempty"`
	Spouse   *MinMaxAge `protobuf:"bytes,4,opt,name=Spouse,json=SPS,proto3" json:"SPS,omitempty"`
}

func (x *DependentsPolicy) Reset() {
	*x = DependentsPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependentsPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependentsPolicy) ProtoMessage() {}

func (x *DependentsPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependentsPolicy.ProtoReflect.Descriptor instead.
func (*DependentsPolicy) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{19}
}

func (x *DependentsPolicy) GetChildren() *MinMaxAge {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *DependentsPolicy) GetParents() *MinMaxAge {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *DependentsPolicy) GetSiblings() *MinMaxAge {
	if x != nil {
		return x.Siblings
	}
	return nil
}

func (x *DependentsPolicy) GetSpouse() *MinMaxAge {
	if x != nil {
		return x.Spouse
	}
	return nil
}

// CheckActiveProductRequest ...
type CheckActiveProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName    string `protobuf:"bytes,1,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	FirstName   string `protobuf:"bytes,2,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	MiddleName  string `protobuf:"bytes,3,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	Birthdate   string `protobuf:"bytes,4,opt,name=Birthdate,json=birthdate,proto3" json:"birthdate,omitempty"`
	Gender      string `protobuf:"bytes,5,opt,name=Gender,json=gender,proto3" json:"gender,omitempty"`
	ProductCode string `protobuf:"bytes,6,opt,name=ProductCode,json=product_code,proto3" json:"product_code,omitempty"`
}

func (x *CheckActiveProductRequest) Reset() {
	*x = CheckActiveProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckActiveProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckActiveProductRequest) ProtoMessage() {}

func (x *CheckActiveProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckActiveProductRequest.ProtoReflect.Descriptor instead.
func (*CheckActiveProductRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{20}
}

func (x *CheckActiveProductRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckActiveProductRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckActiveProductRequest) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *CheckActiveProductRequest) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

func (x *CheckActiveProductRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *CheckActiveProductRequest) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

// GetProductListResult ...
type GetProductListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*ActiveProduct `protobuf:"bytes,1,rep,name=Products,json=products,proto3" json:"products,omitempty"`
}

func (x *GetProductListResult) Reset() {
	*x = GetProductListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductListResult) ProtoMessage() {}

func (x *GetProductListResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductListResult.ProtoReflect.Descriptor instead.
func (*GetProductListResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{21}
}

func (x *GetProductListResult) GetProducts() []*ActiveProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

// Relationship ...
type Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationship      string `protobuf:"bytes,1,opt,name=Relationship,json=relationship,proto3" json:"relationship,omitempty"`
	RelationshipValue string `protobuf:"bytes,2,opt,name=RelationshipValue,json=relationship_value,proto3" json:"relationship_value,omitempty"`
}

func (x *Relationship) Reset() {
	*x = Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relationship) ProtoMessage() {}

func (x *Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relationship.ProtoReflect.Descriptor instead.
func (*Relationship) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{22}
}

func (x *Relationship) GetRelationship() string {
	if x != nil {
		return x.Relationship
	}
	return ""
}

func (x *Relationship) GetRelationshipValue() string {
	if x != nil {
		return x.RelationshipValue
	}
	return ""
}

// GetRelationshipsResult ...
type GetRelationshipsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationships []*Relationship `protobuf:"bytes,1,rep,name=Relationships,json=relationships,proto3" json:"relationships,omitempty"`
}

func (x *GetRelationshipsResult) Reset() {
	*x = GetRelationshipsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationshipsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationshipsResult) ProtoMessage() {}

func (x *GetRelationshipsResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationshipsResult.ProtoReflect.Descriptor instead.
func (*GetRelationshipsResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{23}
}

func (x *GetRelationshipsResult) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

// City ...
type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityCode     string `protobuf:"bytes,1,opt,name=CityCode,json=cityCode,proto3" json:"cityCode,omitempty"`
	CityName     string `protobuf:"bytes,2,opt,name=CityName,json=cityName,proto3" json:"cityName,omitempty"`
	ProvinceCode string `protobuf:"bytes,3,opt,name=ProvinceCode,json=provinceCode,proto3" json:"provinceCode,omitempty"`
	ProvinceName string `protobuf:"bytes,4,opt,name=ProvinceName,json=provinceName,proto3" json:"provinceName,omitempty"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{24}
}

func (x *City) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *City) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *City) GetProvinceCode() string {
	if x != nil {
		return x.ProvinceCode
	}
	return ""
}

func (x *City) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

// CityListResult ...
type CityListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cities []*City `protobuf:"bytes,1,rep,name=Cities,json=cities,proto3" json:"cities,omitempty"`
}

func (x *CityListResult) Reset() {
	*x = CityListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityListResult) ProtoMessage() {}

func (x *CityListResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityListResult.ProtoReflect.Descriptor instead.
func (*CityListResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP(), []int{25}
}

func (x *CityListResult) GetCities() []*City {
	if x != nil {
		return x.Cities
	}
	return nil
}

var File_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDesc = []byte{
	0x0a, 0x34, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x6c, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb9, 0x0c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x43, 0x6f, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x03, 0x63, 0x6f, 0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72,
	0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x48, 0x0a, 0x0d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0xce, 0x02,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0xc4, 0x02, 0x0a, 0xc1, 0x02, 0xd2, 0x01, 0x03,
	0x63, 0x6f, 0x79, 0xd2, 0x01, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x08,
	0x74, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0xd2, 0x01, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0xd2, 0x01, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0xd2, 0x01, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01,
	0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xd2, 0x01,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0xd2, 0x01, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xd2, 0x01, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xd2, 0x01, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0xd2, 0x01, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65,
	0x73, 0xd2, 0x01, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x59,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x3a, 0x15, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2,
	0x01, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0x47, 0x0a, 0x17, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02,
	0x69, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x0c, 0x4e, 0x6f, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x6e, 0x6f, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x3a, 0x51,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x48, 0x0a, 0x46, 0xd2, 0x01, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x8d, 0x07, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x2e, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x07, 0x54, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x54,
	0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x72, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x12,
	0x26, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x08, 0x4e, 0x75, 0x6d, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x0b, 0x42, 0x65, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x62, 0x65, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x12, 0x2c, 0x0a,
	0x0b, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x0d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x50, 0x6f, 0x63,
	0x50, 0x44, 0x46, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x63, 0x50, 0x44,
	0x46, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x6f, 0x63, 0x50, 0x44, 0x46, 0x4c,
	0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x63, 0x50, 0x44, 0x46, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x38, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x10, 0x54,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x94, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x06, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x12, 0x20, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x3a, 0x2a, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0xd2, 0x01, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0xd2,
	0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa8, 0x0b, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x07, 0x54, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x0c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x0d, 0x4d,
	0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x0a, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x6e, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x0b, 0x49, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x42, 0x65, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x12, 0x2c, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x0d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x48, 0x0a, 0x0d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x08, 0x4e, 0x75, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x54, 0x6f, 0x74, 0x41, 0x6d, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x41, 0x6d,
	0x74, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x74, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x43,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xdd, 0x05, 0x0a, 0x10,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x2a, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0e,
	0x49, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x2c, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x73, 0x12, 0x3c, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x4d, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x4d, 0x6f, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x26, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x55,
	0x6e, 0x69, 0x74, 0x46, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xda, 0x05, 0x0a, 0x08,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x0f, 0x49, 0x6e,
	0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x38, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x10, 0x49, 0x6e,
	0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x31, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x10, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x31, 0x12, 0x34, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x6d, 0x74, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x74, 0x31, 0x12, 0x36, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x12, 0x34, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x6d, 0x74, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x6d, 0x74, 0x32, 0x12, 0x36, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x69, 0x6e,
	0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x33, 0x12, 0x34,
	0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x74,
	0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x6d, 0x74, 0x33, 0x12, 0x36, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x34, 0x12, 0x34, 0x0a, 0x0f,
	0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x74, 0x34, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d,
	0x74, 0x34, 0x12, 0x36, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x35, 0x12, 0x34, 0x0a, 0x0f, 0x49, 0x6e,
	0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x74, 0x35, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x74, 0x35,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa5, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x46, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x3a, 0x1a, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x11, 0x0a,
	0x0f, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x81, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x72,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x4d, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x44,
	0x0a, 0x42, 0xd2, 0x01, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0xd2, 0x01, 0x08, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x05, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x11,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x44, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x53, 0x70, 0x69, 0x65,
	0x6c, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x70, 0x69, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x14, 0x45,
	0x6e, 0x64, 0x53, 0x70, 0x69, 0x65, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x69, 0x65, 0x6c,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x0a, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x11, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf8, 0x05,
	0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x11, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x41, 0x67,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41,
	0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x34, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x53, 0x70, 0x69, 0x65, 0x6c, 0x73, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x53, 0x70, 0x69,
	0x65, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x50, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4c, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x4d,
	0x61, 0x78, 0x12, 0x1c, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x1c, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5d, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x41, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x41,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8f, 0x02, 0x0a, 0x10, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3c, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x43, 0x48, 0x49, 0x12, 0x3b, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x50, 0x41, 0x52, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x03, 0x53, 0x49, 0x42, 0x12, 0x3a, 0x0a, 0x06, 0x53, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x41, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x03, 0x53, 0x50, 0x53, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe3, 0x02, 0x0a,
	0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x4c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x48, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x92, 0x41, 0x3f, 0x0a, 0x3d, 0xd2, 0x01, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x0c, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x11, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x70, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xbe, 0x01, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x52, 0x0a, 0x0e, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x2a, 0x2a, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0c, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0b, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x2a, 0xac, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x18, 0x0a, 0x10, 0x4f, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x11, 0x0a, 0x09, 0x54, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x12, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32,
	0xe5, 0x26, 0x0a, 0x15, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xae, 0x03, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xe1, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb1, 0x02, 0x0a,
	0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x1a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x52, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4b, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29,
	0x0a, 0x27, 0x1a, 0x25, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4a, 0x2b, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc3, 0x03, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf2, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xb7, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0b, 0x47, 0x65, 0x74, 0x20, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x1a, 0x0b, 0x47, 0x65, 0x74, 0x20, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x52, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29, 0x0a, 0x27, 0x1a, 0x25, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x2b,
	0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x2f, 0x7b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xd6, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf9, 0x02, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0xc3, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79, 0x20, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x52,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29, 0x0a, 0x27, 0x1a, 0x25, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x2b, 0x0a, 0x03,
	0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x2f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf1, 0x03, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x84, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xcf, 0x02, 0x0a,
	0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x57,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4a, 0x2b, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xff, 0x03,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaa,
	0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xf0, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x47, 0x65, 0x74,
	0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x42, 0x79, 0x20, 0x49, 0x44, 0x1a, 0x11,
	0x47, 0x65, 0x74, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x42, 0x79, 0x20, 0x49,
	0x44, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x4a, 0x56, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2d, 0x0a, 0x2b,
	0x1a, 0x29, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x39, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a,
	0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x20, 0x0a, 0x1e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x2b,
	0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12,
	0x82, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xa4, 0x03, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0xef, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x47, 0x65, 0x74, 0x20, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x11, 0x47, 0x65, 0x74, 0x20, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x55,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
	0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a,
	0x27, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x2b, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12,
	0x24, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x97, 0x04, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xb2, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41,
	0xf6, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x56, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2d, 0x0a, 0x2b, 0x1a, 0x29, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x2b, 0x0a, 0x03, 0x34,
	0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01,
	0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0xed,
	0x03, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x9a, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xee, 0x02, 0x0a, 0x0e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x47, 0x65,
	0x74, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x10,
	0x47, 0x65, 0x74, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x4a, 0x56, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2d, 0x0a, 0x2b, 0x1a,
	0x29, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x20, 0x0a, 0x1e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x2b, 0x0a,
	0x03, 0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x30, 0x00, 0x12, 0x89,
	0x04, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xb2, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x81, 0x03,
	0x0a, 0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x15, 0x47, 0x65, 0x74, 0x20, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x2b, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x30, 0x00, 0x12, 0xe5, 0x03, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x9a, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xf1, 0x02,
	0x0a, 0x0e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x11, 0x47, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x43, 0x69, 0x74, 0x79, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x11, 0x47, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x43, 0x69, 0x74,
	0x79, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x57, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x50, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x2e, 0x0a, 0x2c, 0x1a, 0x2a, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x27, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x2b, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x69, 0x74, 0x79,
	0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x54, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x39, 0x62,
	0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67,
	0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01,
	0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 26)
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_goTypes   = []interface{}{
		(SortOrder)(0),                    // 0: microinsurance.SortOrder
		(SortByColumn)(0),                 // 1: microinsurance.SortByColumn
		(*TransactRequest)(nil),           // 2: microinsurance.TransactRequest
		(*GetReprintRequest)(nil),         // 3: microinsurance.GetReprintRequest
		(*RetryTransactionRequest)(nil),   // 4: microinsurance.RetryTransactionRequest
		(*Person)(nil),                    // 5: microinsurance.Person
		(*Insurance)(nil),                 // 6: microinsurance.Insurance
		(*GetTransactionListRequest)(nil), // 7: microinsurance.GetTransactionListRequest
		(*Amount)(nil),                    // 8: microinsurance.Amount
		(*InsuranceTransaction)(nil),      // 9: microinsurance.InsuranceTransaction
		(*TransactionListResult)(nil),     // 10: microinsurance.TransactionListResult
		(*InsuranceProduct)(nil),          // 11: microinsurance.InsuranceProduct
		(*Coverage)(nil),                  // 12: microinsurance.Coverage
		(*ProductResult)(nil),             // 13: microinsurance.ProductResult
		(*GetProductRequest)(nil),         // 14: microinsurance.GetProductRequest
		(*GetOfferProductRequest)(nil),    // 15: microinsurance.GetOfferProductRequest
		(*OfferProduct)(nil),              // 16: microinsurance.OfferProduct
		(*ActiveProduct)(nil),             // 17: microinsurance.ActiveProduct
		(*MinMax)(nil),                    // 18: microinsurance.MinMax
		(*MinMaxAge)(nil),                 // 19: microinsurance.MinMaxAge
		(*AgePolicy)(nil),                 // 20: microinsurance.AgePolicy
		(*DependentsPolicy)(nil),          // 21: microinsurance.DependentsPolicy
		(*CheckActiveProductRequest)(nil), // 22: microinsurance.CheckActiveProductRequest
		(*GetProductListResult)(nil),      // 23: microinsurance.GetProductListResult
		(*Relationship)(nil),              // 24: microinsurance.Relationship
		(*GetRelationshipsResult)(nil),    // 25: microinsurance.GetRelationshipsResult
		(*City)(nil),                      // 26: microinsurance.City
		(*CityListResult)(nil),            // 27: microinsurance.CityListResult
		(*timestamppb.Timestamp)(nil),     // 28: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),             // 29: google.protobuf.Empty
	}
)

var file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_depIdxs = []int32{
	5,  // 0: microinsurance.TransactRequest.Beneficiaries:type_name -> microinsurance.Person
	5,  // 1: microinsurance.TransactRequest.Dependents:type_name -> microinsurance.Person
	28, // 2: microinsurance.Insurance.Timestamp:type_name -> google.protobuf.Timestamp
	0,  // 3: microinsurance.GetTransactionListRequest.SortOrder:type_name -> microinsurance.SortOrder
	1,  // 4: microinsurance.GetTransactionListRequest.SortByColumn:type_name -> microinsurance.SortByColumn
	28, // 5: microinsurance.InsuranceTransaction.TrnDate:type_name -> google.protobuf.Timestamp
	5,  // 6: microinsurance.InsuranceTransaction.Beneficiaries:type_name -> microinsurance.Person
	5,  // 7: microinsurance.InsuranceTransaction.Dependents:type_name -> microinsurance.Person
	8,  // 8: microinsurance.InsuranceTransaction.TotAmt:type_name -> microinsurance.Amount
	9,  // 9: microinsurance.TransactionListResult.Transactions:type_name -> microinsurance.InsuranceTransaction
	11, // 10: microinsurance.ProductResult.Product:type_name -> microinsurance.InsuranceProduct
	12, // 11: microinsurance.ProductResult.Coverages:type_name -> microinsurance.Coverage
	18, // 12: microinsurance.OfferProduct.BeneficiaryPolicy:type_name -> microinsurance.MinMax
	20, // 13: microinsurance.OfferProduct.AgePolicy:type_name -> microinsurance.AgePolicy
	18, // 14: microinsurance.ActiveProduct.BeneficiaryPolicy:type_name -> microinsurance.MinMax
	18, // 15: microinsurance.ActiveProduct.DependentsPolicy:type_name -> microinsurance.MinMax
	20, // 16: microinsurance.ActiveProduct.AgePolicy:type_name -> microinsurance.AgePolicy
	19, // 17: microinsurance.AgePolicy.Insurer:type_name -> microinsurance.MinMaxAge
	21, // 18: microinsurance.AgePolicy.Dependents:type_name -> microinsurance.DependentsPolicy
	19, // 19: microinsurance.DependentsPolicy.Children:type_name -> microinsurance.MinMaxAge
	19, // 20: microinsurance.DependentsPolicy.Parents:type_name -> microinsurance.MinMaxAge
	19, // 21: microinsurance.DependentsPolicy.Siblings:type_name -> microinsurance.MinMaxAge
	19, // 22: microinsurance.DependentsPolicy.Spouse:type_name -> microinsurance.MinMaxAge
	17, // 23: microinsurance.GetProductListResult.Products:type_name -> microinsurance.ActiveProduct
	24, // 24: microinsurance.GetRelationshipsResult.Relationships:type_name -> microinsurance.Relationship
	26, // 25: microinsurance.CityListResult.Cities:type_name -> microinsurance.City
	2,  // 26: microinsurance.MicroInsuranceService.Transact:input_type -> microinsurance.TransactRequest
	3,  // 27: microinsurance.MicroInsuranceService.GetReprint:input_type -> microinsurance.GetReprintRequest
	4,  // 28: microinsurance.MicroInsuranceService.RetryTransaction:input_type -> microinsurance.RetryTransactionRequest
	7,  // 29: microinsurance.MicroInsuranceService.GetTransactionList:input_type -> microinsurance.GetTransactionListRequest
	14, // 30: microinsurance.MicroInsuranceService.GetProduct:input_type -> microinsurance.GetProductRequest
	15, // 31: microinsurance.MicroInsuranceService.GetOfferProduct:input_type -> microinsurance.GetOfferProductRequest
	22, // 32: microinsurance.MicroInsuranceService.CheckActiveProduct:input_type -> microinsurance.CheckActiveProductRequest
	29, // 33: microinsurance.MicroInsuranceService.GetProductList:input_type -> google.protobuf.Empty
	29, // 34: microinsurance.MicroInsuranceService.GetRelationships:input_type -> google.protobuf.Empty
	29, // 35: microinsurance.MicroInsuranceService.GetAllCities:input_type -> google.protobuf.Empty
	6,  // 36: microinsurance.MicroInsuranceService.Transact:output_type -> microinsurance.Insurance
	6,  // 37: microinsurance.MicroInsuranceService.GetReprint:output_type -> microinsurance.Insurance
	6,  // 38: microinsurance.MicroInsuranceService.RetryTransaction:output_type -> microinsurance.Insurance
	10, // 39: microinsurance.MicroInsuranceService.GetTransactionList:output_type -> microinsurance.TransactionListResult
	13, // 40: microinsurance.MicroInsuranceService.GetProduct:output_type -> microinsurance.ProductResult
	16, // 41: microinsurance.MicroInsuranceService.GetOfferProduct:output_type -> microinsurance.OfferProduct
	17, // 42: microinsurance.MicroInsuranceService.CheckActiveProduct:output_type -> microinsurance.ActiveProduct
	23, // 43: microinsurance.MicroInsuranceService.GetProductList:output_type -> microinsurance.GetProductListResult
	25, // 44: microinsurance.MicroInsuranceService.GetRelationships:output_type -> microinsurance.GetRelationshipsResult
	27, // 45: microinsurance.MicroInsuranceService.GetAllCities:output_type -> microinsurance.CityListResult
	36, // [36:46] is the sub-list for method output_type
	26, // [26:36] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Insurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsuranceTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsuranceProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfferProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinMaxAge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependentsPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckActiveProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationshipsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_microinsurance_all_proto_depIdxs = nil
}
