// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v2/partnercommission/all.proto

package partnercommission

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RemitType int32

const (
	RemitType_EMPTYSERVICETYPE RemitType = 0
	RemitType_REMITTANCE       RemitType = 1
	RemitType_BILLSPAYMENT     RemitType = 2
	RemitType_CASHINCASHOUT    RemitType = 3
	RemitType_MICROINSURANCE   RemitType = 4
)

// Enum value maps for RemitType.
var (
	RemitType_name = map[int32]string{
		0: "EMPTYSERVICETYPE",
		1: "REMITTANCE",
		2: "BILLSPAYMENT",
		3: "CASHINCASHOUT",
		4: "MICROINSURANCE",
	}
	RemitType_value = map[string]int32{
		"EMPTYSERVICETYPE": 0,
		"REMITTANCE":       1,
		"BILLSPAYMENT":     2,
		"CASHINCASHOUT":    3,
		"MICROINSURANCE":   4,
	}
)

func (x RemitType) Enum() *RemitType {
	p := new(RemitType)
	*p = x
	return p
}

func (x RemitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemitType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[0].Descriptor()
}

func (RemitType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[0]
}

func (x RemitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemitType.Descriptor instead.
func (RemitType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{0}
}

type BoundType int32

const (
	BoundType_EMPTYBOUNDTYPE BoundType = 0
	BoundType_INBOUND        BoundType = 1
	BoundType_OUTBOUND       BoundType = 2
	BoundType_OTHERS         BoundType = 3
)

// Enum value maps for BoundType.
var (
	BoundType_name = map[int32]string{
		0: "EMPTYBOUNDTYPE",
		1: "INBOUND",
		2: "OUTBOUND",
		3: "OTHERS",
	}
	BoundType_value = map[string]int32{
		"EMPTYBOUNDTYPE": 0,
		"INBOUND":        1,
		"OUTBOUND":       2,
		"OTHERS":         3,
	}
)

func (x BoundType) Enum() *BoundType {
	p := new(BoundType)
	*p = x
	return p
}

func (x BoundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoundType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[1].Descriptor()
}

func (BoundType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[1]
}

func (x BoundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoundType.Descriptor instead.
func (BoundType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{1}
}

type TierType int32

const (
	TierType_EMPTYTIERTYPE  TierType = 0
	TierType_FIXED          TierType = 1
	TierType_PERCENTAGE     TierType = 2
	TierType_TIERAMOUNT     TierType = 3
	TierType_TIERPERCENTAGE TierType = 4
)

// Enum value maps for TierType.
var (
	TierType_name = map[int32]string{
		0: "EMPTYTIERTYPE",
		1: "FIXED",
		2: "PERCENTAGE",
		3: "TIERAMOUNT",
		4: "TIERPERCENTAGE",
	}
	TierType_value = map[string]int32{
		"EMPTYTIERTYPE":  0,
		"FIXED":          1,
		"PERCENTAGE":     2,
		"TIERAMOUNT":     3,
		"TIERPERCENTAGE": 4,
	}
)

func (x TierType) Enum() *TierType {
	p := new(TierType)
	*p = x
	return p
}

func (x TierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TierType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[2].Descriptor()
}

func (TierType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[2]
}

func (x TierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TierType.Descriptor instead.
func (TierType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{2}
}

type TransactionType int32

const (
	TransactionType_EMPTYTRANSACTIONTYPE TransactionType = 0
	TransactionType_DIGITAL              TransactionType = 1
	TransactionType_OTC                  TransactionType = 2
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "EMPTYTRANSACTIONTYPE",
		1: "DIGITAL",
		2: "OTC",
	}
	TransactionType_value = map[string]int32{
		"EMPTYTRANSACTIONTYPE": 0,
		"DIGITAL":              1,
		"OTC":                  2,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[3].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes[3]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{3}
}

type PartnerCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Partner string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,3,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.partnercommission.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,4,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.partnercommission.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,5,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.partnercommission.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,6,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.partnercommission.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count     int32                  `protobuf:"varint,14,opt,name=Count,json=count,proto3" json:"count,omitempty"`
}

func (x *PartnerCommission) Reset() {
	*x = PartnerCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerCommission) ProtoMessage() {}

func (x *PartnerCommission) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerCommission.ProtoReflect.Descriptor instead.
func (*PartnerCommission) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{0}
}

func (x *PartnerCommission) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PartnerCommission) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *PartnerCommission) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *PartnerCommission) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *PartnerCommission) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *PartnerCommission) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *PartnerCommission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PartnerCommission) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *PartnerCommission) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *PartnerCommission) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PartnerCommission) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PartnerCommission) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PartnerCommission) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *PartnerCommission) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PartnerCommissionTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	PartnerCommissionID string `protobuf:"bytes,2,opt,name=PartnerCommissionID,json=partner_commission_id,proto3" json:"partner_commission_id,omitempty"`
	MinValue            string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue            string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount              string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *PartnerCommissionTier) Reset() {
	*x = PartnerCommissionTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerCommissionTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerCommissionTier) ProtoMessage() {}

func (x *PartnerCommissionTier) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerCommissionTier.ProtoReflect.Descriptor instead.
func (*PartnerCommissionTier) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{1}
}

func (x *PartnerCommissionTier) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PartnerCommissionTier) GetPartnerCommissionID() string {
	if x != nil {
		return x.PartnerCommissionID
	}
	return ""
}

func (x *PartnerCommissionTier) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *PartnerCommissionTier) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *PartnerCommissionTier) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreatePartnerCommissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partner string `protobuf:"bytes,1,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,2,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.partnercommission.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,3,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.partnercommission.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,4,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.partnercommission.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,5,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.partnercommission.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,6,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	CreatedBy string                 `protobuf:"bytes,9,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Created,json=created,proto3" json:"created,omitempty"`
}

func (x *CreatePartnerCommissionRequest) Reset() {
	*x = CreatePartnerCommissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnerCommissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnerCommissionRequest) ProtoMessage() {}

func (x *CreatePartnerCommissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnerCommissionRequest.ProtoReflect.Descriptor instead.
func (*CreatePartnerCommissionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePartnerCommissionRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *CreatePartnerCommissionRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *CreatePartnerCommissionRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *CreatePartnerCommissionRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *CreatePartnerCommissionRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *CreatePartnerCommissionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreatePartnerCommissionRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CreatePartnerCommissionRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CreatePartnerCommissionRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreatePartnerCommissionRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type CreatePartnerCommissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Partner string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,3,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.partnercommission.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,4,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.partnercommission.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,5,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.partnercommission.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,6,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.partnercommission.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *CreatePartnerCommissionResponse) Reset() {
	*x = CreatePartnerCommissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnerCommissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnerCommissionResponse) ProtoMessage() {}

func (x *CreatePartnerCommissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnerCommissionResponse.ProtoReflect.Descriptor instead.
func (*CreatePartnerCommissionResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePartnerCommissionResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CreatePartnerCommissionResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *CreatePartnerCommissionResponse) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *CreatePartnerCommissionResponse) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *CreatePartnerCommissionResponse) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *CreatePartnerCommissionResponse) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *CreatePartnerCommissionResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreatePartnerCommissionResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CreatePartnerCommissionResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CreatePartnerCommissionResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreatePartnerCommissionResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreatePartnerCommissionResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CreatePartnerCommissionResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type UpdatePartnerCommissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Partner string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,3,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.partnercommission.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,4,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.partnercommission.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,5,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.partnercommission.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,6,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.partnercommission.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=Created,json=created,proto3" json:"created,omitempty"`
}

func (x *UpdatePartnerCommissionRequest) Reset() {
	*x = UpdatePartnerCommissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnerCommissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerCommissionRequest) ProtoMessage() {}

func (x *UpdatePartnerCommissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerCommissionRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartnerCommissionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePartnerCommissionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdatePartnerCommissionRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpdatePartnerCommissionRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *UpdatePartnerCommissionRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *UpdatePartnerCommissionRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *UpdatePartnerCommissionRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *UpdatePartnerCommissionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpdatePartnerCommissionRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *UpdatePartnerCommissionRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *UpdatePartnerCommissionRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdatePartnerCommissionRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpdatePartnerCommissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Partner string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,3,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.partnercommission.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,4,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.partnercommission.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,5,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.partnercommission.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,6,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.partnercommission.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdatePartnerCommissionResponse) Reset() {
	*x = UpdatePartnerCommissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnerCommissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerCommissionResponse) ProtoMessage() {}

func (x *UpdatePartnerCommissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerCommissionResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartnerCommissionResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePartnerCommissionResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdatePartnerCommissionResponse) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *UpdatePartnerCommissionResponse) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *UpdatePartnerCommissionResponse) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *UpdatePartnerCommissionResponse) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *UpdatePartnerCommissionResponse) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *UpdatePartnerCommissionResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpdatePartnerCommissionResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *UpdatePartnerCommissionResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *UpdatePartnerCommissionResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdatePartnerCommissionResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdatePartnerCommissionResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UpdatePartnerCommissionResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type CreatePartnerCommissionTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommissionTier []*PartnerCommissionTier `protobuf:"bytes,1,rep,name=CommissionTier,json=commission_tier,proto3" json:"commission_tier,omitempty"`
}

func (x *CreatePartnerCommissionTierRequest) Reset() {
	*x = CreatePartnerCommissionTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnerCommissionTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnerCommissionTierRequest) ProtoMessage() {}

func (x *CreatePartnerCommissionTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnerCommissionTierRequest.ProtoReflect.Descriptor instead.
func (*CreatePartnerCommissionTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePartnerCommissionTierRequest) GetCommissionTier() []*PartnerCommissionTier {
	if x != nil {
		return x.CommissionTier
	}
	return nil
}

type CreatePartnerCommissionTierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommissionTier []*PartnerCommissionTier `protobuf:"bytes,1,rep,name=CommissionTier,json=commission_tier,proto3" json:"commission_tier,omitempty"`
}

func (x *CreatePartnerCommissionTierResponse) Reset() {
	*x = CreatePartnerCommissionTierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartnerCommissionTierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartnerCommissionTierResponse) ProtoMessage() {}

func (x *CreatePartnerCommissionTierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartnerCommissionTierResponse.ProtoReflect.Descriptor instead.
func (*CreatePartnerCommissionTierResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePartnerCommissionTierResponse) GetCommissionTier() []*PartnerCommissionTier {
	if x != nil {
		return x.CommissionTier
	}
	return nil
}

type UpdatePartnerCommissionTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommissionTier []*PartnerCommissionTier `protobuf:"bytes,1,rep,name=CommissionTier,json=commission_tier,proto3" json:"commission_tier,omitempty"`
}

func (x *UpdatePartnerCommissionTierRequest) Reset() {
	*x = UpdatePartnerCommissionTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnerCommissionTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerCommissionTierRequest) ProtoMessage() {}

func (x *UpdatePartnerCommissionTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerCommissionTierRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartnerCommissionTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePartnerCommissionTierRequest) GetCommissionTier() []*PartnerCommissionTier {
	if x != nil {
		return x.CommissionTier
	}
	return nil
}

type UpdatePartnerCommissionTierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommissionTier []*PartnerCommissionTier `protobuf:"bytes,1,rep,name=CommissionTier,json=commission_tier,proto3" json:"commission_tier,omitempty"`
}

func (x *UpdatePartnerCommissionTierResponse) Reset() {
	*x = UpdatePartnerCommissionTierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartnerCommissionTierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerCommissionTierResponse) ProtoMessage() {}

func (x *UpdatePartnerCommissionTierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerCommissionTierResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartnerCommissionTierResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{9}
}

func (x *UpdatePartnerCommissionTierResponse) GetCommissionTier() []*PartnerCommissionTier {
	if x != nil {
		return x.CommissionTier
	}
	return nil
}

type GetPartnerCommissionsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Partner string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,3,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.partnercommission.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,4,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.partnercommission.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,5,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.partnercommission.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,6,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.partnercommission.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count     int32                  `protobuf:"varint,14,opt,name=Count,json=count,proto3" json:"count,omitempty"`
}

func (x *GetPartnerCommissionsListRequest) Reset() {
	*x = GetPartnerCommissionsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerCommissionsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerCommissionsListRequest) ProtoMessage() {}

func (x *GetPartnerCommissionsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerCommissionsListRequest.ProtoReflect.Descriptor instead.
func (*GetPartnerCommissionsListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{10}
}

func (x *GetPartnerCommissionsListRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetPartnerCommissionsListRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *GetPartnerCommissionsListRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *GetPartnerCommissionsListRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *GetPartnerCommissionsListRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *GetPartnerCommissionsListRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *GetPartnerCommissionsListRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetPartnerCommissionsListRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetPartnerCommissionsListRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetPartnerCommissionsListRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetPartnerCommissionsListRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *GetPartnerCommissionsListRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetPartnerCommissionsListRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *GetPartnerCommissionsListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetPartnerCommissionsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*PartnerCommission `protobuf:"bytes,1,rep,name=Results,json=results,proto3" json:"results,omitempty"`
}

func (x *GetPartnerCommissionsListResponse) Reset() {
	*x = GetPartnerCommissionsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerCommissionsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerCommissionsListResponse) ProtoMessage() {}

func (x *GetPartnerCommissionsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerCommissionsListResponse.ProtoReflect.Descriptor instead.
func (*GetPartnerCommissionsListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{11}
}

func (x *GetPartnerCommissionsListResponse) GetResults() []*PartnerCommission {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetPartnerCommissionsTierListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	PartnerCommissionID string `protobuf:"bytes,2,opt,name=PartnerCommissionID,json=partner_commission_id,proto3" json:"partner_commission_id,omitempty"`
	MinValue            string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue            string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount              string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *GetPartnerCommissionsTierListRequest) Reset() {
	*x = GetPartnerCommissionsTierListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerCommissionsTierListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerCommissionsTierListRequest) ProtoMessage() {}

func (x *GetPartnerCommissionsTierListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerCommissionsTierListRequest.ProtoReflect.Descriptor instead.
func (*GetPartnerCommissionsTierListRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{12}
}

func (x *GetPartnerCommissionsTierListRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetPartnerCommissionsTierListRequest) GetPartnerCommissionID() string {
	if x != nil {
		return x.PartnerCommissionID
	}
	return ""
}

func (x *GetPartnerCommissionsTierListRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *GetPartnerCommissionsTierListRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *GetPartnerCommissionsTierListRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetPartnerCommissionsTierListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*PartnerCommissionTier `protobuf:"bytes,1,rep,name=Results,json=results,proto3" json:"results,omitempty"`
}

func (x *GetPartnerCommissionsTierListResponse) Reset() {
	*x = GetPartnerCommissionsTierListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerCommissionsTierListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerCommissionsTierListResponse) ProtoMessage() {}

func (x *GetPartnerCommissionsTierListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerCommissionsTierListResponse.ProtoReflect.Descriptor instead.
func (*GetPartnerCommissionsTierListResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{13}
}

func (x *GetPartnerCommissionsTierListResponse) GetResults() []*PartnerCommissionTier {
	if x != nil {
		return x.Results
	}
	return nil
}

type DeletePartnerCommissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Partner string `protobuf:"bytes,2,opt,name=Partner,json=partner,proto3" json:"partner,omitempty"`
	// The bound type is two type of transaction one is inbound, other one is outbound
	BoundType BoundType `protobuf:"varint,3,opt,name=BoundType,json=bound_type,proto3,enum=petnet.v2.partnercommission.BoundType" json:"bound_type,omitempty"`
	// The remit type is the different services we are offering for example REMITTANCE, BILLSPAYMENT
	RemitType RemitType `protobuf:"varint,4,opt,name=RemitType,json=remit_type,proto3,enum=petnet.v2.partnercommission.RemitType" json:"remit_type,omitempty"`
	// There is transaction type one is digital, other one is otc
	TransactionType TransactionType `protobuf:"varint,5,opt,name=TransactionType,json=transaction_type,proto3,enum=petnet.v2.partnercommission.TransactionType" json:"transaction_type,omitempty"`
	// There is tier type is fixed, percentage, fixed_tier, percentage_tier
	TierType  TierType               `protobuf:"varint,6,opt,name=TierType,json=tier_type,proto3,enum=petnet.v2.partnercommission.TierType" json:"tier_type,omitempty"`
	Amount    string                 `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	CreatedBy string                 `protobuf:"bytes,10,opt,name=CreatedBy,json=created_by,proto3" json:"created_by,omitempty"`
	UpdatedBy string                 `protobuf:"bytes,11,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
	Count     int32                  `protobuf:"varint,14,opt,name=Count,json=count,proto3" json:"count,omitempty"`
}

func (x *DeletePartnerCommissionRequest) Reset() {
	*x = DeletePartnerCommissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePartnerCommissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartnerCommissionRequest) ProtoMessage() {}

func (x *DeletePartnerCommissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartnerCommissionRequest.ProtoReflect.Descriptor instead.
func (*DeletePartnerCommissionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{14}
}

func (x *DeletePartnerCommissionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeletePartnerCommissionRequest) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *DeletePartnerCommissionRequest) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_EMPTYBOUNDTYPE
}

func (x *DeletePartnerCommissionRequest) GetRemitType() RemitType {
	if x != nil {
		return x.RemitType
	}
	return RemitType_EMPTYSERVICETYPE
}

func (x *DeletePartnerCommissionRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_EMPTYTRANSACTIONTYPE
}

func (x *DeletePartnerCommissionRequest) GetTierType() TierType {
	if x != nil {
		return x.TierType
	}
	return TierType_EMPTYTIERTYPE
}

func (x *DeletePartnerCommissionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DeletePartnerCommissionRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *DeletePartnerCommissionRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *DeletePartnerCommissionRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *DeletePartnerCommissionRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *DeletePartnerCommissionRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DeletePartnerCommissionRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *DeletePartnerCommissionRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeletePartnerCommissionTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	PartnerCommissionID string `protobuf:"bytes,2,opt,name=PartnerCommissionID,json=partner_commission_id,proto3" json:"partner_commission_id,omitempty"`
	MinValue            string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue            string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount              string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *DeletePartnerCommissionTierRequest) Reset() {
	*x = DeletePartnerCommissionTierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePartnerCommissionTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartnerCommissionTierRequest) ProtoMessage() {}

func (x *DeletePartnerCommissionTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartnerCommissionTierRequest.ProtoReflect.Descriptor instead.
func (*DeletePartnerCommissionTierRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{15}
}

func (x *DeletePartnerCommissionTierRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeletePartnerCommissionTierRequest) GetPartnerCommissionID() string {
	if x != nil {
		return x.PartnerCommissionID
	}
	return ""
}

func (x *DeletePartnerCommissionTierRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *DeletePartnerCommissionTierRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *DeletePartnerCommissionTierRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type DeletePartnerCommissionTierByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	PartnerCommissionID string `protobuf:"bytes,2,opt,name=PartnerCommissionID,json=partner_commission_id,proto3" json:"partner_commission_id,omitempty"`
	MinValue            string `protobuf:"bytes,3,opt,name=MinValue,json=min_value,proto3" json:"min_value,omitempty"`
	MaxValue            string `protobuf:"bytes,4,opt,name=MaxValue,json=max_value,proto3" json:"max_value,omitempty"`
	Amount              string `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *DeletePartnerCommissionTierByIdRequest) Reset() {
	*x = DeletePartnerCommissionTierByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePartnerCommissionTierByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePartnerCommissionTierByIdRequest) ProtoMessage() {}

func (x *DeletePartnerCommissionTierByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePartnerCommissionTierByIdRequest.ProtoReflect.Descriptor instead.
func (*DeletePartnerCommissionTierByIdRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP(), []int{16}
}

func (x *DeletePartnerCommissionTierByIdRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeletePartnerCommissionTierByIdRequest) GetPartnerCommissionID() string {
	if x != nil {
		return x.PartnerCommissionID
	}
	return ""
}

func (x *DeletePartnerCommissionTierByIdRequest) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *DeletePartnerCommissionTierByIdRequest) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *DeletePartnerCommissionTierByIdRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

var File_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDesc = []byte{
	0x0a, 0x37, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe2, 0x06, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xaf, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x44, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3b, 0x0a, 0x39,
	0xd2, 0x01, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c, 0x06, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a,
	0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x4e, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x92, 0x41, 0x45, 0x0a, 0x43, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2,
	0x01, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x09, 0x74,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xce, 0x06, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x54, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa1, 0x06, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x54, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x47, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x3e, 0x0a,
	0x3c, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0xd2, 0x01, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xce, 0x06,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x95,
	0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65,
	0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x96, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xd8, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x3a,
	0x49, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0xd2, 0x01, 0x02, 0x69,
	0x64, 0xd2, 0x01, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x23, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x74,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x83, 0x07, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x29,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x18, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x0f, 0x0a, 0x0d, 0xd2, 0x01, 0x0a, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x9d, 0x02,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x23, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x92, 0x41, 0x1a, 0x0a, 0x18, 0xd2, 0x01, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x89, 0x01,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xab, 0x07, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x54, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x74, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x40, 0x0a,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x42, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x39, 0x0a, 0x37,
	0xd2, 0x01, 0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x23, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0xd2, 0x01, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08,
	0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2,
	0x01, 0x02, 0x69, 0x64, 0x2a, 0x82, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a,
	0x52, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x14, 0x0a, 0x0c, 0x42, 0x49, 0x4c, 0x4c, 0x53, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x43, 0x41, 0x53, 0x48, 0x49, 0x4e,
	0x43, 0x41, 0x53, 0x48, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a,
	0x0e, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x5a, 0x0a, 0x09, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f,
	0x0a, 0x07, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x10, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0e, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x03, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x74, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x0d, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x54, 0x49, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x54,
	0x49, 0x45, 0x52, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x16, 0x0a, 0x0e, 0x54, 0x49, 0x45, 0x52, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x51, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x14, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07,
	0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a,
	0x03, 0x4f, 0x54, 0x43, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0x9f,
	0x21, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf9, 0x03, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xde, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb3, 0x02, 0x0a,
	0x12, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x72, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x6b, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x49, 0x0a,
	0x47, 0x1a, 0x45, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf3, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd8,
	0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xad, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4a, 0x6c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x65, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x43, 0x0a, 0x41, 0x1a, 0x3f, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d,
	0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31,
	0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01,
	0x2a, 0x1a, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x00, 0x30, 0x00, 0x12, 0x98, 0x04,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf1, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc1, 0x02, 0x0a, 0x12, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x2e, 0x1a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x4a, 0x76, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x6f, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x4d, 0x0a, 0x4b, 0x1a, 0x49, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x74, 0x69, 0x65, 0x72, 0x28, 0x00, 0x30, 0x00, 0x12, 0x98, 0x04, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc1, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x54, 0x69, 0x65, 0x72, 0x2e, 0x1a, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x4a, 0x76, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x6f,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x4d, 0x0a, 0x4b, 0x1a, 0x49, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20,
	0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a,
	0x01, 0x2a, 0x1a, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x28,
	0x00, 0x30, 0x00, 0x12, 0x8d, 0x04, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3d, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xec, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc4, 0x02, 0x0a, 0x12, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4a, 0x74, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x6d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x4b, 0x0a, 0x49, 0x1a, 0x47,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xac, 0x04, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xff, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd2, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x1a, 0x29, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x4a, 0x78, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x71,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x4f, 0x0a, 0x4d, 0x1a, 0x4b, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xca, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0xd7, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xaf, 0x01,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x1a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x64, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x5d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x12, 0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x00, 0x12,
	0xdc, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12,
	0x3f, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xe1, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x92, 0x41, 0xb4, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x1a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65,
	0x72, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x4a, 0x64, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5d, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x3b, 0x0a, 0x39,
	0x1a, 0x37, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a,
	0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x65, 0x72, 0x28, 0x00, 0x12, 0xea,
	0x02, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x43, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xe7, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xb4, 0x01, 0x0a, 0x12, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x1a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x64, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x5d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x2e, 0x12, 0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x69, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x2d, 0x69, 0x64, 0x28, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00,
	0x42, 0x5a, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x3f, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73,
	0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00,
	0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 17)
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_goTypes   = []interface{}{
		(RemitType)(0),                                 // 0: petnet.v2.partnercommission.RemitType
		(BoundType)(0),                                 // 1: petnet.v2.partnercommission.BoundType
		(TierType)(0),                                  // 2: petnet.v2.partnercommission.TierType
		(TransactionType)(0),                           // 3: petnet.v2.partnercommission.TransactionType
		(*PartnerCommission)(nil),                      // 4: petnet.v2.partnercommission.PartnerCommission
		(*PartnerCommissionTier)(nil),                  // 5: petnet.v2.partnercommission.PartnerCommissionTier
		(*CreatePartnerCommissionRequest)(nil),         // 6: petnet.v2.partnercommission.CreatePartnerCommissionRequest
		(*CreatePartnerCommissionResponse)(nil),        // 7: petnet.v2.partnercommission.CreatePartnerCommissionResponse
		(*UpdatePartnerCommissionRequest)(nil),         // 8: petnet.v2.partnercommission.UpdatePartnerCommissionRequest
		(*UpdatePartnerCommissionResponse)(nil),        // 9: petnet.v2.partnercommission.UpdatePartnerCommissionResponse
		(*CreatePartnerCommissionTierRequest)(nil),     // 10: petnet.v2.partnercommission.CreatePartnerCommissionTierRequest
		(*CreatePartnerCommissionTierResponse)(nil),    // 11: petnet.v2.partnercommission.CreatePartnerCommissionTierResponse
		(*UpdatePartnerCommissionTierRequest)(nil),     // 12: petnet.v2.partnercommission.UpdatePartnerCommissionTierRequest
		(*UpdatePartnerCommissionTierResponse)(nil),    // 13: petnet.v2.partnercommission.UpdatePartnerCommissionTierResponse
		(*GetPartnerCommissionsListRequest)(nil),       // 14: petnet.v2.partnercommission.GetPartnerCommissionsListRequest
		(*GetPartnerCommissionsListResponse)(nil),      // 15: petnet.v2.partnercommission.GetPartnerCommissionsListResponse
		(*GetPartnerCommissionsTierListRequest)(nil),   // 16: petnet.v2.partnercommission.GetPartnerCommissionsTierListRequest
		(*GetPartnerCommissionsTierListResponse)(nil),  // 17: petnet.v2.partnercommission.GetPartnerCommissionsTierListResponse
		(*DeletePartnerCommissionRequest)(nil),         // 18: petnet.v2.partnercommission.DeletePartnerCommissionRequest
		(*DeletePartnerCommissionTierRequest)(nil),     // 19: petnet.v2.partnercommission.DeletePartnerCommissionTierRequest
		(*DeletePartnerCommissionTierByIdRequest)(nil), // 20: petnet.v2.partnercommission.DeletePartnerCommissionTierByIdRequest
		(*timestamppb.Timestamp)(nil),                  // 21: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),                          // 22: google.protobuf.Empty
	}
)

var file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_depIdxs = []int32{
	1,  // 0: petnet.v2.partnercommission.PartnerCommission.BoundType:type_name -> petnet.v2.partnercommission.BoundType
	0,  // 1: petnet.v2.partnercommission.PartnerCommission.RemitType:type_name -> petnet.v2.partnercommission.RemitType
	3,  // 2: petnet.v2.partnercommission.PartnerCommission.TransactionType:type_name -> petnet.v2.partnercommission.TransactionType
	2,  // 3: petnet.v2.partnercommission.PartnerCommission.TierType:type_name -> petnet.v2.partnercommission.TierType
	21, // 4: petnet.v2.partnercommission.PartnerCommission.StartDate:type_name -> google.protobuf.Timestamp
	21, // 5: petnet.v2.partnercommission.PartnerCommission.EndDate:type_name -> google.protobuf.Timestamp
	21, // 6: petnet.v2.partnercommission.PartnerCommission.Created:type_name -> google.protobuf.Timestamp
	21, // 7: petnet.v2.partnercommission.PartnerCommission.Updated:type_name -> google.protobuf.Timestamp
	1,  // 8: petnet.v2.partnercommission.CreatePartnerCommissionRequest.BoundType:type_name -> petnet.v2.partnercommission.BoundType
	0,  // 9: petnet.v2.partnercommission.CreatePartnerCommissionRequest.RemitType:type_name -> petnet.v2.partnercommission.RemitType
	3,  // 10: petnet.v2.partnercommission.CreatePartnerCommissionRequest.TransactionType:type_name -> petnet.v2.partnercommission.TransactionType
	2,  // 11: petnet.v2.partnercommission.CreatePartnerCommissionRequest.TierType:type_name -> petnet.v2.partnercommission.TierType
	21, // 12: petnet.v2.partnercommission.CreatePartnerCommissionRequest.StartDate:type_name -> google.protobuf.Timestamp
	21, // 13: petnet.v2.partnercommission.CreatePartnerCommissionRequest.EndDate:type_name -> google.protobuf.Timestamp
	21, // 14: petnet.v2.partnercommission.CreatePartnerCommissionRequest.Created:type_name -> google.protobuf.Timestamp
	1,  // 15: petnet.v2.partnercommission.CreatePartnerCommissionResponse.BoundType:type_name -> petnet.v2.partnercommission.BoundType
	0,  // 16: petnet.v2.partnercommission.CreatePartnerCommissionResponse.RemitType:type_name -> petnet.v2.partnercommission.RemitType
	3,  // 17: petnet.v2.partnercommission.CreatePartnerCommissionResponse.TransactionType:type_name -> petnet.v2.partnercommission.TransactionType
	2,  // 18: petnet.v2.partnercommission.CreatePartnerCommissionResponse.TierType:type_name -> petnet.v2.partnercommission.TierType
	21, // 19: petnet.v2.partnercommission.CreatePartnerCommissionResponse.StartDate:type_name -> google.protobuf.Timestamp
	21, // 20: petnet.v2.partnercommission.CreatePartnerCommissionResponse.EndDate:type_name -> google.protobuf.Timestamp
	21, // 21: petnet.v2.partnercommission.CreatePartnerCommissionResponse.Created:type_name -> google.protobuf.Timestamp
	21, // 22: petnet.v2.partnercommission.CreatePartnerCommissionResponse.Updated:type_name -> google.protobuf.Timestamp
	1,  // 23: petnet.v2.partnercommission.UpdatePartnerCommissionRequest.BoundType:type_name -> petnet.v2.partnercommission.BoundType
	0,  // 24: petnet.v2.partnercommission.UpdatePartnerCommissionRequest.RemitType:type_name -> petnet.v2.partnercommission.RemitType
	3,  // 25: petnet.v2.partnercommission.UpdatePartnerCommissionRequest.TransactionType:type_name -> petnet.v2.partnercommission.TransactionType
	2,  // 26: petnet.v2.partnercommission.UpdatePartnerCommissionRequest.TierType:type_name -> petnet.v2.partnercommission.TierType
	21, // 27: petnet.v2.partnercommission.UpdatePartnerCommissionRequest.StartDate:type_name -> google.protobuf.Timestamp
	21, // 28: petnet.v2.partnercommission.UpdatePartnerCommissionRequest.EndDate:type_name -> google.protobuf.Timestamp
	21, // 29: petnet.v2.partnercommission.UpdatePartnerCommissionRequest.Created:type_name -> google.protobuf.Timestamp
	1,  // 30: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.BoundType:type_name -> petnet.v2.partnercommission.BoundType
	0,  // 31: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.RemitType:type_name -> petnet.v2.partnercommission.RemitType
	3,  // 32: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.TransactionType:type_name -> petnet.v2.partnercommission.TransactionType
	2,  // 33: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.TierType:type_name -> petnet.v2.partnercommission.TierType
	21, // 34: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.StartDate:type_name -> google.protobuf.Timestamp
	21, // 35: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.EndDate:type_name -> google.protobuf.Timestamp
	21, // 36: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.Created:type_name -> google.protobuf.Timestamp
	21, // 37: petnet.v2.partnercommission.UpdatePartnerCommissionResponse.Updated:type_name -> google.protobuf.Timestamp
	5,  // 38: petnet.v2.partnercommission.CreatePartnerCommissionTierRequest.CommissionTier:type_name -> petnet.v2.partnercommission.PartnerCommissionTier
	5,  // 39: petnet.v2.partnercommission.CreatePartnerCommissionTierResponse.CommissionTier:type_name -> petnet.v2.partnercommission.PartnerCommissionTier
	5,  // 40: petnet.v2.partnercommission.UpdatePartnerCommissionTierRequest.CommissionTier:type_name -> petnet.v2.partnercommission.PartnerCommissionTier
	5,  // 41: petnet.v2.partnercommission.UpdatePartnerCommissionTierResponse.CommissionTier:type_name -> petnet.v2.partnercommission.PartnerCommissionTier
	1,  // 42: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.BoundType:type_name -> petnet.v2.partnercommission.BoundType
	0,  // 43: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.RemitType:type_name -> petnet.v2.partnercommission.RemitType
	3,  // 44: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.TransactionType:type_name -> petnet.v2.partnercommission.TransactionType
	2,  // 45: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.TierType:type_name -> petnet.v2.partnercommission.TierType
	21, // 46: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.StartDate:type_name -> google.protobuf.Timestamp
	21, // 47: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.EndDate:type_name -> google.protobuf.Timestamp
	21, // 48: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.Created:type_name -> google.protobuf.Timestamp
	21, // 49: petnet.v2.partnercommission.GetPartnerCommissionsListRequest.Updated:type_name -> google.protobuf.Timestamp
	4,  // 50: petnet.v2.partnercommission.GetPartnerCommissionsListResponse.Results:type_name -> petnet.v2.partnercommission.PartnerCommission
	5,  // 51: petnet.v2.partnercommission.GetPartnerCommissionsTierListResponse.Results:type_name -> petnet.v2.partnercommission.PartnerCommissionTier
	1,  // 52: petnet.v2.partnercommission.DeletePartnerCommissionRequest.BoundType:type_name -> petnet.v2.partnercommission.BoundType
	0,  // 53: petnet.v2.partnercommission.DeletePartnerCommissionRequest.RemitType:type_name -> petnet.v2.partnercommission.RemitType
	3,  // 54: petnet.v2.partnercommission.DeletePartnerCommissionRequest.TransactionType:type_name -> petnet.v2.partnercommission.TransactionType
	2,  // 55: petnet.v2.partnercommission.DeletePartnerCommissionRequest.TierType:type_name -> petnet.v2.partnercommission.TierType
	21, // 56: petnet.v2.partnercommission.DeletePartnerCommissionRequest.StartDate:type_name -> google.protobuf.Timestamp
	21, // 57: petnet.v2.partnercommission.DeletePartnerCommissionRequest.EndDate:type_name -> google.protobuf.Timestamp
	21, // 58: petnet.v2.partnercommission.DeletePartnerCommissionRequest.Created:type_name -> google.protobuf.Timestamp
	21, // 59: petnet.v2.partnercommission.DeletePartnerCommissionRequest.Updated:type_name -> google.protobuf.Timestamp
	6,  // 60: petnet.v2.partnercommission.PartnerCommissionService.CreatePartnerCommission:input_type -> petnet.v2.partnercommission.CreatePartnerCommissionRequest
	8,  // 61: petnet.v2.partnercommission.PartnerCommissionService.UpdatePartnerCommission:input_type -> petnet.v2.partnercommission.UpdatePartnerCommissionRequest
	10, // 62: petnet.v2.partnercommission.PartnerCommissionService.CreatePartnerCommissionTier:input_type -> petnet.v2.partnercommission.CreatePartnerCommissionTierRequest
	12, // 63: petnet.v2.partnercommission.PartnerCommissionService.UpdatePartnerCommissionTier:input_type -> petnet.v2.partnercommission.UpdatePartnerCommissionTierRequest
	14, // 64: petnet.v2.partnercommission.PartnerCommissionService.GetPartnerCommissionsList:input_type -> petnet.v2.partnercommission.GetPartnerCommissionsListRequest
	16, // 65: petnet.v2.partnercommission.PartnerCommissionService.GetPartnerCommissionsTierList:input_type -> petnet.v2.partnercommission.GetPartnerCommissionsTierListRequest
	18, // 66: petnet.v2.partnercommission.PartnerCommissionService.DeletePartnerCommission:input_type -> petnet.v2.partnercommission.DeletePartnerCommissionRequest
	19, // 67: petnet.v2.partnercommission.PartnerCommissionService.DeletePartnerCommissionTier:input_type -> petnet.v2.partnercommission.DeletePartnerCommissionTierRequest
	20, // 68: petnet.v2.partnercommission.PartnerCommissionService.DeletePartnerCommissionTierById:input_type -> petnet.v2.partnercommission.DeletePartnerCommissionTierByIdRequest
	7,  // 69: petnet.v2.partnercommission.PartnerCommissionService.CreatePartnerCommission:output_type -> petnet.v2.partnercommission.CreatePartnerCommissionResponse
	9,  // 70: petnet.v2.partnercommission.PartnerCommissionService.UpdatePartnerCommission:output_type -> petnet.v2.partnercommission.UpdatePartnerCommissionResponse
	11, // 71: petnet.v2.partnercommission.PartnerCommissionService.CreatePartnerCommissionTier:output_type -> petnet.v2.partnercommission.CreatePartnerCommissionTierResponse
	13, // 72: petnet.v2.partnercommission.PartnerCommissionService.UpdatePartnerCommissionTier:output_type -> petnet.v2.partnercommission.UpdatePartnerCommissionTierResponse
	15, // 73: petnet.v2.partnercommission.PartnerCommissionService.GetPartnerCommissionsList:output_type -> petnet.v2.partnercommission.GetPartnerCommissionsListResponse
	17, // 74: petnet.v2.partnercommission.PartnerCommissionService.GetPartnerCommissionsTierList:output_type -> petnet.v2.partnercommission.GetPartnerCommissionsTierListResponse
	22, // 75: petnet.v2.partnercommission.PartnerCommissionService.DeletePartnerCommission:output_type -> google.protobuf.Empty
	22, // 76: petnet.v2.partnercommission.PartnerCommissionService.DeletePartnerCommissionTier:output_type -> google.protobuf.Empty
	22, // 77: petnet.v2.partnercommission.PartnerCommissionService.DeletePartnerCommissionTierById:output_type -> google.protobuf.Empty
	69, // [69:78] is the sub-list for method output_type
	60, // [60:69] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerCommissionTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnerCommissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnerCommissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnerCommissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnerCommissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnerCommissionTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartnerCommissionTierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnerCommissionTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartnerCommissionTierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerCommissionsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerCommissionsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerCommissionsTierListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerCommissionsTierListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePartnerCommissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePartnerCommissionTierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePartnerCommissionTierByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v2_partnercommission_all_proto_depIdxs = nil
}
