// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/rbac/gunk/v1/authenticate/all.proto

package authenticate

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	mfa "brank.as/rbac/gunk/v1/mfa"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=Username,json=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password,proto3" json:"password,omitempty"`
	// Auth Client ID for identifying the organization that is requesting the session.
	ClientID string `protobuf:"bytes,3,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	// Additional or alternative form inputs for authentication.
	Extra map[string]string `protobuf:"bytes,4,rep,name=Extra,json=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// MFA event identifier for confirming user identity.
	MFAEventID string `protobuf:"bytes,5,opt,name=MFAEventID,json=mfa_event_id,proto3" json:"mfa_event_id,omitempty"`
	// Expected type of MFA.
	MFAType mfa.MFA `protobuf:"varint,6,opt,name=MFAType,json=mfa_type,proto3,enum=mfa.MFA" json:"mfa_type,omitempty"`
	// MFA Token for authentication.
	MFAToken string `protobuf:"bytes,7,opt,name=MFAToken,json=mfa_token,proto3" json:"mfa_token,omitempty"`
	// Auth Subject ID for identifying the user that is being validated.
	Subject string `protobuf:"bytes,8,opt,name=Subject,json=subject,proto3" json:"subject,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescGZIP(), []int{0}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *LoginRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *LoginRequest) GetMFAEventID() string {
	if x != nil {
		return x.MFAEventID
	}
	return ""
}

func (x *LoginRequest) GetMFAType() mfa.MFA {
	if x != nil {
		return x.MFAType
	}
	return mfa.MFA_PASS
}

func (x *LoginRequest) GetMFAToken() string {
	if x != nil {
		return x.MFAToken
	}
	return ""
}

func (x *LoginRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User unique identifier.
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// Organization unique identifier.
	OrgID string `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	// Internal session data, will be accessible in authentication middleware.
	Session map[string]string `protobuf:"bytes,3,rep,name=Session,json=session,proto3" json:"session,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Public session data, will be accessible in OpenID userinfo endpoint.
	OpenID map[string]string `protobuf:"bytes,4,rep,name=OpenID,json=open_id,proto3" json:"open_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Returned when MFA is required before the session is created.
	MFAEventID string `protobuf:"bytes,5,opt,name=MFAEventID,json=mfa_event_id,proto3" json:"mfa_event_id,omitempty"`
	// Expected type of MFA.
	MFAType mfa.MFA `protobuf:"varint,6,opt,name=MFAType,json=mfa_type,proto3,enum=mfa.MFA" json:"mfa_type,omitempty"`
	// Included when password is expiring.
	PasswordExpiry *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=PasswordExpiry,json=password_expiry,proto3" json:"password_expiry,omitempty"`
	// Password change/reset is required.  Login cannot complete until reset is complete.
	ResetRequired bool `protobuf:"varint,8,opt,name=ResetRequired,json=reset_required,proto3" json:"reset_required,omitempty"`
	// Auth attempt count.
	Attempt int32 `protobuf:"varint,9,opt,name=Attempt,json=attempt,proto3" json:"attempt,omitempty"`
	// User login is required or the user's session is inconsistent.
	// Identity to be authenticated must be set in `UserID` field.
	ForceLogin bool `protobuf:"varint,10,opt,name=ForceLogin,json=force_login,proto3" json:"force_login,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescGZIP(), []int{1}
}

func (x *Session) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Session) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Session) GetSession() map[string]string {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Session) GetOpenID() map[string]string {
	if x != nil {
		return x.OpenID
	}
	return nil
}

func (x *Session) GetMFAEventID() string {
	if x != nil {
		return x.MFAEventID
	}
	return ""
}

func (x *Session) GetMFAType() mfa.MFA {
	if x != nil {
		return x.MFAType
	}
	return mfa.MFA_PASS
}

func (x *Session) GetPasswordExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.PasswordExpiry
	}
	return nil
}

func (x *Session) GetResetRequired() bool {
	if x != nil {
		return x.ResetRequired
	}
	return false
}

func (x *Session) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *Session) GetForceLogin() bool {
	if x != nil {
		return x.ForceLogin
	}
	return false
}

type GetSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User unique identifier.
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// Auth Client ID for identifying the organization that is requesting the session.
	ClientID string `protobuf:"bytes,2,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	// Additional or alternative form inputs for authentication.
	Extra map[string]string `protobuf:"bytes,3,rep,name=Extra,json=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescGZIP(), []int{2}
}

func (x *GetSessionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetSessionRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *GetSessionRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RetryMFARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auth Subject ID for identifying the user that is being validated.
	Subject string `protobuf:"bytes,1,opt,name=Subject,json=subject,proto3" json:"subject,omitempty"`
	// Auth Client ID for identifying the organization that is requesting the session.
	ClientID string `protobuf:"bytes,2,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	// MFA event identifier for confirming user identity.
	MFAEventID string `protobuf:"bytes,3,opt,name=MFAEventID,json=mfa_event_id,proto3" json:"mfa_event_id,omitempty"`
	// Expected type of MFA.
	MFAType mfa.MFA `protobuf:"varint,4,opt,name=MFAType,json=mfa_type,proto3,enum=mfa.MFA" json:"mfa_type,omitempty"`
}

func (x *RetryMFARequest) Reset() {
	*x = RetryMFARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryMFARequest) ProtoMessage() {}

func (x *RetryMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryMFARequest.ProtoReflect.Descriptor instead.
func (*RetryMFARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescGZIP(), []int{3}
}

func (x *RetryMFARequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RetryMFARequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *RetryMFARequest) GetMFAEventID() string {
	if x != nil {
		return x.MFAEventID
	}
	return ""
}

func (x *RetryMFARequest) GetMFAType() mfa.MFA {
	if x != nil {
		return x.MFAType
	}
	return mfa.MFA_PASS
}

type SessionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           string            `protobuf:"bytes,1,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	TrackingAttempts  bool              `protobuf:"varint,2,opt,name=TrackingAttempts,json=retry,proto3" json:"retry,omitempty"`
	RemainingAttempts int32             `protobuf:"varint,3,opt,name=RemainingAttempts,json=remaining_attempts,proto3" json:"remaining_attempts,omitempty"`
	ErrorDetails      map[string]string `protobuf:"bytes,4,rep,name=ErrorDetails,json=error_details,proto3" json:"error_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SessionError) Reset() {
	*x = SessionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionError) ProtoMessage() {}

func (x *SessionError) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionError.ProtoReflect.Descriptor instead.
func (*SessionError) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescGZIP(), []int{4}
}

func (x *SessionError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SessionError) GetTrackingAttempts() bool {
	if x != nil {
		return x.TrackingAttempts
	}
	return false
}

func (x *SessionError) GetRemainingAttempts() int32 {
	if x != nil {
		return x.RemainingAttempts
	}
	return 0
}

func (x *SessionError) GetErrorDetails() map[string]string {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

var File_brank_as_rbac_gunk_v1_authenticate_all_proto protoreflect.FileDescriptor

var file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f,
	0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x72, 0x61,
	0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb4, 0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x2c, 0x0a, 0x0a, 0x4d, 0x46, 0x41, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x6d, 0x66, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x46, 0x41, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6d, 0x66, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x46, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x6d, 0x66, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x1a, 0x2c, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x80, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x0a, 0x4d, 0x46, 0x41, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6d,
	0x66, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x4d,
	0x46, 0x41, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d,
	0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x6d, 0x66, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x1a, 0x2e, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x2d, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12,
	0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x4c,
	0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x2c, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x46, 0x41, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x4d, 0x46, 0x41, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6d, 0x66, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x46, 0x41, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6d, 0x66, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb8, 0x02, 0x0a,
	0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x39, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x33, 0x0a, 0x11, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xb6, 0x09, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x03, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xbb, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x67, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x28, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x29, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x0a, 0x09, 0x20, 0x20, 0x20,
	0x09, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x1a, 0x1a, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x4e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x47,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x25, 0x0a, 0x23, 0x1a, 0x21, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8b,
	0x03, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41,
	0x95, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x47, 0x65, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x09, 0x20, 0x20,
	0x20, 0x09, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x1a, 0x11, 0x47, 0x65,
	0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4a,
	0x4e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x47, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x25, 0x0a, 0x23, 0x1a, 0x21, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a,
	0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20,
	0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f,
	0x7b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xec, 0x02, 0x0a,
	0x08, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x46, 0x41, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x46,
	0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xa5, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xf3, 0x01, 0x0a, 0x0c, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x28, 0x69,
	0x66, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x29, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4d, 0x46, 0x41, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x1a, 0x0a, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x20, 0x4d, 0x46, 0x41, 0x2e, 0x4a, 0x4e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x47,
	0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x25, 0x0a, 0x23, 0x1a, 0x21, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x4d, 0x46, 0x41, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00,
	0x42, 0x4a, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73,
	0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00,
	0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescOnce sync.Once
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescData = file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDesc
)

func file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescGZIP() []byte {
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescOnce.Do(func() {
		file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescData)
	})
	return file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDescData
}

var (
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_goTypes  = []interface{}{
		(*LoginRequest)(nil),          // 0: authenticate.LoginRequest
		(*Session)(nil),               // 1: authenticate.Session
		(*GetSessionRequest)(nil),     // 2: authenticate.GetSessionRequest
		(*RetryMFARequest)(nil),       // 3: authenticate.RetryMFARequest
		(*SessionError)(nil),          // 4: authenticate.SessionError
		nil,                           // 5: authenticate.LoginRequest.ExtraEntry
		nil,                           // 6: authenticate.Session.SessionEntry
		nil,                           // 7: authenticate.Session.OpenIDEntry
		nil,                           // 8: authenticate.GetSessionRequest.ExtraEntry
		nil,                           // 9: authenticate.SessionError.ErrorDetailsEntry
		(mfa.MFA)(0),                  // 10: mfa.MFA
		(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	}
)

var file_brank_as_rbac_gunk_v1_authenticate_all_proto_depIdxs = []int32{
	5,  // 0: authenticate.LoginRequest.Extra:type_name -> authenticate.LoginRequest.ExtraEntry
	10, // 1: authenticate.LoginRequest.MFAType:type_name -> mfa.MFA
	6,  // 2: authenticate.Session.Session:type_name -> authenticate.Session.SessionEntry
	7,  // 3: authenticate.Session.OpenID:type_name -> authenticate.Session.OpenIDEntry
	10, // 4: authenticate.Session.MFAType:type_name -> mfa.MFA
	11, // 5: authenticate.Session.PasswordExpiry:type_name -> google.protobuf.Timestamp
	8,  // 6: authenticate.GetSessionRequest.Extra:type_name -> authenticate.GetSessionRequest.ExtraEntry
	10, // 7: authenticate.RetryMFARequest.MFAType:type_name -> mfa.MFA
	9,  // 8: authenticate.SessionError.ErrorDetails:type_name -> authenticate.SessionError.ErrorDetailsEntry
	0,  // 9: authenticate.SessionService.Login:input_type -> authenticate.LoginRequest
	2,  // 10: authenticate.SessionService.GetSession:input_type -> authenticate.GetSessionRequest
	3,  // 11: authenticate.SessionService.RetryMFA:input_type -> authenticate.RetryMFARequest
	1,  // 12: authenticate.SessionService.Login:output_type -> authenticate.Session
	1,  // 13: authenticate.SessionService.GetSession:output_type -> authenticate.Session
	1,  // 14: authenticate.SessionService.RetryMFA:output_type -> authenticate.Session
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_brank_as_rbac_gunk_v1_authenticate_all_proto_init() }
func file_brank_as_rbac_gunk_v1_authenticate_all_proto_init() {
	if File_brank_as_rbac_gunk_v1_authenticate_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryMFARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_rbac_gunk_v1_authenticate_all_proto_goTypes,
		DependencyIndexes: file_brank_as_rbac_gunk_v1_authenticate_all_proto_depIdxs,
		MessageInfos:      file_brank_as_rbac_gunk_v1_authenticate_all_proto_msgTypes,
	}.Build()
	File_brank_as_rbac_gunk_v1_authenticate_all_proto = out.File
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_rawDesc = nil
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_goTypes = nil
	file_brank_as_rbac_gunk_v1_authenticate_all_proto_depIdxs = nil
}
