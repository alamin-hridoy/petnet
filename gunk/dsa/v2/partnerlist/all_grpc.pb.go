// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package partnerlist

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerListServiceClient is the client API for PartnerListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerListServiceClient interface {
	// Create partnerList.
	CreatePartnerList(ctx context.Context, in *CreatePartnerListRequest, opts ...grpc.CallOption) (*CreatePartnerListResponse, error)
	// Update partnerlist.
	UpdatePartnerList(ctx context.Context, in *UpdatePartnerListRequest, opts ...grpc.CallOption) (*UpdatePartnerListResponse, error)
	// Get partnerlist by org ID.
	GetPartnerList(ctx context.Context, in *GetPartnerListRequest, opts ...grpc.CallOption) (*GetPartnerListResponse, error)
	// Get  dsa partnerlist .
	GetDSAPartnerList(ctx context.Context, in *DSAPartnerListRequest, opts ...grpc.CallOption) (*GetDSAPartnerListResponse, error)
	// Delete partnerlist by ID.
	DeletePartnerList(ctx context.Context, in *DeletePartnerListRequest, opts ...grpc.CallOption) (*DeletePartnerListResponse, error)
	// Enable partnerlist.
	EnablePartnerList(ctx context.Context, in *EnablePartnerListRequest, opts ...grpc.CallOption) (*EnablePartnerListResponse, error)
	// Disable partnerlist.
	DisablePartnerList(ctx context.Context, in *DisablePartnerListRequest, opts ...grpc.CallOption) (*DisablePartnerListResponse, error)
	// Enable multiple partnerlist.
	EnableMultiplePartnerList(ctx context.Context, in *EnableMultiplePartnerListRequest, opts ...grpc.CallOption) (*EnableMultiplePartnerListResponse, error)
	// Disable multiple partnerlist.
	DisableMultiplePartnerList(ctx context.Context, in *DisableMultiplePartnerListRequest, opts ...grpc.CallOption) (*DisableMultiplePartnerListResponse, error)
	// Get partner by stype.
	GetPartnerByStype(ctx context.Context, in *GetPartnerByStypeRequest, opts ...grpc.CallOption) (*GetPartnerByStypeResponse, error)
}

type partnerListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerListServiceClient(cc grpc.ClientConnInterface) PartnerListServiceClient {
	return &partnerListServiceClient{cc}
}

func (c *partnerListServiceClient) CreatePartnerList(ctx context.Context, in *CreatePartnerListRequest, opts ...grpc.CallOption) (*CreatePartnerListResponse, error) {
	out := new(CreatePartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/CreatePartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) UpdatePartnerList(ctx context.Context, in *UpdatePartnerListRequest, opts ...grpc.CallOption) (*UpdatePartnerListResponse, error) {
	out := new(UpdatePartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/UpdatePartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) GetPartnerList(ctx context.Context, in *GetPartnerListRequest, opts ...grpc.CallOption) (*GetPartnerListResponse, error) {
	out := new(GetPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/GetPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) GetDSAPartnerList(ctx context.Context, in *DSAPartnerListRequest, opts ...grpc.CallOption) (*GetDSAPartnerListResponse, error) {
	out := new(GetDSAPartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/GetDSAPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) DeletePartnerList(ctx context.Context, in *DeletePartnerListRequest, opts ...grpc.CallOption) (*DeletePartnerListResponse, error) {
	out := new(DeletePartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/DeletePartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) EnablePartnerList(ctx context.Context, in *EnablePartnerListRequest, opts ...grpc.CallOption) (*EnablePartnerListResponse, error) {
	out := new(EnablePartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/EnablePartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) DisablePartnerList(ctx context.Context, in *DisablePartnerListRequest, opts ...grpc.CallOption) (*DisablePartnerListResponse, error) {
	out := new(DisablePartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/DisablePartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) EnableMultiplePartnerList(ctx context.Context, in *EnableMultiplePartnerListRequest, opts ...grpc.CallOption) (*EnableMultiplePartnerListResponse, error) {
	out := new(EnableMultiplePartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/EnableMultiplePartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) DisableMultiplePartnerList(ctx context.Context, in *DisableMultiplePartnerListRequest, opts ...grpc.CallOption) (*DisableMultiplePartnerListResponse, error) {
	out := new(DisableMultiplePartnerListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/DisableMultiplePartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerListServiceClient) GetPartnerByStype(ctx context.Context, in *GetPartnerByStypeRequest, opts ...grpc.CallOption) (*GetPartnerByStypeResponse, error) {
	out := new(GetPartnerByStypeResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnerlist.PartnerListService/GetPartnerByStype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerListServiceServer is the server API for PartnerListService service.
// All implementations must embed UnimplementedPartnerListServiceServer
// for forward compatibility
type PartnerListServiceServer interface {
	// Create partnerList.
	CreatePartnerList(context.Context, *CreatePartnerListRequest) (*CreatePartnerListResponse, error)
	// Update partnerlist.
	UpdatePartnerList(context.Context, *UpdatePartnerListRequest) (*UpdatePartnerListResponse, error)
	// Get partnerlist by org ID.
	GetPartnerList(context.Context, *GetPartnerListRequest) (*GetPartnerListResponse, error)
	// Get  dsa partnerlist .
	GetDSAPartnerList(context.Context, *DSAPartnerListRequest) (*GetDSAPartnerListResponse, error)
	// Delete partnerlist by ID.
	DeletePartnerList(context.Context, *DeletePartnerListRequest) (*DeletePartnerListResponse, error)
	// Enable partnerlist.
	EnablePartnerList(context.Context, *EnablePartnerListRequest) (*EnablePartnerListResponse, error)
	// Disable partnerlist.
	DisablePartnerList(context.Context, *DisablePartnerListRequest) (*DisablePartnerListResponse, error)
	// Enable multiple partnerlist.
	EnableMultiplePartnerList(context.Context, *EnableMultiplePartnerListRequest) (*EnableMultiplePartnerListResponse, error)
	// Disable multiple partnerlist.
	DisableMultiplePartnerList(context.Context, *DisableMultiplePartnerListRequest) (*DisableMultiplePartnerListResponse, error)
	// Get partner by stype.
	GetPartnerByStype(context.Context, *GetPartnerByStypeRequest) (*GetPartnerByStypeResponse, error)
	mustEmbedUnimplementedPartnerListServiceServer()
}

// UnimplementedPartnerListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerListServiceServer struct{}

func (UnimplementedPartnerListServiceServer) CreatePartnerList(context.Context, *CreatePartnerListRequest) (*CreatePartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) UpdatePartnerList(context.Context, *UpdatePartnerListRequest) (*UpdatePartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) GetPartnerList(context.Context, *GetPartnerListRequest) (*GetPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) GetDSAPartnerList(context.Context, *DSAPartnerListRequest) (*GetDSAPartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSAPartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) DeletePartnerList(context.Context, *DeletePartnerListRequest) (*DeletePartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) EnablePartnerList(context.Context, *EnablePartnerListRequest) (*EnablePartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) DisablePartnerList(context.Context, *DisablePartnerListRequest) (*DisablePartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) EnableMultiplePartnerList(context.Context, *EnableMultiplePartnerListRequest) (*EnableMultiplePartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMultiplePartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) DisableMultiplePartnerList(context.Context, *DisableMultiplePartnerListRequest) (*DisableMultiplePartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMultiplePartnerList not implemented")
}

func (UnimplementedPartnerListServiceServer) GetPartnerByStype(context.Context, *GetPartnerByStypeRequest) (*GetPartnerByStypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerByStype not implemented")
}
func (UnimplementedPartnerListServiceServer) mustEmbedUnimplementedPartnerListServiceServer() {}

// UnsafePartnerListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerListServiceServer will
// result in compilation errors.
type UnsafePartnerListServiceServer interface {
	mustEmbedUnimplementedPartnerListServiceServer()
}

func RegisterPartnerListServiceServer(s grpc.ServiceRegistrar, srv PartnerListServiceServer) {
	s.RegisterService(&PartnerListService_ServiceDesc, srv)
}

func _PartnerListService_CreatePartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).CreatePartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/CreatePartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).CreatePartnerList(ctx, req.(*CreatePartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_UpdatePartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).UpdatePartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/UpdatePartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).UpdatePartnerList(ctx, req.(*UpdatePartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_GetPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).GetPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/GetPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).GetPartnerList(ctx, req.(*GetPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_GetDSAPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSAPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).GetDSAPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/GetDSAPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).GetDSAPartnerList(ctx, req.(*DSAPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_DeletePartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).DeletePartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/DeletePartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).DeletePartnerList(ctx, req.(*DeletePartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_EnablePartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).EnablePartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/EnablePartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).EnablePartnerList(ctx, req.(*EnablePartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_DisablePartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).DisablePartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/DisablePartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).DisablePartnerList(ctx, req.(*DisablePartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_EnableMultiplePartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMultiplePartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).EnableMultiplePartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/EnableMultiplePartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).EnableMultiplePartnerList(ctx, req.(*EnableMultiplePartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_DisableMultiplePartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMultiplePartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).DisableMultiplePartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/DisableMultiplePartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).DisableMultiplePartnerList(ctx, req.(*DisableMultiplePartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerListService_GetPartnerByStype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerByStypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerListServiceServer).GetPartnerByStype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnerlist.PartnerListService/GetPartnerByStype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerListServiceServer).GetPartnerByStype(ctx, req.(*GetPartnerByStypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerListService_ServiceDesc is the grpc.ServiceDesc for PartnerListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v2.partnerlist.PartnerListService",
	HandlerType: (*PartnerListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartnerList",
			Handler:    _PartnerListService_CreatePartnerList_Handler,
		},
		{
			MethodName: "UpdatePartnerList",
			Handler:    _PartnerListService_UpdatePartnerList_Handler,
		},
		{
			MethodName: "GetPartnerList",
			Handler:    _PartnerListService_GetPartnerList_Handler,
		},
		{
			MethodName: "GetDSAPartnerList",
			Handler:    _PartnerListService_GetDSAPartnerList_Handler,
		},
		{
			MethodName: "DeletePartnerList",
			Handler:    _PartnerListService_DeletePartnerList_Handler,
		},
		{
			MethodName: "EnablePartnerList",
			Handler:    _PartnerListService_EnablePartnerList_Handler,
		},
		{
			MethodName: "DisablePartnerList",
			Handler:    _PartnerListService_DisablePartnerList_Handler,
		},
		{
			MethodName: "EnableMultiplePartnerList",
			Handler:    _PartnerListService_EnableMultiplePartnerList_Handler,
		},
		{
			MethodName: "DisableMultiplePartnerList",
			Handler:    _PartnerListService_DisableMultiplePartnerList_Handler,
		},
		{
			MethodName: "GetPartnerByStype",
			Handler:    _PartnerListService_GetPartnerByStype_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v2/partnerlist/all.proto",
}
