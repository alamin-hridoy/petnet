// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package partner

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerServiceClient is the client API for PartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerServiceClient interface {
	// Create partners.
	CreatePartners(ctx context.Context, in *CreatePartnersRequest, opts ...grpc.CallOption) (*CreatePartnersResponse, error)
	// Update partners.
	UpdatePartners(ctx context.Context, in *UpdatePartnersRequest, opts ...grpc.CallOption) (*UpdatePartnersResponse, error)
	// Get partners by org ID.
	GetPartners(ctx context.Context, in *GetPartnersRequest, opts ...grpc.CallOption) (*GetPartnersResponse, error)
	// Get partner by org ID.
	GetPartner(ctx context.Context, in *GetPartnersRequest, opts ...grpc.CallOption) (*GetPartnerResponse, error)
	// Delete partner by ID.
	DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...grpc.CallOption) (*DeletePartnerResponse, error)
	// Validate partner access.
	ValidatePartnerAccess(ctx context.Context, in *ValidatePartnerAccessRequest, opts ...grpc.CallOption) (*ValidatePartnerAccessResponse, error)
	// Enable partner for DSA.
	EnablePartner(ctx context.Context, in *EnablePartnerRequest, opts ...grpc.CallOption) (*EnablePartnerResponse, error)
	// Disable partner for DSA.
	DisablePartner(ctx context.Context, in *DisablePartnerRequest, opts ...grpc.CallOption) (*DisablePartnerResponse, error)
}

type partnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerServiceClient(cc grpc.ClientConnInterface) PartnerServiceClient {
	return &partnerServiceClient{cc}
}

func (c *partnerServiceClient) CreatePartners(ctx context.Context, in *CreatePartnersRequest, opts ...grpc.CallOption) (*CreatePartnersResponse, error) {
	out := new(CreatePartnersResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/CreatePartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) UpdatePartners(ctx context.Context, in *UpdatePartnersRequest, opts ...grpc.CallOption) (*UpdatePartnersResponse, error) {
	out := new(UpdatePartnersResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/UpdatePartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetPartners(ctx context.Context, in *GetPartnersRequest, opts ...grpc.CallOption) (*GetPartnersResponse, error) {
	out := new(GetPartnersResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/GetPartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetPartner(ctx context.Context, in *GetPartnersRequest, opts ...grpc.CallOption) (*GetPartnerResponse, error) {
	out := new(GetPartnerResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/GetPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...grpc.CallOption) (*DeletePartnerResponse, error) {
	out := new(DeletePartnerResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/DeletePartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) ValidatePartnerAccess(ctx context.Context, in *ValidatePartnerAccessRequest, opts ...grpc.CallOption) (*ValidatePartnerAccessResponse, error) {
	out := new(ValidatePartnerAccessResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/ValidatePartnerAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) EnablePartner(ctx context.Context, in *EnablePartnerRequest, opts ...grpc.CallOption) (*EnablePartnerResponse, error) {
	out := new(EnablePartnerResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/EnablePartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) DisablePartner(ctx context.Context, in *DisablePartnerRequest, opts ...grpc.CallOption) (*DisablePartnerResponse, error) {
	out := new(DisablePartnerResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partner.PartnerService/DisablePartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerServiceServer is the server API for PartnerService service.
// All implementations must embed UnimplementedPartnerServiceServer
// for forward compatibility
type PartnerServiceServer interface {
	// Create partners.
	CreatePartners(context.Context, *CreatePartnersRequest) (*CreatePartnersResponse, error)
	// Update partners.
	UpdatePartners(context.Context, *UpdatePartnersRequest) (*UpdatePartnersResponse, error)
	// Get partners by org ID.
	GetPartners(context.Context, *GetPartnersRequest) (*GetPartnersResponse, error)
	// Get partner by org ID.
	GetPartner(context.Context, *GetPartnersRequest) (*GetPartnerResponse, error)
	// Delete partner by ID.
	DeletePartner(context.Context, *DeletePartnerRequest) (*DeletePartnerResponse, error)
	// Validate partner access.
	ValidatePartnerAccess(context.Context, *ValidatePartnerAccessRequest) (*ValidatePartnerAccessResponse, error)
	// Enable partner for DSA.
	EnablePartner(context.Context, *EnablePartnerRequest) (*EnablePartnerResponse, error)
	// Disable partner for DSA.
	DisablePartner(context.Context, *DisablePartnerRequest) (*DisablePartnerResponse, error)
	mustEmbedUnimplementedPartnerServiceServer()
}

// UnimplementedPartnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerServiceServer struct{}

func (UnimplementedPartnerServiceServer) CreatePartners(context.Context, *CreatePartnersRequest) (*CreatePartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartners not implemented")
}

func (UnimplementedPartnerServiceServer) UpdatePartners(context.Context, *UpdatePartnersRequest) (*UpdatePartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartners not implemented")
}

func (UnimplementedPartnerServiceServer) GetPartners(context.Context, *GetPartnersRequest) (*GetPartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartners not implemented")
}

func (UnimplementedPartnerServiceServer) GetPartner(context.Context, *GetPartnersRequest) (*GetPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}

func (UnimplementedPartnerServiceServer) DeletePartner(context.Context, *DeletePartnerRequest) (*DeletePartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartner not implemented")
}

func (UnimplementedPartnerServiceServer) ValidatePartnerAccess(context.Context, *ValidatePartnerAccessRequest) (*ValidatePartnerAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePartnerAccess not implemented")
}

func (UnimplementedPartnerServiceServer) EnablePartner(context.Context, *EnablePartnerRequest) (*EnablePartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePartner not implemented")
}

func (UnimplementedPartnerServiceServer) DisablePartner(context.Context, *DisablePartnerRequest) (*DisablePartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePartner not implemented")
}
func (UnimplementedPartnerServiceServer) mustEmbedUnimplementedPartnerServiceServer() {}

// UnsafePartnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerServiceServer will
// result in compilation errors.
type UnsafePartnerServiceServer interface {
	mustEmbedUnimplementedPartnerServiceServer()
}

func RegisterPartnerServiceServer(s grpc.ServiceRegistrar, srv PartnerServiceServer) {
	s.RegisterService(&PartnerService_ServiceDesc, srv)
}

func _PartnerService_CreatePartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).CreatePartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/CreatePartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).CreatePartners(ctx, req.(*CreatePartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_UpdatePartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).UpdatePartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/UpdatePartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).UpdatePartners(ctx, req.(*UpdatePartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/GetPartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartners(ctx, req.(*GetPartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/GetPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartner(ctx, req.(*GetPartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_DeletePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).DeletePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/DeletePartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).DeletePartner(ctx, req.(*DeletePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_ValidatePartnerAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePartnerAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).ValidatePartnerAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/ValidatePartnerAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).ValidatePartnerAccess(ctx, req.(*ValidatePartnerAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_EnablePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).EnablePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/EnablePartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).EnablePartner(ctx, req.(*EnablePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_DisablePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).DisablePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partner.PartnerService/DisablePartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).DisablePartner(ctx, req.(*DisablePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerService_ServiceDesc is the grpc.ServiceDesc for PartnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v2.partner.PartnerService",
	HandlerType: (*PartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartners",
			Handler:    _PartnerService_CreatePartners_Handler,
		},
		{
			MethodName: "UpdatePartners",
			Handler:    _PartnerService_UpdatePartners_Handler,
		},
		{
			MethodName: "GetPartners",
			Handler:    _PartnerService_GetPartners_Handler,
		},
		{
			MethodName: "GetPartner",
			Handler:    _PartnerService_GetPartner_Handler,
		},
		{
			MethodName: "DeletePartner",
			Handler:    _PartnerService_DeletePartner_Handler,
		},
		{
			MethodName: "ValidatePartnerAccess",
			Handler:    _PartnerService_ValidatePartnerAccess_Handler,
		},
		{
			MethodName: "EnablePartner",
			Handler:    _PartnerService_EnablePartner_Handler,
		},
		{
			MethodName: "DisablePartner",
			Handler:    _PartnerService_DisablePartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v2/partner/all.proto",
}
