// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/dsa/all.proto

package dsa

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DSA represents perahub DSA object
type DSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DsaID          uint32                 `protobuf:"varint,1,opt,name=DsaID,json=id,proto3" json:"id,omitempty"`
	DsaCode        string                 `protobuf:"bytes,2,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	DsaName        string                 `protobuf:"bytes,3,opt,name=DsaName,json=dsa_name,proto3" json:"dsa_name,omitempty"`
	EmailAddress   string                 `protobuf:"bytes,4,opt,name=EmailAddress,json=email_address,proto3" json:"email_address,omitempty"`
	Status         uint32                 `protobuf:"varint,5,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	Vatable        uint32                 `protobuf:"varint,6,opt,name=Vatable,json=vatable,proto3" json:"vatable,omitempty"`
	Address        string                 `protobuf:"bytes,7,opt,name=Address,json=address,proto3" json:"address,omitempty"`
	Tin            string                 `protobuf:"bytes,8,opt,name=Tin,json=tin,proto3" json:"tin,omitempty"`
	UpdatedBy      string                 `protobuf:"bytes,9,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	ContactPerson  string                 `protobuf:"bytes,10,opt,name=ContactPerson,json=contact_person,proto3" json:"contact_person,omitempty"`
	City           string                 `protobuf:"bytes,11,opt,name=City,json=city,proto3" json:"city,omitempty"`
	Province       string                 `protobuf:"bytes,12,opt,name=Province,json=province,proto3" json:"province,omitempty"`
	Zipcode        string                 `protobuf:"bytes,13,opt,name=Zipcode,json=zipcode,proto3" json:"zipcode,omitempty"`
	President      string                 `protobuf:"bytes,14,opt,name=President,json=president,proto3" json:"president,omitempty"`
	GeneralManager string                 `protobuf:"bytes,15,opt,name=GeneralManager,json=general_manager,proto3" json:"general_manager,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=CreatedAt,json=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=UpdatedAt,json=updated_at,proto3" json:"updated_at,omitempty"`
	DeletedAt      *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=DeletedAt,json=deleted_at,proto3" json:"deleted_at,omitempty"`
}

func (x *DSA) Reset() {
	*x = DSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSA) ProtoMessage() {}

func (x *DSA) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSA.ProtoReflect.Descriptor instead.
func (*DSA) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescGZIP(), []int{0}
}

func (x *DSA) GetDsaID() uint32 {
	if x != nil {
		return x.DsaID
	}
	return 0
}

func (x *DSA) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *DSA) GetDsaName() string {
	if x != nil {
		return x.DsaName
	}
	return ""
}

func (x *DSA) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *DSA) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DSA) GetVatable() uint32 {
	if x != nil {
		return x.Vatable
	}
	return 0
}

func (x *DSA) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DSA) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *DSA) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *DSA) GetContactPerson() string {
	if x != nil {
		return x.ContactPerson
	}
	return ""
}

func (x *DSA) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DSA) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *DSA) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *DSA) GetPresident() string {
	if x != nil {
		return x.President
	}
	return ""
}

func (x *DSA) GetGeneralManager() string {
	if x != nil {
		return x.GeneralManager
	}
	return ""
}

func (x *DSA) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DSA) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DSA) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// CreateDSARequest ...
type CreateDSARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DsaCode        string `protobuf:"bytes,1,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	DsaName        string `protobuf:"bytes,2,opt,name=DsaName,json=dsa_name,proto3" json:"dsa_name,omitempty"`
	EmailAddress   string `protobuf:"bytes,3,opt,name=EmailAddress,json=email_address,proto3" json:"email_address,omitempty"`
	Vatable        string `protobuf:"bytes,4,opt,name=Vatable,json=vatable,proto3" json:"vatable,omitempty"`
	Address        string `protobuf:"bytes,5,opt,name=Address,json=address,proto3" json:"address,omitempty"`
	Tin            string `protobuf:"bytes,6,opt,name=Tin,json=tin,proto3" json:"tin,omitempty"`
	UpdatedBy      string `protobuf:"bytes,7,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	ContactPerson  string `protobuf:"bytes,8,opt,name=ContactPerson,json=contact_person,proto3" json:"contact_person,omitempty"`
	City           string `protobuf:"bytes,9,opt,name=City,json=city,proto3" json:"city,omitempty"`
	Province       string `protobuf:"bytes,10,opt,name=Province,json=province,proto3" json:"province,omitempty"`
	Zipcode        string `protobuf:"bytes,11,opt,name=Zipcode,json=zipcode,proto3" json:"zipcode,omitempty"`
	President      string `protobuf:"bytes,12,opt,name=President,json=president,proto3" json:"president,omitempty"`
	GeneralManager string `protobuf:"bytes,13,opt,name=GeneralManager,json=general_manager,proto3" json:"general_manager,omitempty"`
}

func (x *CreateDSARequest) Reset() {
	*x = CreateDSARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDSARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDSARequest) ProtoMessage() {}

func (x *CreateDSARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDSARequest.ProtoReflect.Descriptor instead.
func (*CreateDSARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDSARequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *CreateDSARequest) GetDsaName() string {
	if x != nil {
		return x.DsaName
	}
	return ""
}

func (x *CreateDSARequest) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *CreateDSARequest) GetVatable() string {
	if x != nil {
		return x.Vatable
	}
	return ""
}

func (x *CreateDSARequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateDSARequest) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *CreateDSARequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateDSARequest) GetContactPerson() string {
	if x != nil {
		return x.ContactPerson
	}
	return ""
}

func (x *CreateDSARequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateDSARequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateDSARequest) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *CreateDSARequest) GetPresident() string {
	if x != nil {
		return x.President
	}
	return ""
}

func (x *CreateDSARequest) GetGeneralManager() string {
	if x != nil {
		return x.GeneralManager
	}
	return ""
}

// UpdateDSARequest ...
type UpdateDSARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DsaID          uint32 `protobuf:"varint,1,opt,name=DsaID,json=id,proto3" json:"id,omitempty"`
	DsaCode        string `protobuf:"bytes,2,opt,name=DsaCode,json=dsa_code,proto3" json:"dsa_code,omitempty"`
	DsaName        string `protobuf:"bytes,3,opt,name=DsaName,json=dsa_name,proto3" json:"dsa_name,omitempty"`
	EmailAddress   string `protobuf:"bytes,4,opt,name=EmailAddress,json=email_address,proto3" json:"email_address,omitempty"`
	Vatable        string `protobuf:"bytes,5,opt,name=Vatable,json=vatable,proto3" json:"vatable,omitempty"`
	Address        string `protobuf:"bytes,6,opt,name=Address,json=address,proto3" json:"address,omitempty"`
	Tin            string `protobuf:"bytes,7,opt,name=Tin,json=tin,proto3" json:"tin,omitempty"`
	UpdatedBy      string `protobuf:"bytes,8,opt,name=UpdatedBy,json=updated_by,proto3" json:"updated_by,omitempty"`
	ContactPerson  string `protobuf:"bytes,9,opt,name=ContactPerson,json=contact_person,proto3" json:"contact_person,omitempty"`
	City           string `protobuf:"bytes,10,opt,name=City,json=city,proto3" json:"city,omitempty"`
	Province       string `protobuf:"bytes,11,opt,name=Province,json=province,proto3" json:"province,omitempty"`
	Zipcode        string `protobuf:"bytes,12,opt,name=Zipcode,json=zipcode,proto3" json:"zipcode,omitempty"`
	President      string `protobuf:"bytes,13,opt,name=President,json=president,proto3" json:"president,omitempty"`
	GeneralManager string `protobuf:"bytes,14,opt,name=GeneralManager,json=general_manager,proto3" json:"general_manager,omitempty"`
}

func (x *UpdateDSARequest) Reset() {
	*x = UpdateDSARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDSARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDSARequest) ProtoMessage() {}

func (x *UpdateDSARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDSARequest.ProtoReflect.Descriptor instead.
func (*UpdateDSARequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDSARequest) GetDsaID() uint32 {
	if x != nil {
		return x.DsaID
	}
	return 0
}

func (x *UpdateDSARequest) GetDsaCode() string {
	if x != nil {
		return x.DsaCode
	}
	return ""
}

func (x *UpdateDSARequest) GetDsaName() string {
	if x != nil {
		return x.DsaName
	}
	return ""
}

func (x *UpdateDSARequest) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *UpdateDSARequest) GetVatable() string {
	if x != nil {
		return x.Vatable
	}
	return ""
}

func (x *UpdateDSARequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateDSARequest) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *UpdateDSARequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateDSARequest) GetContactPerson() string {
	if x != nil {
		return x.ContactPerson
	}
	return ""
}

func (x *UpdateDSARequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateDSARequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateDSARequest) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *UpdateDSARequest) GetPresident() string {
	if x != nil {
		return x.President
	}
	return ""
}

func (x *UpdateDSARequest) GetGeneralManager() string {
	if x != nil {
		return x.GeneralManager
	}
	return ""
}

// GetDSAByIDRequest ...
type GetDSAByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DsaID uint32 `protobuf:"varint,1,opt,name=DsaID,json=id,proto3" json:"id,omitempty"`
}

func (x *GetDSAByIDRequest) Reset() {
	*x = GetDSAByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDSAByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDSAByIDRequest) ProtoMessage() {}

func (x *GetDSAByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDSAByIDRequest.ProtoReflect.Descriptor instead.
func (*GetDSAByIDRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescGZIP(), []int{3}
}

func (x *GetDSAByIDRequest) GetDsaID() uint32 {
	if x != nil {
		return x.DsaID
	}
	return 0
}

// ListDSAResponse ...
type ListDSAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DSAList []*DSA `protobuf:"bytes,1,rep,name=DSAList,json=list,proto3" json:"list,omitempty"`
}

func (x *ListDSAResponse) Reset() {
	*x = ListDSAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDSAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDSAResponse) ProtoMessage() {}

func (x *ListDSAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDSAResponse.ProtoReflect.Descriptor instead.
func (*ListDSAResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescGZIP(), []int{4}
}

func (x *ListDSAResponse) GetDSAList() []*DSA {
	if x != nil {
		return x.DSAList
	}
	return nil
}

// DeleteDSAByIDRequest ...
type DeleteDSAByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DsaID uint32 `protobuf:"varint,1,opt,name=DsaID,json=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDSAByIDRequest) Reset() {
	*x = DeleteDSAByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDSAByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDSAByIDRequest) ProtoMessage() {}

func (x *DeleteDSAByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDSAByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteDSAByIDRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteDSAByIDRequest) GetDsaID() uint32 {
	if x != nil {
		return x.DsaID
	}
	return 0
}

var File_brank_as_petnet_gunk_drp_v1_dsa_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73,
	0x61, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x64, 0x73, 0x61,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x06, 0x0a,
	0x03, 0x44, 0x53, 0x41, 0x12, 0x1d, 0x0a, 0x05, 0x44, 0x73, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x56, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x76, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x54, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x74, 0x69, 0x6e,
	0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x09,
	0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xac, 0x05, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x07, 0x44, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x07,
	0x56, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x76, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x54, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x03, 0x74, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x3a, 0x83, 0x01, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x7a, 0x0a, 0x78, 0xd2,
	0x01, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x08, 0x64, 0x73, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x07, 0x76, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0xd2,
	0x01, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xd2, 0x01, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x63, 0x69, 0x74, 0x79, 0xd2, 0x01,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xd0, 0x05, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05,
	0x44, 0x73, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x44,
	0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x73, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x64, 0x73, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x56, 0x61,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x76, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x54, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x03, 0x74, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12,
	0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x5a, 0x69,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a,
	0x88, 0x01, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x7f, 0x0a, 0x7d, 0xd2, 0x01, 0x02,
	0x69, 0x64, 0xd2, 0x01, 0x08, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x08,
	0x64, 0x73, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x07, 0x76, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0xd2, 0x01, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xd2, 0x01, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0xd2, 0x01, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x63, 0x69, 0x74,
	0x79, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0xd2, 0x01, 0x09, 0x70,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x53, 0x41, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x05, 0x44, 0x73, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x10,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64,
	0x22, 0x46, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x44, 0x53, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x64, 0x73, 0x61, 0x2e, 0x44, 0x53, 0x41, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x47, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x53, 0x41, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x05, 0x44, 0x73, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a,
	0x10, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69,
	0x64, 0x32, 0x92, 0x11, 0x0a, 0x0a, 0x44, 0x53, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xa5, 0x03, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x12, 0x15,
	0x2e, 0x64, 0x73, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x64, 0x73, 0x61, 0x2e, 0x44, 0x53, 0x41, 0x22,
	0xf2, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd6, 0x02, 0x0a, 0x03, 0x44, 0x53,
	0x41, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x44, 0x53, 0x41, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x4a, 0x41, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3a, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x18, 0x0a, 0x16, 0x1a, 0x14, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61,
	0x44, 0x53, 0x41, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a,
	0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20,
	0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01, 0x2a, 0x22, 0x07, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x73, 0x61, 0x28, 0x00, 0x30, 0x00, 0x12, 0xad, 0x03, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x12, 0x15, 0x2e, 0x64, 0x73, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e,
	0x64, 0x73, 0x61, 0x2e, 0x44, 0x53, 0x41, 0x22, 0xfa, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xd6, 0x02, 0x0a, 0x03, 0x44, 0x53, 0x41, 0x12, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x44, 0x53, 0x41, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x44, 0x53, 0x41, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x41, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x3a, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x18, 0x0a, 0x16, 0x1a, 0x14, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61, 0x44, 0x53, 0x41, 0x4a, 0x6c, 0x0a, 0x03, 0x34,
	0x32, 0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b,
	0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20,
	0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x7b, 0x44, 0x73,
	0x61, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb9, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x44, 0x53, 0x41, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x64, 0x73, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x53, 0x41, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x08, 0x2e, 0x64, 0x73, 0x61, 0x2e, 0x44, 0x53, 0x41, 0x22, 0x84, 0x03, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0xd0, 0x02, 0x0a, 0x03, 0x44, 0x53, 0x41, 0x12, 0x0e, 0x47, 0x65, 0x74,
	0x20, 0x44, 0x53, 0x41, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x15, 0x47, 0x65, 0x74,
	0x20, 0x44, 0x53, 0x41, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49,
	0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x41, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3a, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x18, 0x0a,
	0x16, 0x1a, 0x14, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x73, 0x61, 0x44, 0x53, 0x41, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65,
	0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x7b, 0x44, 0x73, 0x61, 0x49, 0x44, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0xb3, 0x03, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x41,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x64, 0x73, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf7,
	0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xde, 0x02, 0x0a, 0x03, 0x44, 0x53, 0x41,
	0x12, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x53, 0x41, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x1a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x44, 0x53, 0x41,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x4d, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x46, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x24, 0x0a, 0x22, 0x1a, 0x20, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x73, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32,
	0x32, 0x12, 0x65, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20,
	0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12,
	0x58, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x61, 0x30, 0x00, 0x12, 0xb4, 0x03, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x42, 0x79, 0x49, 0x44, 0x12, 0x19, 0x2e, 0x64,
	0x73, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x41, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x64, 0x73, 0x61, 0x2e, 0x44, 0x53,
	0x41, 0x22, 0xf9, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd8, 0x02, 0x0a, 0x03,
	0x44, 0x53, 0x41, 0x12, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x44, 0x53, 0x41,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x20, 0x44, 0x53, 0x41, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49,
	0x44, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x41, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3a, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x18, 0x0a,
	0x16, 0x1a, 0x14, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x73, 0x61, 0x44, 0x53, 0x41, 0x4a, 0x6c, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x65,
	0x0a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x3e, 0x0a, 0x3c, 0x4a, 0x3a, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x34, 0x32, 0x32, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x20, 0x7d, 0x4a, 0x5f, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x24,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x12, 0x30, 0x0a, 0x2e, 0x4a, 0x2c, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x20, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x7b, 0x44, 0x73, 0x61, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30,
	0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x3e, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x23, 0x62, 0x72,
	0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75,
	0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x61, 0x3b, 0x64, 0x73,
	0x61, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00,
	0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_goTypes  = []interface{}{
		(*DSA)(nil),                   // 0: dsa.DSA
		(*CreateDSARequest)(nil),      // 1: dsa.CreateDSARequest
		(*UpdateDSARequest)(nil),      // 2: dsa.UpdateDSARequest
		(*GetDSAByIDRequest)(nil),     // 3: dsa.GetDSAByIDRequest
		(*ListDSAResponse)(nil),       // 4: dsa.ListDSAResponse
		(*DeleteDSAByIDRequest)(nil),  // 5: dsa.DeleteDSAByIDRequest
		(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),         // 7: google.protobuf.Empty
	}
)

var file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_depIdxs = []int32{
	6, // 0: dsa.DSA.CreatedAt:type_name -> google.protobuf.Timestamp
	6, // 1: dsa.DSA.UpdatedAt:type_name -> google.protobuf.Timestamp
	6, // 2: dsa.DSA.DeletedAt:type_name -> google.protobuf.Timestamp
	0, // 3: dsa.ListDSAResponse.DSAList:type_name -> dsa.DSA
	1, // 4: dsa.DSAService.CreateDSA:input_type -> dsa.CreateDSARequest
	2, // 5: dsa.DSAService.UpdateDSA:input_type -> dsa.UpdateDSARequest
	3, // 6: dsa.DSAService.GetDSAByID:input_type -> dsa.GetDSAByIDRequest
	7, // 7: dsa.DSAService.ListDSA:input_type -> google.protobuf.Empty
	5, // 8: dsa.DSAService.DeleteDSAByID:input_type -> dsa.DeleteDSAByIDRequest
	0, // 9: dsa.DSAService.CreateDSA:output_type -> dsa.DSA
	0, // 10: dsa.DSAService.UpdateDSA:output_type -> dsa.DSA
	0, // 11: dsa.DSAService.GetDSAByID:output_type -> dsa.DSA
	4, // 12: dsa.DSAService.ListDSA:output_type -> dsa.ListDSAResponse
	0, // 13: dsa.DSAService.DeleteDSAByID:output_type -> dsa.DSA
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_dsa_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDSARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDSARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDSAByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDSAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDSAByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_depIdxs,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_dsa_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_dsa_all_proto_depIdxs = nil
}
