// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/rbac/gunk/v1/consent/all.proto

package consent

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServeGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User unique identifier.
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// Authentication client identifier.
	ClientID string `protobuf:"bytes,2,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	// Authentication client owner identifier.
	OwnerID string `protobuf:"bytes,3,opt,name=OwnerID,json=owner_id,proto3" json:"owner_id,omitempty"`
	// New scope grants requested by client.
	Requested []string `protobuf:"bytes,4,rep,name=Requested,json=requested,proto3" json:"requested,omitempty"`
	// Scopes previously granted to client by user.
	Granted []string `protobuf:"bytes,5,rep,name=Granted,json=granted,proto3" json:"granted,omitempty"`
}

func (x *ServeGrantRequest) Reset() {
	*x = ServeGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeGrantRequest) ProtoMessage() {}

func (x *ServeGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeGrantRequest.ProtoReflect.Descriptor instead.
func (*ServeGrantRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{0}
}

func (x *ServeGrantRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ServeGrantRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *ServeGrantRequest) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *ServeGrantRequest) GetRequested() []string {
	if x != nil {
		return x.Requested
	}
	return nil
}

func (x *ServeGrantRequest) GetGranted() []string {
	if x != nil {
		return x.Granted
	}
	return nil
}

type ServeGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scope requests not previously granted.
	NewScopes map[string]*ScopeDetail `protobuf:"bytes,1,rep,name=NewScopes,json=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Previously granted scopes.
	GrantedScopes map[string]*ScopeDetail `protobuf:"bytes,2,rep,name=GrantedScopes,json=granted_scopes,proto3" json:"granted_scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Grouping details for all of the requested scopes.
	Groups map[string]*GroupDetail `protobuf:"bytes,3,rep,name=Groups,json=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Skip explicit consent grant.  Used to mark first-party logins.
	Skip bool `protobuf:"varint,4,opt,name=Skip,json=skip,proto3" json:"skip,omitempty"`
	// OrgID requesting the consent.
	OrgID string `protobuf:"bytes,5,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	// Organization name requesting consent.
	OrgName string `protobuf:"bytes,6,opt,name=OrgName,json=org_name,proto3" json:"org_name,omitempty"`
}

func (x *ServeGrantResponse) Reset() {
	*x = ServeGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeGrantResponse) ProtoMessage() {}

func (x *ServeGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeGrantResponse.ProtoReflect.Descriptor instead.
func (*ServeGrantResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{1}
}

func (x *ServeGrantResponse) GetNewScopes() map[string]*ScopeDetail {
	if x != nil {
		return x.NewScopes
	}
	return nil
}

func (x *ServeGrantResponse) GetGrantedScopes() map[string]*ScopeDetail {
	if x != nil {
		return x.GrantedScopes
	}
	return nil
}

func (x *ServeGrantResponse) GetGroups() map[string]*GroupDetail {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ServeGrantResponse) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *ServeGrantResponse) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ServeGrantResponse) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type GrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User unique identifier.
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// Authentication client identifier.
	ClientID string `protobuf:"bytes,2,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	// Authentication client owner identifier.
	OwnerID string `protobuf:"bytes,3,opt,name=OwnerID,json=owner_id,proto3" json:"owner_id,omitempty"`
	// User-granted scopes requested by client.
	Scopes []string `protobuf:"bytes,4,rep,name=Scopes,json=scopes,proto3" json:"scopes,omitempty"`
	// Recorded timestamp of user consent grant.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Timestamp,json=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GrantRequest) Reset() {
	*x = GrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantRequest) ProtoMessage() {}

func (x *GrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantRequest.ProtoReflect.Descriptor instead.
func (*GrantRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{2}
}

func (x *GrantRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GrantRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *GrantRequest) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *GrantRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GrantRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique consent grant identifier.
	GrantID string `protobuf:"bytes,1,opt,name=GrantID,json=grant_id,proto3" json:"grant_id,omitempty"`
	// Single grants are not remembered for future consent requests by the same client.
	SingleGrant bool `protobuf:"varint,2,opt,name=SingleGrant,json=remember,proto3" json:"remember,omitempty"`
	// User consent grants recorded.
	Grants []string `protobuf:"bytes,3,rep,name=Grants,json=grants,proto3" json:"grants,omitempty"`
}

func (x *GrantResponse) Reset() {
	*x = GrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantResponse) ProtoMessage() {}

func (x *GrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantResponse.ProtoReflect.Descriptor instead.
func (*GrantResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{3}
}

func (x *GrantResponse) GetGrantID() string {
	if x != nil {
		return x.GrantID
	}
	return ""
}

func (x *GrantResponse) GetSingleGrant() bool {
	if x != nil {
		return x.SingleGrant
	}
	return false
}

func (x *GrantResponse) GetGrants() []string {
	if x != nil {
		return x.Grants
	}
	return nil
}

type ConsentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string            `protobuf:"bytes,1,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	ErrorDetails map[string]string `protobuf:"bytes,4,rep,name=ErrorDetails,json=error_details,proto3" json:"error_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConsentError) Reset() {
	*x = ConsentError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentError) ProtoMessage() {}

func (x *ConsentError) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentError.ProtoReflect.Descriptor instead.
func (*ConsentError) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{4}
}

func (x *ConsentError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConsentError) GetErrorDetails() map[string]string {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

type UpsertScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       string `protobuf:"bytes,1,opt,name=Scope,json=scope,proto3" json:"scope,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	GroupName   string `protobuf:"bytes,3,opt,name=GroupName,json=group_name,proto3" json:"group_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *UpsertScopeRequest) Reset() {
	*x = UpsertScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScopeRequest) ProtoMessage() {}

func (x *UpsertScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScopeRequest.ProtoReflect.Descriptor instead.
func (*UpsertScopeRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertScopeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertScopeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertScopeRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *UpsertScopeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpsertScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *UpsertScopeResponse) Reset() {
	*x = UpsertScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScopeResponse) ProtoMessage() {}

func (x *UpsertScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScopeResponse.ProtoReflect.Descriptor instead.
func (*UpsertScopeResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertScopeResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type UpdateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName   string `protobuf:"bytes,1,opt,name=GroupName,json=group_name,proto3" json:"group_name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *UpdateGroupRequest) Reset() {
	*x = UpdateGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupRequest) ProtoMessage() {}

func (x *UpdateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *UpdateGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Updated,json=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdateGroupResponse) Reset() {
	*x = UpdateGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupResponse) ProtoMessage() {}

func (x *UpdateGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateGroupResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateGroupResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type GetScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=Scopes,json=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GetScopeRequest) Reset() {
	*x = GetScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScopeRequest) ProtoMessage() {}

func (x *GetScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScopeRequest.ProtoReflect.Descriptor instead.
func (*GetScopeRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{9}
}

func (x *GetScopeRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GetScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes map[string]*ScopeDetail `protobuf:"bytes,1,rep,name=Scopes,json=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Groups map[string]*GroupDetail `protobuf:"bytes,2,rep,name=Groups,json=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetScopeResponse) Reset() {
	*x = GetScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScopeResponse) ProtoMessage() {}

func (x *GetScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScopeResponse.ProtoReflect.Descriptor instead.
func (*GetScopeResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{10}
}

func (x *GetScopeResponse) GetScopes() map[string]*ScopeDetail {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GetScopeResponse) GetGroups() map[string]*GroupDetail {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GroupDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *GroupDetail) Reset() {
	*x = GroupDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDetail) ProtoMessage() {}

func (x *GroupDetail) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDetail.ProtoReflect.Descriptor instead.
func (*GroupDetail) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{11}
}

func (x *GroupDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ScopeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       string `protobuf:"bytes,1,opt,name=Scope,json=scope,proto3" json:"scope,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Group       string `protobuf:"bytes,3,opt,name=Group,json=group,proto3" json:"group,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *ScopeDetail) Reset() {
	*x = ScopeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeDetail) ProtoMessage() {}

func (x *ScopeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeDetail.ProtoReflect.Descriptor instead.
func (*ScopeDetail) Descriptor() ([]byte, []int) {
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP(), []int{12}
}

func (x *ScopeDetail) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ScopeDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScopeDetail) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ScopeDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_brank_as_rbac_gunk_v1_consent_all_proto protoreflect.FileDescriptor

var file_brank_as_rbac_gunk_v1_consent_all_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f,
	0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0,
	0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xb0, 0x05, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x0e,
	0x4e, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x57, 0x0a, 0x12, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61,
	0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8d, 0x01, 0x0a,
	0x0d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x06, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd8, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x33, 0x0a, 0x11, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x5f, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x75, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5f, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x06, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xee, 0x02, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72,
	0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x50,
	0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x50, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x63, 0x0a, 0x0b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xa7, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x20, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xcc, 0x06, 0x0a, 0x0c, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd3, 0x03, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd0, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x20, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x1a, 0x61, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x0a, 0x09, 0x20, 0x20, 0x20, 0x09, 0x55, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x54, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x4d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12,
	0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xe0, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x89, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xe9, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x1a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x4a, 0x4f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x48, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x26, 0x0a, 0x24, 0x1a, 0x22, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a,
	0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x28,
	0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x32, 0xdd, 0x0a, 0x0a, 0x0c, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x03, 0x0a, 0x0b, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7,
	0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x1a, 0x27, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2c,
	0x0a, 0x2a, 0x1a, 0x28, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0x95, 0x04, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72,
	0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xac, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8e, 0x03, 0x0a, 0x06,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x1a, 0xad, 0x01, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x0a, 0x09, 0x20, 0x20, 0x20, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x69, 0x6e,
	0x0a, 0x09, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x55, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12,
	0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x1a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x9c, 0x03, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x25, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x62, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbc, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa1, 0x02, 0x0a, 0x06, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x1a, 0x45, 0x47, 0x65, 0x74, 0x20, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x61,
	0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x4a, 0x52, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4b, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29, 0x0a, 0x27, 0x1a,
	0x25, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a,
	0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x28,
	0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x40, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x25,
	0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x75,
	0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x3b, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescOnce sync.Once
	file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescData = file_brank_as_rbac_gunk_v1_consent_all_proto_rawDesc
)

func file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescGZIP() []byte {
	file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescOnce.Do(func() {
		file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescData)
	})
	return file_brank_as_rbac_gunk_v1_consent_all_proto_rawDescData
}

var (
	file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
	file_brank_as_rbac_gunk_v1_consent_all_proto_goTypes  = []interface{}{
		(*ServeGrantRequest)(nil),     // 0: rbac.brankas.consent.ServeGrantRequest
		(*ServeGrantResponse)(nil),    // 1: rbac.brankas.consent.ServeGrantResponse
		(*GrantRequest)(nil),          // 2: rbac.brankas.consent.GrantRequest
		(*GrantResponse)(nil),         // 3: rbac.brankas.consent.GrantResponse
		(*ConsentError)(nil),          // 4: rbac.brankas.consent.ConsentError
		(*UpsertScopeRequest)(nil),    // 5: rbac.brankas.consent.UpsertScopeRequest
		(*UpsertScopeResponse)(nil),   // 6: rbac.brankas.consent.UpsertScopeResponse
		(*UpdateGroupRequest)(nil),    // 7: rbac.brankas.consent.UpdateGroupRequest
		(*UpdateGroupResponse)(nil),   // 8: rbac.brankas.consent.UpdateGroupResponse
		(*GetScopeRequest)(nil),       // 9: rbac.brankas.consent.GetScopeRequest
		(*GetScopeResponse)(nil),      // 10: rbac.brankas.consent.GetScopeResponse
		(*GroupDetail)(nil),           // 11: rbac.brankas.consent.GroupDetail
		(*ScopeDetail)(nil),           // 12: rbac.brankas.consent.ScopeDetail
		nil,                           // 13: rbac.brankas.consent.ServeGrantResponse.NewScopesEntry
		nil,                           // 14: rbac.brankas.consent.ServeGrantResponse.GrantedScopesEntry
		nil,                           // 15: rbac.brankas.consent.ServeGrantResponse.GroupsEntry
		nil,                           // 16: rbac.brankas.consent.ConsentError.ErrorDetailsEntry
		nil,                           // 17: rbac.brankas.consent.GetScopeResponse.ScopesEntry
		nil,                           // 18: rbac.brankas.consent.GetScopeResponse.GroupsEntry
		(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
	}
)

var file_brank_as_rbac_gunk_v1_consent_all_proto_depIdxs = []int32{
	13, // 0: rbac.brankas.consent.ServeGrantResponse.NewScopes:type_name -> rbac.brankas.consent.ServeGrantResponse.NewScopesEntry
	14, // 1: rbac.brankas.consent.ServeGrantResponse.GrantedScopes:type_name -> rbac.brankas.consent.ServeGrantResponse.GrantedScopesEntry
	15, // 2: rbac.brankas.consent.ServeGrantResponse.Groups:type_name -> rbac.brankas.consent.ServeGrantResponse.GroupsEntry
	19, // 3: rbac.brankas.consent.GrantRequest.Timestamp:type_name -> google.protobuf.Timestamp
	16, // 4: rbac.brankas.consent.ConsentError.ErrorDetails:type_name -> rbac.brankas.consent.ConsentError.ErrorDetailsEntry
	19, // 5: rbac.brankas.consent.UpsertScopeResponse.Updated:type_name -> google.protobuf.Timestamp
	19, // 6: rbac.brankas.consent.UpdateGroupResponse.Updated:type_name -> google.protobuf.Timestamp
	17, // 7: rbac.brankas.consent.GetScopeResponse.Scopes:type_name -> rbac.brankas.consent.GetScopeResponse.ScopesEntry
	18, // 8: rbac.brankas.consent.GetScopeResponse.Groups:type_name -> rbac.brankas.consent.GetScopeResponse.GroupsEntry
	12, // 9: rbac.brankas.consent.ServeGrantResponse.NewScopesEntry.value:type_name -> rbac.brankas.consent.ScopeDetail
	12, // 10: rbac.brankas.consent.ServeGrantResponse.GrantedScopesEntry.value:type_name -> rbac.brankas.consent.ScopeDetail
	11, // 11: rbac.brankas.consent.ServeGrantResponse.GroupsEntry.value:type_name -> rbac.brankas.consent.GroupDetail
	12, // 12: rbac.brankas.consent.GetScopeResponse.ScopesEntry.value:type_name -> rbac.brankas.consent.ScopeDetail
	11, // 13: rbac.brankas.consent.GetScopeResponse.GroupsEntry.value:type_name -> rbac.brankas.consent.GroupDetail
	0,  // 14: rbac.brankas.consent.GrantService.ServeGrant:input_type -> rbac.brankas.consent.ServeGrantRequest
	2,  // 15: rbac.brankas.consent.GrantService.Grant:input_type -> rbac.brankas.consent.GrantRequest
	5,  // 16: rbac.brankas.consent.ScopeService.UpsertScope:input_type -> rbac.brankas.consent.UpsertScopeRequest
	7,  // 17: rbac.brankas.consent.ScopeService.UpdateGroup:input_type -> rbac.brankas.consent.UpdateGroupRequest
	9,  // 18: rbac.brankas.consent.ScopeService.GetScope:input_type -> rbac.brankas.consent.GetScopeRequest
	1,  // 19: rbac.brankas.consent.GrantService.ServeGrant:output_type -> rbac.brankas.consent.ServeGrantResponse
	3,  // 20: rbac.brankas.consent.GrantService.Grant:output_type -> rbac.brankas.consent.GrantResponse
	6,  // 21: rbac.brankas.consent.ScopeService.UpsertScope:output_type -> rbac.brankas.consent.UpsertScopeResponse
	8,  // 22: rbac.brankas.consent.ScopeService.UpdateGroup:output_type -> rbac.brankas.consent.UpdateGroupResponse
	10, // 23: rbac.brankas.consent.ScopeService.GetScope:output_type -> rbac.brankas.consent.GetScopeResponse
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_brank_as_rbac_gunk_v1_consent_all_proto_init() }
func file_brank_as_rbac_gunk_v1_consent_all_proto_init() {
	if File_brank_as_rbac_gunk_v1_consent_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_rbac_gunk_v1_consent_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_brank_as_rbac_gunk_v1_consent_all_proto_goTypes,
		DependencyIndexes: file_brank_as_rbac_gunk_v1_consent_all_proto_depIdxs,
		MessageInfos:      file_brank_as_rbac_gunk_v1_consent_all_proto_msgTypes,
	}.Build()
	File_brank_as_rbac_gunk_v1_consent_all_proto = out.File
	file_brank_as_rbac_gunk_v1_consent_all_proto_rawDesc = nil
	file_brank_as_rbac_gunk_v1_consent_all_proto_goTypes = nil
	file_brank_as_rbac_gunk_v1_consent_all_proto_depIdxs = nil
}
