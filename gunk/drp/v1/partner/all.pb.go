// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/drp/v1/partner/all.proto

package partner

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RemitPartnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=Country,json=country,proto3" json:"country,omitempty"`
}

func (x *RemitPartnersRequest) Reset() {
	*x = RemitPartnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemitPartnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemitPartnersRequest) ProtoMessage() {}

func (x *RemitPartnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemitPartnersRequest.ProtoReflect.Descriptor instead.
func (*RemitPartnersRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{0}
}

func (x *RemitPartnersRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string            `protobuf:"bytes,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Errors  map[string]string `protobuf:"bytes,3,rep,name=Errors,json=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RemitPartnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partners map[string]*RemitPartner `protobuf:"bytes,1,rep,name=Partners,json=partners,proto3" json:"partners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemitPartnersResponse) Reset() {
	*x = RemitPartnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemitPartnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemitPartnersResponse) ProtoMessage() {}

func (x *RemitPartnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemitPartnersResponse.ProtoReflect.Descriptor instead.
func (*RemitPartnersResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{2}
}

func (x *RemitPartnersResponse) GetPartners() map[string]*RemitPartner {
	if x != nil {
		return x.Partners
	}
	return nil
}

type RemitPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerCode            string                `protobuf:"bytes,1,opt,name=PartnerCode,json=partner_code,proto3" json:"partner_code,omitempty"`
	PartnerName            string                `protobuf:"bytes,2,opt,name=PartnerName,json=partner_name,proto3" json:"partner_name,omitempty"`
	SupportedSendTypes     map[string]*RemitType `protobuf:"bytes,3,rep,name=SupportedSendTypes,json=supported_send_types,proto3" json:"supported_send_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SupportedDisburseTypes map[string]*RemitType `protobuf:"bytes,4,rep,name=SupportedDisburseTypes,json=supported_disburse_types,proto3" json:"supported_disburse_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemitPartner) Reset() {
	*x = RemitPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemitPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemitPartner) ProtoMessage() {}

func (x *RemitPartner) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemitPartner.ProtoReflect.Descriptor instead.
func (*RemitPartner) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{3}
}

func (x *RemitPartner) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *RemitPartner) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *RemitPartner) GetSupportedSendTypes() map[string]*RemitType {
	if x != nil {
		return x.SupportedSendTypes
	}
	return nil
}

func (x *RemitPartner) GetSupportedDisburseTypes() map[string]*RemitType {
	if x != nil {
		return x.SupportedDisburseTypes
	}
	return nil
}

type RemitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *RemitType) Reset() {
	*x = RemitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemitType) ProtoMessage() {}

func (x *RemitType) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemitType.ProtoReflect.Descriptor instead.
func (*RemitType) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{4}
}

func (x *RemitType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RemitType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type InputGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemitPartner   string `protobuf:"bytes,1,opt,name=RemitPartner,json=remit_partner,proto3" json:"remit_partner,omitempty"`
	SourceCountry  string `protobuf:"bytes,2,opt,name=SourceCountry,json=source_country,proto3" json:"source_country,omitempty"`
	SourceCurrency string `protobuf:"bytes,3,opt,name=SourceCurrency,json=source_currency,proto3" json:"source_currency,omitempty"`
	AgentCode      string `protobuf:"bytes,4,opt,name=AgentCode,json=agent_code,proto3" json:"agent_code,omitempty"`
	CountryCode    string `protobuf:"bytes,5,opt,name=CountryCode,json=country_code,proto3" json:"country_code,omitempty"`
	City           string `protobuf:"bytes,6,opt,name=City,json=city,proto3" json:"city,omitempty"`
	ID             int32  `protobuf:"varint,7,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *InputGuideRequest) Reset() {
	*x = InputGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputGuideRequest) ProtoMessage() {}

func (x *InputGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputGuideRequest.ProtoReflect.Descriptor instead.
func (*InputGuideRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{5}
}

func (x *InputGuideRequest) GetRemitPartner() string {
	if x != nil {
		return x.RemitPartner
	}
	return ""
}

func (x *InputGuideRequest) GetSourceCountry() string {
	if x != nil {
		return x.SourceCountry
	}
	return ""
}

func (x *InputGuideRequest) GetSourceCurrency() string {
	if x != nil {
		return x.SourceCurrency
	}
	return ""
}

func (x *InputGuideRequest) GetAgentCode() string {
	if x != nil {
		return x.AgentCode
	}
	return ""
}

func (x *InputGuideRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *InputGuideRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *InputGuideRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type InputGuideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputGuide map[string]*Guide `protobuf:"bytes,1,rep,name=InputGuide,json=input_guide,proto3" json:"input_guide,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InputGuideResponse) Reset() {
	*x = InputGuideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputGuideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputGuideResponse) ProtoMessage() {}

func (x *InputGuideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputGuideResponse.ProtoReflect.Descriptor instead.
func (*InputGuideResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{6}
}

func (x *InputGuideResponse) GetInputGuide() map[string]*Guide {
	if x != nil {
		return x.InputGuide
	}
	return nil
}

type Guide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string   `protobuf:"bytes,1,opt,name=Field,json=field,proto3" json:"field,omitempty"`
	Inputs    []*Input `protobuf:"bytes,2,rep,name=Inputs,json=inputs,proto3" json:"inputs,omitempty"`
	OtherInfo []*Input `protobuf:"bytes,3,rep,name=OtherInfo,json=other_info,proto3" json:"other_info,omitempty"`
}

func (x *Guide) Reset() {
	*x = Guide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guide) ProtoMessage() {}

func (x *Guide) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guide.ProtoReflect.Descriptor instead.
func (*Guide) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{7}
}

func (x *Guide) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Guide) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Guide) GetOtherInfo() []*Input {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value         string           `protobuf:"bytes,1,opt,name=Value,json=code,proto3" json:"code,omitempty"`
	Name          string           `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Description   string           `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	HasIssueDate  string           `protobuf:"bytes,4,opt,name=HasIssueDate,json=has_issue_date,proto3" json:"has_issue_date,omitempty"`
	HasExpiration string           `protobuf:"bytes,5,opt,name=HasExpiration,json=has_expiration,proto3" json:"has_expiration,omitempty"`
	CountryName   string           `protobuf:"bytes,6,opt,name=CountryName,json=country_name,proto3" json:"country_name,omitempty"`
	StateName     string           `protobuf:"bytes,7,opt,name=StateName,json=state_name,proto3" json:"state_name,omitempty"`
	CountryCode   string           `protobuf:"bytes,8,opt,name=CountryCode,json=country_code,proto3" json:"country_code,omitempty"`
	CurrencyCode  string           `protobuf:"bytes,9,opt,name=CurrencyCode,json=currency_code,proto3" json:"currency_code,omitempty"`
	Currencies    []*CurrencyGuide `protobuf:"bytes,10,rep,name=Currencies,json=currencies,proto3" json:"currencies,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{8}
}

func (x *Input) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Input) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Input) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Input) GetHasIssueDate() string {
	if x != nil {
		return x.HasIssueDate
	}
	return ""
}

func (x *Input) GetHasExpiration() string {
	if x != nil {
		return x.HasExpiration
	}
	return ""
}

func (x *Input) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *Input) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *Input) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Input) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Input) GetCurrencies() []*CurrencyGuide {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type CurrencyGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string `protobuf:"bytes,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	CurrencyName string `protobuf:"bytes,2,opt,name=CurrencyName,json=currency_name,proto3" json:"currency_name,omitempty"`
}

func (x *CurrencyGuide) Reset() {
	*x = CurrencyGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyGuide) ProtoMessage() {}

func (x *CurrencyGuide) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyGuide.ProtoReflect.Descriptor instead.
func (*CurrencyGuide) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{9}
}

func (x *CurrencyGuide) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CurrencyGuide) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

type PerahubGetRemcoIDResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,json=non_ex_name,proto3" json:"non_ex_name,omitempty"`
}

func (x *PerahubGetRemcoIDResult) Reset() {
	*x = PerahubGetRemcoIDResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerahubGetRemcoIDResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerahubGetRemcoIDResult) ProtoMessage() {}

func (x *PerahubGetRemcoIDResult) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerahubGetRemcoIDResult.ProtoReflect.Descriptor instead.
func (*PerahubGetRemcoIDResult) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{10}
}

func (x *PerahubGetRemcoIDResult) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PerahubGetRemcoIDResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPartnersRemcoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string                     `protobuf:"bytes,1,opt,name=Code,json=code,proto3" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	Result  []*PerahubGetRemcoIDResult `protobuf:"bytes,3,rep,name=Result,json=result,proto3" json:"result,omitempty"`
}

func (x *GetPartnersRemcoResponse) Reset() {
	*x = GetPartnersRemcoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnersRemcoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnersRemcoResponse) ProtoMessage() {}

func (x *GetPartnersRemcoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnersRemcoResponse.ProtoReflect.Descriptor instead.
func (*GetPartnersRemcoResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP(), []int{11}
}

func (x *GetPartnersRemcoResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetPartnersRemcoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPartnersRemcoResponse) GetResult() []*PerahubGetRemcoIDResult {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_brank_as_petnet_gunk_drp_v1_partner_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc4, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x2d, 0x0a, 0x0b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xa6, 0x06, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x1a, 0x46, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x24,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xee, 0x04, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x92, 0x41, 0xe4, 0x04, 0x32, 0xe1, 0x04, 0x7b, 0x0a, 0x20, 0x20, 0x22, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x3a, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x22, 0x57,
	0x55, 0x22, 0x3a, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x57, 0x55, 0x22,
	0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e,
	0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x3a, 0x20, 0x5b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x53, 0x65, 0x6e, 0x64, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
	0x20, 0x22, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x61, 0x74, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x53,
	0x65, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x22, 0x0a, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5d, 0x0a, 0x20,
	0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x22, 0x50, 0x54, 0x32, 0x22, 0x3a,
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x50, 0x54, 0x32, 0x22, 0x2c, 0x0a,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x32,
	0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x0a, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x61, 0x6e, 0x6b, 0x22,
	0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x53, 0x65, 0x6e, 0x64,
	0x20, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x27, 0x73, 0x20, 0x62, 0x61,
	0x6e, 0x6b, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5d, 0x0a, 0x20, 0x20,
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x7d, 0x0a, 0x7d, 0x22, 0xfc, 0x03, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x16, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x4d,
	0x0a, 0x17, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a,
	0x1b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x61, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xca, 0x02, 0x0a, 0x11,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x1a, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x32, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe1, 0x03, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x42, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x68, 0x0a, 0x0d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x64, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x61, 0x68, 0x75, 0x62,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xae, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x63, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x61, 0x68, 0x75, 0x62,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xe0, 0x0a, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41,
	0xaf, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x1a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x57,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x50, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2e, 0x0a, 0x2c, 0x1a, 0x2a, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf9, 0x03, 0x0a, 0x0a, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xad, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8d, 0x03, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x20, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x1a, 0x7e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x75, 0x69, 0x64, 0x65, 0x20, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x64, 0x72, 0x6f, 0x70,
	0x64, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x54, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x4d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x2e, 0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x28, 0x00, 0x30, 0x00, 0x12, 0xa3, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd1, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xad,
	0x02, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x52, 0x65, 0x6d, 0x63,
	0x6f, 0x20, 0x49, 0x64, 0x12, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x20, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x20, 0x49, 0x64, 0x2e, 0x1a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x52, 0x65, 0x6d,
	0x63, 0x6f, 0x20, 0x49, 0x64, 0x2e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x4a, 0x5a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x53, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x31, 0x0a, 0x2f, 0x1a, 0x2d, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x63, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a,
	0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x2d, 0x72, 0x65, 0x6d, 0x63, 0x6f, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42,
	0x46, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x2b, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x72, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x3b, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01,
	0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescData = file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_goTypes  = []interface{}{
		(*RemitPartnersRequest)(nil),     // 0: partner.RemitPartnersRequest
		(*Error)(nil),                    // 1: partner.Error
		(*RemitPartnersResponse)(nil),    // 2: partner.RemitPartnersResponse
		(*RemitPartner)(nil),             // 3: partner.RemitPartner
		(*RemitType)(nil),                // 4: partner.RemitType
		(*InputGuideRequest)(nil),        // 5: partner.InputGuideRequest
		(*InputGuideResponse)(nil),       // 6: partner.InputGuideResponse
		(*Guide)(nil),                    // 7: partner.Guide
		(*Input)(nil),                    // 8: partner.Input
		(*CurrencyGuide)(nil),            // 9: partner.CurrencyGuide
		(*PerahubGetRemcoIDResult)(nil),  // 10: partner.PerahubGetRemcoIDResult
		(*GetPartnersRemcoResponse)(nil), // 11: partner.GetPartnersRemcoResponse
		nil,                              // 12: partner.Error.ErrorsEntry
		nil,                              // 13: partner.RemitPartnersResponse.PartnersEntry
		nil,                              // 14: partner.RemitPartner.SupportedSendTypesEntry
		nil,                              // 15: partner.RemitPartner.SupportedDisburseTypesEntry
		nil,                              // 16: partner.InputGuideResponse.InputGuideEntry
		(*emptypb.Empty)(nil),            // 17: google.protobuf.Empty
	}
)

var file_brank_as_petnet_gunk_drp_v1_partner_all_proto_depIdxs = []int32{
	12, // 0: partner.Error.Errors:type_name -> partner.Error.ErrorsEntry
	13, // 1: partner.RemitPartnersResponse.Partners:type_name -> partner.RemitPartnersResponse.PartnersEntry
	14, // 2: partner.RemitPartner.SupportedSendTypes:type_name -> partner.RemitPartner.SupportedSendTypesEntry
	15, // 3: partner.RemitPartner.SupportedDisburseTypes:type_name -> partner.RemitPartner.SupportedDisburseTypesEntry
	16, // 4: partner.InputGuideResponse.InputGuide:type_name -> partner.InputGuideResponse.InputGuideEntry
	8,  // 5: partner.Guide.Inputs:type_name -> partner.Input
	8,  // 6: partner.Guide.OtherInfo:type_name -> partner.Input
	9,  // 7: partner.Input.Currencies:type_name -> partner.CurrencyGuide
	10, // 8: partner.GetPartnersRemcoResponse.Result:type_name -> partner.PerahubGetRemcoIDResult
	3,  // 9: partner.RemitPartnersResponse.PartnersEntry.value:type_name -> partner.RemitPartner
	4,  // 10: partner.RemitPartner.SupportedSendTypesEntry.value:type_name -> partner.RemitType
	4,  // 11: partner.RemitPartner.SupportedDisburseTypesEntry.value:type_name -> partner.RemitType
	7,  // 12: partner.InputGuideResponse.InputGuideEntry.value:type_name -> partner.Guide
	0,  // 13: partner.RemitPartnerService.RemitPartners:input_type -> partner.RemitPartnersRequest
	5,  // 14: partner.RemitPartnerService.InputGuide:input_type -> partner.InputGuideRequest
	17, // 15: partner.RemitPartnerService.GetPartnersRemco:input_type -> google.protobuf.Empty
	2,  // 16: partner.RemitPartnerService.RemitPartners:output_type -> partner.RemitPartnersResponse
	6,  // 17: partner.RemitPartnerService.InputGuide:output_type -> partner.InputGuideResponse
	11, // 18: partner.RemitPartnerService.GetPartnersRemco:output_type -> partner.GetPartnersRemcoResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_drp_v1_partner_all_proto_init() }
func file_brank_as_petnet_gunk_drp_v1_partner_all_proto_init() {
	if File_brank_as_petnet_gunk_drp_v1_partner_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemitPartnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemitPartnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemitPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputGuideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerahubGetRemcoIDResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnersRemcoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_drp_v1_partner_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_drp_v1_partner_all_proto_depIdxs,
		MessageInfos:      file_brank_as_petnet_gunk_drp_v1_partner_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_drp_v1_partner_all_proto = out.File
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_drp_v1_partner_all_proto_depIdxs = nil
}
