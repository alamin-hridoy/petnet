// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package partnercommission

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerCommissionServiceClient is the client API for PartnerCommissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerCommissionServiceClient interface {
	// Create Partner Commission
	CreatePartnerCommission(ctx context.Context, in *CreatePartnerCommissionRequest, opts ...grpc.CallOption) (*CreatePartnerCommissionResponse, error)
	// Update Partner Commission
	UpdatePartnerCommission(ctx context.Context, in *UpdatePartnerCommissionRequest, opts ...grpc.CallOption) (*UpdatePartnerCommissionResponse, error)
	// Create Partner Commission Tier
	CreatePartnerCommissionTier(ctx context.Context, in *CreatePartnerCommissionTierRequest, opts ...grpc.CallOption) (*CreatePartnerCommissionTierResponse, error)
	// update Partner Commission Tier
	UpdatePartnerCommissionTier(ctx context.Context, in *UpdatePartnerCommissionTierRequest, opts ...grpc.CallOption) (*UpdatePartnerCommissionTierResponse, error)
	// List Partner Commission.
	GetPartnerCommissionsList(ctx context.Context, in *GetPartnerCommissionsListRequest, opts ...grpc.CallOption) (*GetPartnerCommissionsListResponse, error)
	// List Partner Commission tier
	GetPartnerCommissionsTierList(ctx context.Context, in *GetPartnerCommissionsTierListRequest, opts ...grpc.CallOption) (*GetPartnerCommissionsTierListResponse, error)
	// Delete Partner Commission
	DeletePartnerCommission(ctx context.Context, in *DeletePartnerCommissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete Partner Commission Tier
	DeletePartnerCommissionTier(ctx context.Context, in *DeletePartnerCommissionTierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete Partner Commission Tier
	DeletePartnerCommissionTierById(ctx context.Context, in *DeletePartnerCommissionTierByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type partnerCommissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerCommissionServiceClient(cc grpc.ClientConnInterface) PartnerCommissionServiceClient {
	return &partnerCommissionServiceClient{cc}
}

func (c *partnerCommissionServiceClient) CreatePartnerCommission(ctx context.Context, in *CreatePartnerCommissionRequest, opts ...grpc.CallOption) (*CreatePartnerCommissionResponse, error) {
	out := new(CreatePartnerCommissionResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/CreatePartnerCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) UpdatePartnerCommission(ctx context.Context, in *UpdatePartnerCommissionRequest, opts ...grpc.CallOption) (*UpdatePartnerCommissionResponse, error) {
	out := new(UpdatePartnerCommissionResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/UpdatePartnerCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) CreatePartnerCommissionTier(ctx context.Context, in *CreatePartnerCommissionTierRequest, opts ...grpc.CallOption) (*CreatePartnerCommissionTierResponse, error) {
	out := new(CreatePartnerCommissionTierResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/CreatePartnerCommissionTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) UpdatePartnerCommissionTier(ctx context.Context, in *UpdatePartnerCommissionTierRequest, opts ...grpc.CallOption) (*UpdatePartnerCommissionTierResponse, error) {
	out := new(UpdatePartnerCommissionTierResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/UpdatePartnerCommissionTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) GetPartnerCommissionsList(ctx context.Context, in *GetPartnerCommissionsListRequest, opts ...grpc.CallOption) (*GetPartnerCommissionsListResponse, error) {
	out := new(GetPartnerCommissionsListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/GetPartnerCommissionsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) GetPartnerCommissionsTierList(ctx context.Context, in *GetPartnerCommissionsTierListRequest, opts ...grpc.CallOption) (*GetPartnerCommissionsTierListResponse, error) {
	out := new(GetPartnerCommissionsTierListResponse)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/GetPartnerCommissionsTierList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) DeletePartnerCommission(ctx context.Context, in *DeletePartnerCommissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/DeletePartnerCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) DeletePartnerCommissionTier(ctx context.Context, in *DeletePartnerCommissionTierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/DeletePartnerCommissionTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCommissionServiceClient) DeletePartnerCommissionTierById(ctx context.Context, in *DeletePartnerCommissionTierByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petnet.v2.partnercommission.PartnerCommissionService/DeletePartnerCommissionTierById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerCommissionServiceServer is the server API for PartnerCommissionService service.
// All implementations must embed UnimplementedPartnerCommissionServiceServer
// for forward compatibility
type PartnerCommissionServiceServer interface {
	// Create Partner Commission
	CreatePartnerCommission(context.Context, *CreatePartnerCommissionRequest) (*CreatePartnerCommissionResponse, error)
	// Update Partner Commission
	UpdatePartnerCommission(context.Context, *UpdatePartnerCommissionRequest) (*UpdatePartnerCommissionResponse, error)
	// Create Partner Commission Tier
	CreatePartnerCommissionTier(context.Context, *CreatePartnerCommissionTierRequest) (*CreatePartnerCommissionTierResponse, error)
	// update Partner Commission Tier
	UpdatePartnerCommissionTier(context.Context, *UpdatePartnerCommissionTierRequest) (*UpdatePartnerCommissionTierResponse, error)
	// List Partner Commission.
	GetPartnerCommissionsList(context.Context, *GetPartnerCommissionsListRequest) (*GetPartnerCommissionsListResponse, error)
	// List Partner Commission tier
	GetPartnerCommissionsTierList(context.Context, *GetPartnerCommissionsTierListRequest) (*GetPartnerCommissionsTierListResponse, error)
	// Delete Partner Commission
	DeletePartnerCommission(context.Context, *DeletePartnerCommissionRequest) (*emptypb.Empty, error)
	// Delete Partner Commission Tier
	DeletePartnerCommissionTier(context.Context, *DeletePartnerCommissionTierRequest) (*emptypb.Empty, error)
	// Delete Partner Commission Tier
	DeletePartnerCommissionTierById(context.Context, *DeletePartnerCommissionTierByIdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPartnerCommissionServiceServer()
}

// UnimplementedPartnerCommissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerCommissionServiceServer struct{}

func (UnimplementedPartnerCommissionServiceServer) CreatePartnerCommission(context.Context, *CreatePartnerCommissionRequest) (*CreatePartnerCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartnerCommission not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) UpdatePartnerCommission(context.Context, *UpdatePartnerCommissionRequest) (*UpdatePartnerCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerCommission not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) CreatePartnerCommissionTier(context.Context, *CreatePartnerCommissionTierRequest) (*CreatePartnerCommissionTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartnerCommissionTier not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) UpdatePartnerCommissionTier(context.Context, *UpdatePartnerCommissionTierRequest) (*UpdatePartnerCommissionTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerCommissionTier not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) GetPartnerCommissionsList(context.Context, *GetPartnerCommissionsListRequest) (*GetPartnerCommissionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerCommissionsList not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) GetPartnerCommissionsTierList(context.Context, *GetPartnerCommissionsTierListRequest) (*GetPartnerCommissionsTierListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerCommissionsTierList not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) DeletePartnerCommission(context.Context, *DeletePartnerCommissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartnerCommission not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) DeletePartnerCommissionTier(context.Context, *DeletePartnerCommissionTierRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartnerCommissionTier not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) DeletePartnerCommissionTierById(context.Context, *DeletePartnerCommissionTierByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartnerCommissionTierById not implemented")
}

func (UnimplementedPartnerCommissionServiceServer) mustEmbedUnimplementedPartnerCommissionServiceServer() {
}

// UnsafePartnerCommissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerCommissionServiceServer will
// result in compilation errors.
type UnsafePartnerCommissionServiceServer interface {
	mustEmbedUnimplementedPartnerCommissionServiceServer()
}

func RegisterPartnerCommissionServiceServer(s grpc.ServiceRegistrar, srv PartnerCommissionServiceServer) {
	s.RegisterService(&PartnerCommissionService_ServiceDesc, srv)
}

func _PartnerCommissionService_CreatePartnerCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).CreatePartnerCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/CreatePartnerCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).CreatePartnerCommission(ctx, req.(*CreatePartnerCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_UpdatePartnerCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).UpdatePartnerCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/UpdatePartnerCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).UpdatePartnerCommission(ctx, req.(*UpdatePartnerCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_CreatePartnerCommissionTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerCommissionTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).CreatePartnerCommissionTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/CreatePartnerCommissionTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).CreatePartnerCommissionTier(ctx, req.(*CreatePartnerCommissionTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_UpdatePartnerCommissionTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerCommissionTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).UpdatePartnerCommissionTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/UpdatePartnerCommissionTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).UpdatePartnerCommissionTier(ctx, req.(*UpdatePartnerCommissionTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_GetPartnerCommissionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerCommissionsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).GetPartnerCommissionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/GetPartnerCommissionsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).GetPartnerCommissionsList(ctx, req.(*GetPartnerCommissionsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_GetPartnerCommissionsTierList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerCommissionsTierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).GetPartnerCommissionsTierList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/GetPartnerCommissionsTierList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).GetPartnerCommissionsTierList(ctx, req.(*GetPartnerCommissionsTierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_DeletePartnerCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).DeletePartnerCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/DeletePartnerCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).DeletePartnerCommission(ctx, req.(*DeletePartnerCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_DeletePartnerCommissionTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerCommissionTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).DeletePartnerCommissionTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/DeletePartnerCommissionTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).DeletePartnerCommissionTier(ctx, req.(*DeletePartnerCommissionTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCommissionService_DeletePartnerCommissionTierById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerCommissionTierByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCommissionServiceServer).DeletePartnerCommissionTierById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petnet.v2.partnercommission.PartnerCommissionService/DeletePartnerCommissionTierById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCommissionServiceServer).DeletePartnerCommissionTierById(ctx, req.(*DeletePartnerCommissionTierByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerCommissionService_ServiceDesc is the grpc.ServiceDesc for PartnerCommissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerCommissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petnet.v2.partnercommission.PartnerCommissionService",
	HandlerType: (*PartnerCommissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartnerCommission",
			Handler:    _PartnerCommissionService_CreatePartnerCommission_Handler,
		},
		{
			MethodName: "UpdatePartnerCommission",
			Handler:    _PartnerCommissionService_UpdatePartnerCommission_Handler,
		},
		{
			MethodName: "CreatePartnerCommissionTier",
			Handler:    _PartnerCommissionService_CreatePartnerCommissionTier_Handler,
		},
		{
			MethodName: "UpdatePartnerCommissionTier",
			Handler:    _PartnerCommissionService_UpdatePartnerCommissionTier_Handler,
		},
		{
			MethodName: "GetPartnerCommissionsList",
			Handler:    _PartnerCommissionService_GetPartnerCommissionsList_Handler,
		},
		{
			MethodName: "GetPartnerCommissionsTierList",
			Handler:    _PartnerCommissionService_GetPartnerCommissionsTierList_Handler,
		},
		{
			MethodName: "DeletePartnerCommission",
			Handler:    _PartnerCommissionService_DeletePartnerCommission_Handler,
		},
		{
			MethodName: "DeletePartnerCommissionTier",
			Handler:    _PartnerCommissionService_DeletePartnerCommissionTier_Handler,
		},
		{
			MethodName: "DeletePartnerCommissionTierById",
			Handler:    _PartnerCommissionService_DeletePartnerCommissionTierById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brank.as/petnet/gunk/dsa/v2/partnercommission/all.proto",
}
