// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: brank.as/petnet/gunk/dsa/v2/file/all.proto

package file

import (
	reflect "reflect"
	sync "sync"

	profile "brank.as/petnet/gunk/dsa/v2/profile"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UploadType int32

const (
	UploadType_UnknownUploadType UploadType = 0
	// business info
	UploadType_IDPhoto             UploadType = 1
	UploadType_Picture             UploadType = 2
	UploadType_NBIClearance        UploadType = 3
	UploadType_CourtClearance      UploadType = 4
	UploadType_IncorporationPapers UploadType = 5
	UploadType_MayorsPermit        UploadType = 6
	UploadType_NDA                 UploadType = 7
	// financial info
	UploadType_FinancialStatement UploadType = 8
	UploadType_BankStatement      UploadType = 9
	// western union
	UploadType_Questionnaire UploadType = 10
	// Request File Upload for remittance
	UploadType_Mbf         UploadType = 11
	UploadType_Sec         UploadType = 12
	UploadType_Gis         UploadType = 13
	UploadType_Afs         UploadType = 14
	UploadType_Brs         UploadType = 15
	UploadType_Bmp         UploadType = 16
	UploadType_Scbr        UploadType = 17
	UploadType_Via         UploadType = 18
	UploadType_Bspr        UploadType = 19
	UploadType_Cp          UploadType = 20
	UploadType_Aml         UploadType = 21
	UploadType_Nnda        UploadType = 22
	UploadType_Psf         UploadType = 23
	UploadType_Psp         UploadType = 24
	UploadType_Kddq        UploadType = 25
	UploadType_Sis         UploadType = 26
	UploadType_Moa         UploadType = 27
	UploadType_WU_cd       UploadType = 28
	UploadType_WU_lbp      UploadType = 29
	UploadType_WU_sr       UploadType = 30
	UploadType_WU_lgis     UploadType = 31
	UploadType_WU_dtisspa  UploadType = 32
	UploadType_WU_birf     UploadType = 33
	UploadType_WU_bspr     UploadType = 34
	UploadType_WU_iqa      UploadType = 35
	UploadType_WU_bqa      UploadType = 36
	UploadType_AYA_dfedr   UploadType = 37
	UploadType_AYA_ddf     UploadType = 38
	UploadType_AYA_ialaws  UploadType = 39
	UploadType_AYA_aialaws UploadType = 40
	UploadType_AYA_mtl     UploadType = 41
	UploadType_AYA_cbpr    UploadType = 42
	UploadType_AYA_brdcsa  UploadType = 43
	UploadType_AYA_gis     UploadType = 44
	UploadType_AYA_ccpwi   UploadType = 45
	UploadType_AYA_fas     UploadType = 46
	UploadType_AYA_am      UploadType = 47
	UploadType_AYA_laf     UploadType = 48
	UploadType_AYA_birr    UploadType = 49
	UploadType_AYA_od      UploadType = 50
	// cico documents
	UploadType_CICO_nda   UploadType = 51
	UploadType_CICO_sis   UploadType = 52
	UploadType_CICO_psf   UploadType = 53
	UploadType_CICO_pspp  UploadType = 54
	UploadType_CICO_sec   UploadType = 55
	UploadType_CICO_gis   UploadType = 56
	UploadType_CICO_afs   UploadType = 57
	UploadType_CICO_bir   UploadType = 58
	UploadType_CICO_bsp   UploadType = 59
	UploadType_CICO_aml   UploadType = 60
	UploadType_CICO_sccas UploadType = 61
	UploadType_CICO_vgid  UploadType = 62
	UploadType_CICO_cp    UploadType = 63
	UploadType_CICO_moa   UploadType = 64
	UploadType_CICO_amla  UploadType = 65
	UploadType_CICO_mtpp  UploadType = 66
	UploadType_CICO_is    UploadType = 67
	UploadType_CICO_edd   UploadType = 68
	// BillsPayment documents
	UploadType_BP_nda   UploadType = 69
	UploadType_BP_sis   UploadType = 70
	UploadType_BP_psf   UploadType = 71
	UploadType_BP_psp   UploadType = 72
	UploadType_BP_sec   UploadType = 73
	UploadType_BP_aib   UploadType = 74
	UploadType_BP_gis   UploadType = 75
	UploadType_BP_lpafs UploadType = 76
	UploadType_BP_bir   UploadType = 77
	UploadType_BP_bp    UploadType = 78
	UploadType_BP_bsp   UploadType = 79
	UploadType_BP_aml   UploadType = 80
	UploadType_BP_sccas UploadType = 81
	UploadType_BP_vg    UploadType = 82
	UploadType_BP_cp    UploadType = 83
	UploadType_BP_moa   UploadType = 84
	UploadType_BP_amla  UploadType = 85
	UploadType_BP_mttp  UploadType = 86
	UploadType_BP_sci   UploadType = 87
	UploadType_BP_edd   UploadType = 88
	// MicroInsurance documents
	UploadType_MI_mbf UploadType = 89
	UploadType_MI_nda UploadType = 90
	UploadType_MI_sec UploadType = 91
	UploadType_MI_gis UploadType = 92
	UploadType_MI_afs UploadType = 93
	UploadType_MI_bir UploadType = 94
	UploadType_MI_scb UploadType = 95
	UploadType_MI_via UploadType = 96
	UploadType_MI_moa UploadType = 97
)

// Enum value maps for UploadType.
var (
	UploadType_name = map[int32]string{
		0:  "UnknownUploadType",
		1:  "IDPhoto",
		2:  "Picture",
		3:  "NBIClearance",
		4:  "CourtClearance",
		5:  "IncorporationPapers",
		6:  "MayorsPermit",
		7:  "NDA",
		8:  "FinancialStatement",
		9:  "BankStatement",
		10: "Questionnaire",
		11: "Mbf",
		12: "Sec",
		13: "Gis",
		14: "Afs",
		15: "Brs",
		16: "Bmp",
		17: "Scbr",
		18: "Via",
		19: "Bspr",
		20: "Cp",
		21: "Aml",
		22: "Nnda",
		23: "Psf",
		24: "Psp",
		25: "Kddq",
		26: "Sis",
		27: "Moa",
		28: "WU_cd",
		29: "WU_lbp",
		30: "WU_sr",
		31: "WU_lgis",
		32: "WU_dtisspa",
		33: "WU_birf",
		34: "WU_bspr",
		35: "WU_iqa",
		36: "WU_bqa",
		37: "AYA_dfedr",
		38: "AYA_ddf",
		39: "AYA_ialaws",
		40: "AYA_aialaws",
		41: "AYA_mtl",
		42: "AYA_cbpr",
		43: "AYA_brdcsa",
		44: "AYA_gis",
		45: "AYA_ccpwi",
		46: "AYA_fas",
		47: "AYA_am",
		48: "AYA_laf",
		49: "AYA_birr",
		50: "AYA_od",
		51: "CICO_nda",
		52: "CICO_sis",
		53: "CICO_psf",
		54: "CICO_pspp",
		55: "CICO_sec",
		56: "CICO_gis",
		57: "CICO_afs",
		58: "CICO_bir",
		59: "CICO_bsp",
		60: "CICO_aml",
		61: "CICO_sccas",
		62: "CICO_vgid",
		63: "CICO_cp",
		64: "CICO_moa",
		65: "CICO_amla",
		66: "CICO_mtpp",
		67: "CICO_is",
		68: "CICO_edd",
		69: "BP_nda",
		70: "BP_sis",
		71: "BP_psf",
		72: "BP_psp",
		73: "BP_sec",
		74: "BP_aib",
		75: "BP_gis",
		76: "BP_lpafs",
		77: "BP_bir",
		78: "BP_bp",
		79: "BP_bsp",
		80: "BP_aml",
		81: "BP_sccas",
		82: "BP_vg",
		83: "BP_cp",
		84: "BP_moa",
		85: "BP_amla",
		86: "BP_mttp",
		87: "BP_sci",
		88: "BP_edd",
		89: "MI_mbf",
		90: "MI_nda",
		91: "MI_sec",
		92: "MI_gis",
		93: "MI_afs",
		94: "MI_bir",
		95: "MI_scb",
		96: "MI_via",
		97: "MI_moa",
	}
	UploadType_value = map[string]int32{
		"UnknownUploadType":   0,
		"IDPhoto":             1,
		"Picture":             2,
		"NBIClearance":        3,
		"CourtClearance":      4,
		"IncorporationPapers": 5,
		"MayorsPermit":        6,
		"NDA":                 7,
		"FinancialStatement":  8,
		"BankStatement":       9,
		"Questionnaire":       10,
		"Mbf":                 11,
		"Sec":                 12,
		"Gis":                 13,
		"Afs":                 14,
		"Brs":                 15,
		"Bmp":                 16,
		"Scbr":                17,
		"Via":                 18,
		"Bspr":                19,
		"Cp":                  20,
		"Aml":                 21,
		"Nnda":                22,
		"Psf":                 23,
		"Psp":                 24,
		"Kddq":                25,
		"Sis":                 26,
		"Moa":                 27,
		"WU_cd":               28,
		"WU_lbp":              29,
		"WU_sr":               30,
		"WU_lgis":             31,
		"WU_dtisspa":          32,
		"WU_birf":             33,
		"WU_bspr":             34,
		"WU_iqa":              35,
		"WU_bqa":              36,
		"AYA_dfedr":           37,
		"AYA_ddf":             38,
		"AYA_ialaws":          39,
		"AYA_aialaws":         40,
		"AYA_mtl":             41,
		"AYA_cbpr":            42,
		"AYA_brdcsa":          43,
		"AYA_gis":             44,
		"AYA_ccpwi":           45,
		"AYA_fas":             46,
		"AYA_am":              47,
		"AYA_laf":             48,
		"AYA_birr":            49,
		"AYA_od":              50,
		"CICO_nda":            51,
		"CICO_sis":            52,
		"CICO_psf":            53,
		"CICO_pspp":           54,
		"CICO_sec":            55,
		"CICO_gis":            56,
		"CICO_afs":            57,
		"CICO_bir":            58,
		"CICO_bsp":            59,
		"CICO_aml":            60,
		"CICO_sccas":          61,
		"CICO_vgid":           62,
		"CICO_cp":             63,
		"CICO_moa":            64,
		"CICO_amla":           65,
		"CICO_mtpp":           66,
		"CICO_is":             67,
		"CICO_edd":            68,
		"BP_nda":              69,
		"BP_sis":              70,
		"BP_psf":              71,
		"BP_psp":              72,
		"BP_sec":              73,
		"BP_aib":              74,
		"BP_gis":              75,
		"BP_lpafs":            76,
		"BP_bir":              77,
		"BP_bp":               78,
		"BP_bsp":              79,
		"BP_aml":              80,
		"BP_sccas":            81,
		"BP_vg":               82,
		"BP_cp":               83,
		"BP_moa":              84,
		"BP_amla":             85,
		"BP_mttp":             86,
		"BP_sci":              87,
		"BP_edd":              88,
		"MI_mbf":              89,
		"MI_nda":              90,
		"MI_sec":              91,
		"MI_gis":              92,
		"MI_afs":              93,
		"MI_bir":              94,
		"MI_scb":              95,
		"MI_via":              96,
		"MI_moa":              97,
	}
)

func (x UploadType) Enum() *UploadType {
	p := new(UploadType)
	*p = x
	return p
}

func (x UploadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadType) Descriptor() protoreflect.EnumDescriptor {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_enumTypes[0].Descriptor()
}

func (UploadType) Type() protoreflect.EnumType {
	return &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_enumTypes[0]
}

func (x UploadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadType.Descriptor instead.
func (UploadType) EnumDescriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{0}
}

type FileUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	OrgID       string                 `protobuf:"bytes,2,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
	UserID      string                 `protobuf:"bytes,3,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	FileNames   []string               `protobuf:"bytes,4,rep,name=FileNames,json=file_name,proto3" json:"file_name,omitempty"`
	BucketName  string                 `protobuf:"bytes,5,opt,name=BucketName,json=bucket_name,proto3" json:"bucket_name,omitempty"`
	Type        UploadType             `protobuf:"varint,6,opt,name=Type,json=upload_type,proto3,enum=petnet.v2.file.UploadType" json:"upload_type,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=Created,json=created,proto3" json:"created,omitempty"`
	Submitted   profile.Boolean        `protobuf:"varint,8,opt,name=Submitted,json=submitted,proto3,enum=petnet.v2.profile.Boolean" json:"submitted,omitempty"`
	DateChecked *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=DateChecked,json=checked,proto3" json:"checked,omitempty"`
	FileName    map[string]string      `protobuf:"bytes,10,rep,name=FileName,json=filename,proto3" json:"filename,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileUpload) Reset() {
	*x = FileUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUpload) ProtoMessage() {}

func (x *FileUpload) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUpload.ProtoReflect.Descriptor instead.
func (*FileUpload) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{0}
}

func (x *FileUpload) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FileUpload) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *FileUpload) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *FileUpload) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

func (x *FileUpload) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *FileUpload) GetType() UploadType {
	if x != nil {
		return x.Type
	}
	return UploadType_UnknownUploadType
}

func (x *FileUpload) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *FileUpload) GetSubmitted() profile.Boolean {
	if x != nil {
		return x.Submitted
	}
	return profile.Boolean_UnknownBoolean
}

func (x *FileUpload) GetDateChecked() *timestamppb.Timestamp {
	if x != nil {
		return x.DateChecked
	}
	return nil
}

func (x *FileUpload) GetFileName() map[string]string {
	if x != nil {
		return x.FileName
	}
	return nil
}

type DeleteFileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	FileNames string `protobuf:"bytes,2,opt,name=FileNames,json=file_names,proto3" json:"file_names,omitempty"`
	OrgID     string `protobuf:"bytes,3,opt,name=OrgID,json=org_id,proto3" json:"org_id,omitempty"`
}

func (x *DeleteFileUploadRequest) Reset() {
	*x = DeleteFileUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileUploadRequest) ProtoMessage() {}

func (x *DeleteFileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileUploadRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileUploadRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteFileUploadRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteFileUploadRequest) GetFileNames() string {
	if x != nil {
		return x.FileNames
	}
	return ""
}

func (x *DeleteFileUploadRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type DeleteFileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFileUploadResponse) Reset() {
	*x = DeleteFileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileUploadResponse) ProtoMessage() {}

func (x *DeleteFileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileUploadResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileUploadResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{2}
}

type UpsertFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUploads []*FileUpload `protobuf:"bytes,1,rep,name=FileUploads,json=file,proto3" json:"file,omitempty"`
}

func (x *UpsertFilesRequest) Reset() {
	*x = UpsertFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertFilesRequest) ProtoMessage() {}

func (x *UpsertFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertFilesRequest.ProtoReflect.Descriptor instead.
func (*UpsertFilesRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{3}
}

func (x *UpsertFilesRequest) GetFileUploads() []*FileUpload {
	if x != nil {
		return x.FileUploads
	}
	return nil
}

type UpsertFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUploads []*FileUpload `protobuf:"bytes,1,rep,name=FileUploads,json=files,proto3" json:"files,omitempty"`
}

func (x *UpsertFilesResponse) Reset() {
	*x = UpsertFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertFilesResponse) ProtoMessage() {}

func (x *UpsertFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertFilesResponse.ProtoReflect.Descriptor instead.
func (*UpsertFilesResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertFilesResponse) GetFileUploads() []*FileUpload {
	if x != nil {
		return x.FileUploads
	}
	return nil
}

type ListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string       `protobuf:"bytes,1,opt,name=OrgID,json=id,proto3" json:"id,omitempty"`
	Types []UploadType `protobuf:"varint,2,rep,packed,name=Types,json=types,proto3,enum=petnet.v2.file.UploadType" json:"types,omitempty"`
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{5}
}

func (x *ListFilesRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ListFilesRequest) GetTypes() []UploadType {
	if x != nil {
		return x.Types
	}
	return nil
}

type ListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUploads []*FileUpload `protobuf:"bytes,1,rep,name=FileUploads,json=files,proto3" json:"files,omitempty"`
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP(), []int{6}
}

func (x *ListFilesResponse) GetFileUploads() []*FileUpload {
	if x != nil {
		return x.FileUploads
	}
	return nil
}

var File_brank_as_petnet_gunk_dsa_v2_file_all_proto protoreflect.FileDescriptor

var file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x65,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x62, 0x72, 0x61,
	0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x6e,
	0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x04, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x09, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2f, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x8b, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x22,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x5f, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x61, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x77, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x5f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x74, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x2a, 0x91, 0x0d, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x49, 0x44,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c,
	0x4e, 0x42, 0x49, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x49, 0x6e,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x73, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4d, 0x61, 0x79, 0x6f, 0x72,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a,
	0x03, 0x4e, 0x44, 0x41, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x10, 0x0a,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x4d, 0x62, 0x66, 0x10, 0x0b, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0b, 0x0a, 0x03, 0x53, 0x65, 0x63, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b,
	0x0a, 0x03, 0x47, 0x69, 0x73, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41,
	0x66, 0x73, 0x10, 0x0e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x42, 0x72, 0x73, 0x10,
	0x0f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x42, 0x6d, 0x70, 0x10, 0x10, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x53, 0x63, 0x62, 0x72, 0x10, 0x11, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0b, 0x0a, 0x03, 0x56, 0x69, 0x61, 0x10, 0x12, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a,
	0x04, 0x42, 0x73, 0x70, 0x72, 0x10, 0x13, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x43,
	0x70, 0x10, 0x14, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41, 0x6d, 0x6c, 0x10, 0x15,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x4e, 0x6e, 0x64, 0x61, 0x10, 0x16, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x50, 0x73, 0x66, 0x10, 0x17, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0b, 0x0a, 0x03, 0x50, 0x73, 0x70, 0x10, 0x18, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04,
	0x4b, 0x64, 0x64, 0x71, 0x10, 0x19, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x53, 0x69,
	0x73, 0x10, 0x1a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x4d, 0x6f, 0x61, 0x10, 0x1b,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x57, 0x55, 0x5f, 0x63, 0x64, 0x10, 0x1c, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x57, 0x55, 0x5f, 0x6c, 0x62, 0x70, 0x10, 0x1d, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x57, 0x55, 0x5f, 0x73, 0x72, 0x10, 0x1e, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x57, 0x55, 0x5f, 0x6c, 0x67, 0x69, 0x73, 0x10, 0x1f, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x57, 0x55, 0x5f, 0x64, 0x74, 0x69, 0x73, 0x73, 0x70,
	0x61, 0x10, 0x20, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x57, 0x55, 0x5f, 0x62, 0x69,
	0x72, 0x66, 0x10, 0x21, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x57, 0x55, 0x5f, 0x62,
	0x73, 0x70, 0x72, 0x10, 0x22, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x57, 0x55, 0x5f,
	0x69, 0x71, 0x61, 0x10, 0x23, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x57, 0x55, 0x5f,
	0x62, 0x71, 0x61, 0x10, 0x24, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x41, 0x59, 0x41,
	0x5f, 0x64, 0x66, 0x65, 0x64, 0x72, 0x10, 0x25, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07,
	0x41, 0x59, 0x41, 0x5f, 0x64, 0x64, 0x66, 0x10, 0x26, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a,
	0x0a, 0x41, 0x59, 0x41, 0x5f, 0x69, 0x61, 0x6c, 0x61, 0x77, 0x73, 0x10, 0x27, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x13, 0x0a, 0x0b, 0x41, 0x59, 0x41, 0x5f, 0x61, 0x69, 0x61, 0x6c, 0x61, 0x77, 0x73,
	0x10, 0x28, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x41, 0x59, 0x41, 0x5f, 0x6d, 0x74,
	0x6c, 0x10, 0x29, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x41, 0x59, 0x41, 0x5f, 0x63,
	0x62, 0x70, 0x72, 0x10, 0x2a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x41, 0x59, 0x41,
	0x5f, 0x62, 0x72, 0x64, 0x63, 0x73, 0x61, 0x10, 0x2b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a,
	0x07, 0x41, 0x59, 0x41, 0x5f, 0x67, 0x69, 0x73, 0x10, 0x2c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11,
	0x0a, 0x09, 0x41, 0x59, 0x41, 0x5f, 0x63, 0x63, 0x70, 0x77, 0x69, 0x10, 0x2d, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0f, 0x0a, 0x07, 0x41, 0x59, 0x41, 0x5f, 0x66, 0x61, 0x73, 0x10, 0x2e, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x41, 0x59, 0x41, 0x5f, 0x61, 0x6d, 0x10, 0x2f, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x41, 0x59, 0x41, 0x5f, 0x6c, 0x61, 0x66, 0x10, 0x30, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x41, 0x59, 0x41, 0x5f, 0x62, 0x69, 0x72, 0x72, 0x10,
	0x31, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x41, 0x59, 0x41, 0x5f, 0x6f, 0x64, 0x10,
	0x32, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x6e, 0x64,
	0x61, 0x10, 0x33, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f,
	0x73, 0x69, 0x73, 0x10, 0x34, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43,
	0x4f, 0x5f, 0x70, 0x73, 0x66, 0x10, 0x35, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x43,
	0x49, 0x43, 0x4f, 0x5f, 0x70, 0x73, 0x70, 0x70, 0x10, 0x36, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10,
	0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x73, 0x65, 0x63, 0x10, 0x37, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x67, 0x69, 0x73, 0x10, 0x38, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x61, 0x66, 0x73, 0x10, 0x39,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x62, 0x69, 0x72,
	0x10, 0x3a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x62,
	0x73, 0x70, 0x10, 0x3b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f,
	0x5f, 0x61, 0x6d, 0x6c, 0x10, 0x3c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x43, 0x49,
	0x43, 0x4f, 0x5f, 0x73, 0x63, 0x63, 0x61, 0x73, 0x10, 0x3d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11,
	0x0a, 0x09, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x76, 0x67, 0x69, 0x64, 0x10, 0x3e, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0f, 0x0a, 0x07, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x63, 0x70, 0x10, 0x3f, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x6d, 0x6f, 0x61, 0x10, 0x40,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x43, 0x49, 0x43, 0x4f, 0x5f, 0x61, 0x6d, 0x6c,
	0x61, 0x10, 0x41, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x43, 0x49, 0x43, 0x4f, 0x5f,
	0x6d, 0x74, 0x70, 0x70, 0x10, 0x42, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x43, 0x49,
	0x43, 0x4f, 0x5f, 0x69, 0x73, 0x10, 0x43, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43,
	0x49, 0x43, 0x4f, 0x5f, 0x65, 0x64, 0x64, 0x10, 0x44, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a,
	0x06, 0x42, 0x50, 0x5f, 0x6e, 0x64, 0x61, 0x10, 0x45, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a,
	0x06, 0x42, 0x50, 0x5f, 0x73, 0x69, 0x73, 0x10, 0x46, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a,
	0x06, 0x42, 0x50, 0x5f, 0x70, 0x73, 0x66, 0x10, 0x47, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a,
	0x06, 0x42, 0x50, 0x5f, 0x70, 0x73, 0x70, 0x10, 0x48, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a,
	0x06, 0x42, 0x50, 0x5f, 0x73, 0x65, 0x63, 0x10, 0x49, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a,
	0x06, 0x42, 0x50, 0x5f, 0x61, 0x69, 0x62, 0x10, 0x4a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a,
	0x06, 0x42, 0x50, 0x5f, 0x67, 0x69, 0x73, 0x10, 0x4b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a,
	0x08, 0x42, 0x50, 0x5f, 0x6c, 0x70, 0x61, 0x66, 0x73, 0x10, 0x4c, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0e, 0x0a, 0x06, 0x42, 0x50, 0x5f, 0x62, 0x69, 0x72, 0x10, 0x4d, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0d, 0x0a, 0x05, 0x42, 0x50, 0x5f, 0x62, 0x70, 0x10, 0x4e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e,
	0x0a, 0x06, 0x42, 0x50, 0x5f, 0x62, 0x73, 0x70, 0x10, 0x4f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e,
	0x0a, 0x06, 0x42, 0x50, 0x5f, 0x61, 0x6d, 0x6c, 0x10, 0x50, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10,
	0x0a, 0x08, 0x42, 0x50, 0x5f, 0x73, 0x63, 0x63, 0x61, 0x73, 0x10, 0x51, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0d, 0x0a, 0x05, 0x42, 0x50, 0x5f, 0x76, 0x67, 0x10, 0x52, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0d, 0x0a, 0x05, 0x42, 0x50, 0x5f, 0x63, 0x70, 0x10, 0x53, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e,
	0x0a, 0x06, 0x42, 0x50, 0x5f, 0x6d, 0x6f, 0x61, 0x10, 0x54, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f,
	0x0a, 0x07, 0x42, 0x50, 0x5f, 0x61, 0x6d, 0x6c, 0x61, 0x10, 0x55, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0f, 0x0a, 0x07, 0x42, 0x50, 0x5f, 0x6d, 0x74, 0x74, 0x70, 0x10, 0x56, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x42, 0x50, 0x5f, 0x73, 0x63, 0x69, 0x10, 0x57, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x42, 0x50, 0x5f, 0x65, 0x64, 0x64, 0x10, 0x58, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x6d, 0x62, 0x66, 0x10, 0x59, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x6e, 0x64, 0x61, 0x10, 0x5a, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x73, 0x65, 0x63, 0x10, 0x5b, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x67, 0x69, 0x73, 0x10, 0x5c, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x61, 0x66, 0x73, 0x10, 0x5d, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x62, 0x69, 0x72, 0x10, 0x5e, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x73, 0x63, 0x62, 0x10, 0x5f, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x76, 0x69, 0x61, 0x10, 0x60, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x49, 0x5f, 0x6d, 0x6f, 0x61, 0x10, 0x61, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x32, 0xd1, 0x09, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x91, 0x03, 0x0a, 0x0b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x83, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x1a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x61, 0x20,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4a,
	0x52, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29, 0x0a, 0x27, 0x1a, 0x25, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x1a, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x2f, 0x7b, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8d, 0x03, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x02, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x94, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x1a, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x61, 0x6e, 0x64,
	0x2f, 0x6f, 0x72, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4a, 0x50, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x49, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x27, 0x0a, 0x25, 0x1a, 0x23, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x4f, 0x72,
	0x67, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x98, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x2e,
	0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xac, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xfb, 0x01, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x20, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x1a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4a, 0x57, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x50, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2e,
	0x0a, 0x2c, 0x1a, 0x2a, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x39,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d,
	0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30, 0x31,
	0x12, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1f,
	0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x7b,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x28,
	0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x40, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x25,
	0x62, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x74, 0x6e, 0x65, 0x74, 0x2f,
	0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x64, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x3b, 0x66, 0x69, 0x6c, 0x65, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescOnce sync.Once
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescData = file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDesc
)

func file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescGZIP() []byte {
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescOnce.Do(func() {
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescData)
	})
	return file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDescData
}

var (
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 8)
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_goTypes   = []interface{}{
		(UploadType)(0),                  // 0: petnet.v2.file.UploadType
		(*FileUpload)(nil),               // 1: petnet.v2.file.FileUpload
		(*DeleteFileUploadRequest)(nil),  // 2: petnet.v2.file.DeleteFileUploadRequest
		(*DeleteFileUploadResponse)(nil), // 3: petnet.v2.file.DeleteFileUploadResponse
		(*UpsertFilesRequest)(nil),       // 4: petnet.v2.file.UpsertFilesRequest
		(*UpsertFilesResponse)(nil),      // 5: petnet.v2.file.UpsertFilesResponse
		(*ListFilesRequest)(nil),         // 6: petnet.v2.file.ListFilesRequest
		(*ListFilesResponse)(nil),        // 7: petnet.v2.file.ListFilesResponse
		nil,                              // 8: petnet.v2.file.FileUpload.FileNameEntry
		(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
		(profile.Boolean)(0),             // 10: petnet.v2.profile.Boolean
	}
)

var file_brank_as_petnet_gunk_dsa_v2_file_all_proto_depIdxs = []int32{
	0,  // 0: petnet.v2.file.FileUpload.Type:type_name -> petnet.v2.file.UploadType
	9,  // 1: petnet.v2.file.FileUpload.Created:type_name -> google.protobuf.Timestamp
	10, // 2: petnet.v2.file.FileUpload.Submitted:type_name -> petnet.v2.profile.Boolean
	9,  // 3: petnet.v2.file.FileUpload.DateChecked:type_name -> google.protobuf.Timestamp
	8,  // 4: petnet.v2.file.FileUpload.FileName:type_name -> petnet.v2.file.FileUpload.FileNameEntry
	1,  // 5: petnet.v2.file.UpsertFilesRequest.FileUploads:type_name -> petnet.v2.file.FileUpload
	1,  // 6: petnet.v2.file.UpsertFilesResponse.FileUploads:type_name -> petnet.v2.file.FileUpload
	0,  // 7: petnet.v2.file.ListFilesRequest.Types:type_name -> petnet.v2.file.UploadType
	1,  // 8: petnet.v2.file.ListFilesResponse.FileUploads:type_name -> petnet.v2.file.FileUpload
	4,  // 9: petnet.v2.file.FileService.UpsertFiles:input_type -> petnet.v2.file.UpsertFilesRequest
	6,  // 10: petnet.v2.file.FileService.ListFiles:input_type -> petnet.v2.file.ListFilesRequest
	2,  // 11: petnet.v2.file.FileService.DeleteFileUpload:input_type -> petnet.v2.file.DeleteFileUploadRequest
	5,  // 12: petnet.v2.file.FileService.UpsertFiles:output_type -> petnet.v2.file.UpsertFilesResponse
	7,  // 13: petnet.v2.file.FileService.ListFiles:output_type -> petnet.v2.file.ListFilesResponse
	3,  // 14: petnet.v2.file.FileService.DeleteFileUpload:output_type -> petnet.v2.file.DeleteFileUploadResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_brank_as_petnet_gunk_dsa_v2_file_all_proto_init() }
func file_brank_as_petnet_gunk_dsa_v2_file_all_proto_init() {
	if File_brank_as_petnet_gunk_dsa_v2_file_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brank_as_petnet_gunk_dsa_v2_file_all_proto_goTypes,
		DependencyIndexes: file_brank_as_petnet_gunk_dsa_v2_file_all_proto_depIdxs,
		EnumInfos:         file_brank_as_petnet_gunk_dsa_v2_file_all_proto_enumTypes,
		MessageInfos:      file_brank_as_petnet_gunk_dsa_v2_file_all_proto_msgTypes,
	}.Build()
	File_brank_as_petnet_gunk_dsa_v2_file_all_proto = out.File
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_rawDesc = nil
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_goTypes = nil
	file_brank_as_petnet_gunk_dsa_v2_file_all_proto_depIdxs = nil
}
